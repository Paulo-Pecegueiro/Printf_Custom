
FreeRTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098b8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b48  08009b48  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  08009b48  08009b48  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b48  08009b48  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b48  08009b48  00019b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b4c  08009b4c  00019b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08009b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003174  20000194  08009ce4  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20003308  08009ce4  00023308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020eaa  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bd7  00000000  00000000  00041067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  00045c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00047328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf81  00000000  00000000  000487f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8fa  00000000  00000000  00065779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097483  00000000  00000000  00081073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001184f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed4  00000000  00000000  0011854c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000194 	.word	0x20000194
 800012c:	00000000 	.word	0x00000000
 8000130:	080099b0 	.word	0x080099b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000198 	.word	0x20000198
 800014c:	080099b0 	.word	0x080099b0

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2iz>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000834:	d215      	bcs.n	8000862 <__aeabi_d2iz+0x36>
 8000836:	d511      	bpl.n	800085c <__aeabi_d2iz+0x30>
 8000838:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d912      	bls.n	8000868 <__aeabi_d2iz+0x3c>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000852:	fa23 f002 	lsr.w	r0, r3, r2
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d105      	bne.n	8000874 <__aeabi_d2iz+0x48>
 8000868:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800086c:	bf08      	it	eq
 800086e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	0000      	movs	r0, r0
	...

08000880 <send_deftask>:
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
void send_deftask(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af08      	add	r7, sp, #32
	while(printf_custom("Hello from deftask   %s   %c   %i   %u   %o   %x   %b   %.2f   %f\r\n", "string", 'X', -33, 33, 33, 33, 33, -33.33, 33.33)!=0)
 8000886:	e002      	b.n	800088e <send_deftask+0xe>
		osDelay(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f006 fe7e 	bl	800758a <osDelay>
	while(printf_custom("Hello from deftask   %s   %c   %i   %u   %o   %x   %b   %.2f   %f\r\n", "string", 'X', -33, 33, 33, 33, 33, -33.33, 33.33)!=0)
 800088e:	a310      	add	r3, pc, #64	; (adr r3, 80008d0 <send_deftask+0x50>)
 8000890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000894:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000898:	a30f      	add	r3, pc, #60	; (adr r3, 80008d8 <send_deftask+0x58>)
 800089a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800089e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80008a2:	2321      	movs	r3, #33	; 0x21
 80008a4:	9303      	str	r3, [sp, #12]
 80008a6:	2321      	movs	r3, #33	; 0x21
 80008a8:	9302      	str	r3, [sp, #8]
 80008aa:	2321      	movs	r3, #33	; 0x21
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	2321      	movs	r3, #33	; 0x21
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	f06f 0320 	mvn.w	r3, #32
 80008b6:	2258      	movs	r2, #88	; 0x58
 80008b8:	4909      	ldr	r1, [pc, #36]	; (80008e0 <send_deftask+0x60>)
 80008ba:	480a      	ldr	r0, [pc, #40]	; (80008e4 <send_deftask+0x64>)
 80008bc:	f007 ffd0 	bl	8008860 <printf_custom>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1e0      	bne.n	8000888 <send_deftask+0x8>
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	70a3d70a 	.word	0x70a3d70a
 80008d4:	4040aa3d 	.word	0x4040aa3d
 80008d8:	70a3d70a 	.word	0x70a3d70a
 80008dc:	c040aa3d 	.word	0xc040aa3d
 80008e0:	080099ec 	.word	0x080099ec
 80008e4:	080099f4 	.word	0x080099f4

080008e8 <send_task2>:
void send_task2(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	while(printf_custom("Hello from task2\r\n")!=0)
 80008ec:	e002      	b.n	80008f4 <send_task2+0xc>
		osDelay(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f006 fe4b 	bl	800758a <osDelay>
	while(printf_custom("Hello from task2\r\n")!=0)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <send_task2+0x20>)
 80008f6:	f007 ffb3 	bl	8008860 <printf_custom>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1f6      	bne.n	80008ee <send_task2+0x6>
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08009a38 	.word	0x08009a38

0800090c <send_task3>:

void send_task3(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	while(printf_custom("Hello from task3\r\n")!=0)
 8000910:	e002      	b.n	8000918 <send_task3+0xc>
		osDelay(1);
 8000912:	2001      	movs	r0, #1
 8000914:	f006 fe39 	bl	800758a <osDelay>
	while(printf_custom("Hello from task3\r\n")!=0)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <send_task3+0x20>)
 800091a:	f007 ffa1 	bl	8008860 <printf_custom>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1f6      	bne.n	8000912 <send_task3+0x6>
}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	08009a4c 	.word	0x08009a4c

08000930 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4a06      	ldr	r2, [pc, #24]	; (8000958 <vApplicationGetIdleTaskMemory+0x28>)
 8000940:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	4a05      	ldr	r2, [pc, #20]	; (800095c <vApplicationGetIdleTaskMemory+0x2c>)
 8000946:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	200001b0 	.word	0x200001b0
 800095c:	20000204 	.word	0x20000204

08000960 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b09c      	sub	sp, #112	; 0x70
 8000964:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000966:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <MX_FREERTOS_Init+0xa4>)
 8000968:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800096c:	461d      	mov	r5, r3
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000972:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000976:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800097a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f006 fdb6 	bl	80074f2 <osThreadCreate>
 8000986:	4603      	mov	r3, r0
 8000988:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <MX_FREERTOS_Init+0xa8>)
 800098a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_init, osPriorityAboveNormal, 0, 256);
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_FREERTOS_Init+0xac>)
 800098e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000992:	461d      	mov	r5, r3
 8000994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000998:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800099c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80009a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f006 fda3 	bl	80074f2 <osThreadCreate>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <MX_FREERTOS_Init+0xb0>)
 80009b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, Task3_init, osPriorityBelowNormal, 0, 256);
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_FREERTOS_Init+0xb4>)
 80009b4:	f107 041c 	add.w	r4, r7, #28
 80009b8:	461d      	mov	r5, r3
 80009ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f006 fd90 	bl	80074f2 <osThreadCreate>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <MX_FREERTOS_Init+0xb8>)
 80009d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskLED */
  osThreadDef(TaskLED, TaskLED_init, osPriorityLow, 0, 128);
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_FREERTOS_Init+0xbc>)
 80009da:	463c      	mov	r4, r7
 80009dc:	461d      	mov	r5, r3
 80009de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskLEDHandle = osThreadCreate(osThread(TaskLED), NULL);
 80009ea:	463b      	mov	r3, r7
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 fd7f 	bl	80074f2 <osThreadCreate>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <MX_FREERTOS_Init+0xc0>)
 80009f8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80009fa:	bf00      	nop
 80009fc:	3770      	adds	r7, #112	; 0x70
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bdb0      	pop	{r4, r5, r7, pc}
 8000a02:	bf00      	nop
 8000a04:	08009a60 	.word	0x08009a60
 8000a08:	200025b0 	.word	0x200025b0
 8000a0c:	08009a7c 	.word	0x08009a7c
 8000a10:	200025b8 	.word	0x200025b8
 8000a14:	08009a98 	.word	0x08009a98
 8000a18:	200025b4 	.word	0x200025b4
 8000a1c:	08009ab4 	.word	0x08009ab4
 8000a20:	200025bc 	.word	0x200025bc

08000a24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a2c:	f008 faf8 	bl	8009020 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  send_deftask();
 8000a30:	f7ff ff26 	bl	8000880 <send_deftask>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000a34:	2101      	movs	r1, #1
 8000a36:	4804      	ldr	r0, [pc, #16]	; (8000a48 <StartDefaultTask+0x24>)
 8000a38:	f000 fd24 	bl	8001484 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a40:	f006 fda3 	bl	800758a <osDelay>
	  send_deftask();
 8000a44:	e7f4      	b.n	8000a30 <StartDefaultTask+0xc>
 8000a46:	bf00      	nop
 8000a48:	40010800 	.word	0x40010800

08000a4c <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
  for(;;)
  {
	  send_task2();
 8000a54:	f7ff ff48 	bl	80008e8 <send_task2>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4804      	ldr	r0, [pc, #16]	; (8000a6c <Task2_init+0x20>)
 8000a5c:	f000 fd12 	bl	8001484 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a64:	f006 fd91 	bl	800758a <osDelay>
	  send_task2();
 8000a68:	e7f4      	b.n	8000a54 <Task2_init+0x8>
 8000a6a:	bf00      	nop
 8000a6c:	40010800 	.word	0x40010800

08000a70 <Task3_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_init */
void Task3_init(void const * argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_init */
  /* Infinite loop */
  for(;;)
  {
	  send_task3();
 8000a78:	f7ff ff48 	bl	800090c <send_task3>
	  osDelay(1000);
 8000a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a80:	f006 fd83 	bl	800758a <osDelay>
	  send_task3();
 8000a84:	e7f8      	b.n	8000a78 <Task3_init+0x8>
	...

08000a88 <TaskLED_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskLED_init */
void TaskLED_init(void const * argument)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskLED_init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <TaskLED_init+0x1c>)
 8000a96:	f000 fcf5 	bl	8001484 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000a9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a9e:	f006 fd74 	bl	800758a <osDelay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000aa2:	e7f5      	b.n	8000a90 <TaskLED_init+0x8>
 8000aa4:	40011000 	.word	0x40011000

08000aa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_GPIO_Init+0xb4>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <MX_GPIO_Init+0xb8>)
 8000b0c:	f000 fca2 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2103      	movs	r1, #3
 8000b14:	4813      	ldr	r0, [pc, #76]	; (8000b64 <MX_GPIO_Init+0xbc>)
 8000b16:	f000 fc9d 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	480b      	ldr	r0, [pc, #44]	; (8000b60 <MX_GPIO_Init+0xb8>)
 8000b34:	f000 fb0a 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_GPIO_Init+0xbc>)
 8000b50:	f000 fafc 	bl	800114c <HAL_GPIO_Init>

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40011000 	.word	0x40011000
 8000b64:	40010800 	.word	0x40010800

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6c:	f000 f9dc 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b70:	f000 f809 	bl	8000b86 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f7ff ff98 	bl	8000aa8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b78:	f000 f93a 	bl	8000df0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000b7c:	f7ff fef0 	bl	8000960 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b80:	f006 fcb0 	bl	80074e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <main+0x1c>

08000b86 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b094      	sub	sp, #80	; 0x50
 8000b8a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b90:	2228      	movs	r2, #40	; 0x28
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 ff03 	bl	80099a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bd2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fffb 	bl	8002bd8 <HAL_RCC_OscConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000be8:	f000 f83c 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
 8000bee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	2102      	movs	r1, #2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 fa65 	bl	80030d8 <HAL_RCC_ClockConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c14:	f000 f826 	bl	8000c64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c18:	2310      	movs	r3, #16
 8000c1a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 fc48 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c2e:	f000 f819 	bl	8000c64 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000c32:	f002 fb3b 	bl	80032ac <HAL_RCC_EnableCSS>
}
 8000c36:	bf00      	nop
 8000c38:	3750      	adds	r7, #80	; 0x50
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d101      	bne.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c52:	f000 f97f 	bl	8000f54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40012c00 	.word	0x40012c00

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_MspInit+0x68>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_MspInit+0x68>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6193      	str	r3, [r2, #24]
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_MspInit+0x68>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_MspInit+0x68>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <HAL_MspInit+0x68>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	61d3      	str	r3, [r2, #28]
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_MspInit+0x68>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	210f      	movs	r1, #15
 8000caa:	f06f 0001 	mvn.w	r0, #1
 8000cae:	f000 fa22 	bl	80010f6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_MspInit+0x6c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_MspInit+0x6c>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2019      	movs	r0, #25
 8000cf6:	f000 f9fe 	bl	80010f6 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cfa:	2019      	movs	r0, #25
 8000cfc:	f000 fa17 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <HAL_InitTick+0x9c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_InitTick+0x9c>)
 8000d06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <HAL_InitTick+0x9c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d18:	f107 0210 	add.w	r2, r7, #16
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 fb60 	bl	80033e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d28:	f002 fb4a 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 8000d2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <HAL_InitTick+0xa0>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	0c9b      	lsrs	r3, r3, #18
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <HAL_InitTick+0xa8>)
 8000d40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d5e:	f002 fc61 	bl	8003624 <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d104      	bne.n	8000d72 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <HAL_InitTick+0xa4>)
 8000d6a:	f002 fcb3 	bl	80036d4 <HAL_TIM_Base_Start_IT>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3730      	adds	r7, #48	; 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	431bde83 	.word	0x431bde83
 8000d84:	200025c0 	.word	0x200025c0
 8000d88:	40012c00 	.word	0x40012c00

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000d90:	f002 fb5a 	bl	8003448 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x8>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
	...

08000dbc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000dc2:	f000 fca9 	bl	8001718 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000301c 	.word	0x2000301c

08000dd0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <TIM1_UP_IRQHandler+0x10>)
 8000dd6:	f002 fccf 	bl	8003778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200025c0 	.word	0x200025c0

08000de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <MX_USART1_UART_Init+0x50>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e28:	f002 fe46 	bl	8003ab8 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e32:	f7ff ff17 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20002608 	.word	0x20002608
 8000e40:	40013800 	.word	0x40013800

08000e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ed0 <HAL_UART_MspInit+0x8c>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d131      	bne.n	8000ec8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_UART_MspInit+0x90>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <HAL_UART_MspInit+0x90>)
 8000e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_UART_MspInit+0x90>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_UART_MspInit+0x90>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <HAL_UART_MspInit+0x90>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_UART_MspInit+0x90>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <HAL_UART_MspInit+0x94>)
 8000eaa:	f000 f94f 	bl	800114c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_UART_MspInit+0x94>)
 8000ec4:	f000 f942 	bl	800114c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010800 	.word	0x40010800

08000edc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000edc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ede:	e003      	b.n	8000ee8 <LoopCopyDataInit>

08000ee0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ee2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ee4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ee6:	3104      	adds	r1, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000eec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ef0:	d3f6      	bcc.n	8000ee0 <CopyDataInit>
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ef4:	e002      	b.n	8000efc <LoopFillZerobss>

08000ef6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ef8:	f842 3b04 	str.w	r3, [r2], #4

08000efc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000efe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f00:	d3f9      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f02:	f7ff ff6f 	bl	8000de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f008 fd27 	bl	8009958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0a:	f7ff fe2d 	bl	8000b68 <main>
  bx lr
 8000f0e:	4770      	bx	lr
  ldr r3, =_sidata
 8000f10:	08009b50 	.word	0x08009b50
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f18:	20000194 	.word	0x20000194
  ldr r2, =_sbss
 8000f1c:	20000194 	.word	0x20000194
  ldr r3, = _ebss
 8000f20:	20003308 	.word	0x20003308

08000f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC1_2_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_Init+0x28>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_Init+0x28>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f8d1 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff fece 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fe94 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40022000 	.word	0x40022000

08000f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x1c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x20>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <HAL_IncTick+0x20>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20002648 	.word	0x20002648

08000f78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <HAL_GetTick+0x10>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20002648 	.word	0x20002648

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4906      	ldr	r1, [pc, #24]	; (8001024 <__NVIC_EnableIRQ+0x34>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff4f 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff64 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ffb2 	bl	800107c <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff81 	bl	8001028 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff57 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b08b      	sub	sp, #44	; 0x2c
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e169      	b.n	8001434 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001160:	2201      	movs	r2, #1
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 8158 	bne.w	800142e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4a9a      	ldr	r2, [pc, #616]	; (80013ec <HAL_GPIO_Init+0x2a0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d05e      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 8001188:	4a98      	ldr	r2, [pc, #608]	; (80013ec <HAL_GPIO_Init+0x2a0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d875      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 800118e:	4a98      	ldr	r2, [pc, #608]	; (80013f0 <HAL_GPIO_Init+0x2a4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d058      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 8001194:	4a96      	ldr	r2, [pc, #600]	; (80013f0 <HAL_GPIO_Init+0x2a4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d86f      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 800119a:	4a96      	ldr	r2, [pc, #600]	; (80013f4 <HAL_GPIO_Init+0x2a8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d052      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011a0:	4a94      	ldr	r2, [pc, #592]	; (80013f4 <HAL_GPIO_Init+0x2a8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d869      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011a6:	4a94      	ldr	r2, [pc, #592]	; (80013f8 <HAL_GPIO_Init+0x2ac>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d04c      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011ac:	4a92      	ldr	r2, [pc, #584]	; (80013f8 <HAL_GPIO_Init+0x2ac>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d863      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011b2:	4a92      	ldr	r2, [pc, #584]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d046      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011b8:	4a90      	ldr	r2, [pc, #576]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d85d      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011be:	2b12      	cmp	r3, #18
 80011c0:	d82a      	bhi.n	8001218 <HAL_GPIO_Init+0xcc>
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d859      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011c6:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <HAL_GPIO_Init+0x80>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	08001247 	.word	0x08001247
 80011d0:	08001221 	.word	0x08001221
 80011d4:	08001233 	.word	0x08001233
 80011d8:	08001275 	.word	0x08001275
 80011dc:	0800127b 	.word	0x0800127b
 80011e0:	0800127b 	.word	0x0800127b
 80011e4:	0800127b 	.word	0x0800127b
 80011e8:	0800127b 	.word	0x0800127b
 80011ec:	0800127b 	.word	0x0800127b
 80011f0:	0800127b 	.word	0x0800127b
 80011f4:	0800127b 	.word	0x0800127b
 80011f8:	0800127b 	.word	0x0800127b
 80011fc:	0800127b 	.word	0x0800127b
 8001200:	0800127b 	.word	0x0800127b
 8001204:	0800127b 	.word	0x0800127b
 8001208:	0800127b 	.word	0x0800127b
 800120c:	0800127b 	.word	0x0800127b
 8001210:	08001229 	.word	0x08001229
 8001214:	0800123d 	.word	0x0800123d
 8001218:	4a79      	ldr	r2, [pc, #484]	; (8001400 <HAL_GPIO_Init+0x2b4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121e:	e02c      	b.n	800127a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	623b      	str	r3, [r7, #32]
          break;
 8001226:	e029      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	3304      	adds	r3, #4
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e024      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	3308      	adds	r3, #8
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e01f      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	330c      	adds	r3, #12
 8001242:	623b      	str	r3, [r7, #32]
          break;
 8001244:	e01a      	b.n	800127c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800124e:	2304      	movs	r3, #4
 8001250:	623b      	str	r3, [r7, #32]
          break;
 8001252:	e013      	b.n	800127c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d105      	bne.n	8001268 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800125c:	2308      	movs	r3, #8
 800125e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	611a      	str	r2, [r3, #16]
          break;
 8001266:	e009      	b.n	800127c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001268:	2308      	movs	r3, #8
 800126a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	615a      	str	r2, [r3, #20]
          break;
 8001272:	e003      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
          break;
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x130>
          break;
 800127a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2bff      	cmp	r3, #255	; 0xff
 8001280:	d801      	bhi.n	8001286 <HAL_GPIO_Init+0x13a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	e001      	b.n	800128a <HAL_GPIO_Init+0x13e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3304      	adds	r3, #4
 800128a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2bff      	cmp	r3, #255	; 0xff
 8001290:	d802      	bhi.n	8001298 <HAL_GPIO_Init+0x14c>
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	e002      	b.n	800129e <HAL_GPIO_Init+0x152>
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	3b08      	subs	r3, #8
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	210f      	movs	r1, #15
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	6a39      	ldr	r1, [r7, #32]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	431a      	orrs	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 80b1 	beq.w	800142e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012cc:	4b4d      	ldr	r3, [pc, #308]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a4c      	ldr	r2, [pc, #304]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <HAL_GPIO_Init+0x2b8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012e4:	4a48      	ldr	r2, [pc, #288]	; (8001408 <HAL_GPIO_Init+0x2bc>)
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a40      	ldr	r2, [pc, #256]	; (800140c <HAL_GPIO_Init+0x2c0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d013      	beq.n	8001338 <HAL_GPIO_Init+0x1ec>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a3f      	ldr	r2, [pc, #252]	; (8001410 <HAL_GPIO_Init+0x2c4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d00d      	beq.n	8001334 <HAL_GPIO_Init+0x1e8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a3e      	ldr	r2, [pc, #248]	; (8001414 <HAL_GPIO_Init+0x2c8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d007      	beq.n	8001330 <HAL_GPIO_Init+0x1e4>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a3d      	ldr	r2, [pc, #244]	; (8001418 <HAL_GPIO_Init+0x2cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d101      	bne.n	800132c <HAL_GPIO_Init+0x1e0>
 8001328:	2303      	movs	r3, #3
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 800132c:	2304      	movs	r3, #4
 800132e:	e004      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 8001330:	2302      	movs	r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 8001338:	2300      	movs	r3, #0
 800133a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133c:	f002 0203 	and.w	r2, r2, #3
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	4093      	lsls	r3, r2
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800134a:	492f      	ldr	r1, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x2bc>)
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <HAL_GPIO_Init+0x2d0>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	492c      	ldr	r1, [pc, #176]	; (800141c <HAL_GPIO_Init+0x2d0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <HAL_GPIO_Init+0x2d0>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	4928      	ldr	r1, [pc, #160]	; (800141c <HAL_GPIO_Init+0x2d0>)
 800137c:	4013      	ands	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <HAL_GPIO_Init+0x2d0>)
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4922      	ldr	r1, [pc, #136]	; (800141c <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_GPIO_Init+0x2d0>)
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	491e      	ldr	r1, [pc, #120]	; (800141c <HAL_GPIO_Init+0x2d0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_GPIO_Init+0x2d0>)
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	4918      	ldr	r1, [pc, #96]	; (800141c <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	608b      	str	r3, [r1, #8]
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_GPIO_Init+0x2d0>)
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4914      	ldr	r1, [pc, #80]	; (800141c <HAL_GPIO_Init+0x2d0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d021      	beq.n	8001420 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_GPIO_Init+0x2d0>)
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	490e      	ldr	r1, [pc, #56]	; (800141c <HAL_GPIO_Init+0x2d0>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	60cb      	str	r3, [r1, #12]
 80013e8:	e021      	b.n	800142e <HAL_GPIO_Init+0x2e2>
 80013ea:	bf00      	nop
 80013ec:	10320000 	.word	0x10320000
 80013f0:	10310000 	.word	0x10310000
 80013f4:	10220000 	.word	0x10220000
 80013f8:	10210000 	.word	0x10210000
 80013fc:	10120000 	.word	0x10120000
 8001400:	10110000 	.word	0x10110000
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	40010800 	.word	0x40010800
 8001410:	40010c00 	.word	0x40010c00
 8001414:	40011000 	.word	0x40011000
 8001418:	40011400 	.word	0x40011400
 800141c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_GPIO_Init+0x304>)
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	43db      	mvns	r3, r3
 8001428:	4909      	ldr	r1, [pc, #36]	; (8001450 <HAL_GPIO_Init+0x304>)
 800142a:	4013      	ands	r3, r2
 800142c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	3301      	adds	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	f47f ae8e 	bne.w	8001160 <HAL_GPIO_Init+0x14>
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	372c      	adds	r7, #44	; 0x2c
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001470:	e003      	b.n	800147a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	611a      	str	r2, [r3, #16]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43d9      	mvns	r1, r3
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	400b      	ands	r3, r1
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	611a      	str	r2, [r3, #16]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b8:	b08b      	sub	sp, #44	; 0x2c
 80014ba:	af06      	add	r7, sp, #24
 80014bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0fd      	b.n	80016c4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d106      	bne.n	80014e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f007 ff91 	bl	8009404 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2203      	movs	r2, #3
 80014e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fbe4 	bl	8003cbc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	687e      	ldr	r6, [r7, #4]
 80014fc:	466d      	mov	r5, sp
 80014fe:	f106 0410 	add.w	r4, r6, #16
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	602b      	str	r3, [r5, #0]
 800150a:	1d33      	adds	r3, r6, #4
 800150c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f002 fbae 	bl	8003c70 <USB_CoreInit>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0ce      	b.n	80016c4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f002 fbdf 	bl	8003cf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e04c      	b.n	80015d2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	3301      	adds	r3, #1
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	440b      	add	r3, r1
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	b298      	uxth	r0, r3
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	3336      	adds	r3, #54	; 0x36
 8001576:	4602      	mov	r2, r0
 8001578:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	440b      	add	r3, r1
 800158a:	3303      	adds	r3, #3
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	3338      	adds	r3, #56	; 0x38
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	333c      	adds	r3, #60	; 0x3c
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	3340      	adds	r3, #64	; 0x40
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	3301      	adds	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d3ad      	bcc.n	8001538 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e044      	b.n	800166c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	440b      	add	r3, r1
 800161c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	3301      	adds	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3b5      	bcc.n	80015e2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	687e      	ldr	r6, [r7, #4]
 800167e:	466d      	mov	r5, sp
 8001680:	f106 0410 	add.w	r4, r6, #16
 8001684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	602b      	str	r3, [r5, #0]
 800168c:	1d33      	adds	r3, r6, #4
 800168e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001690:	6838      	ldr	r0, [r7, #0]
 8001692:	f002 fb39 	bl	8003d08 <USB_DevInit>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2202      	movs	r2, #2
 80016a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e00d      	b.n	80016c4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fad3 	bl	8005c68 <USB_DevDisconnect>

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_PCD_Start+0x16>
 80016de:	2302      	movs	r3, #2
 80016e0:	e016      	b.n	8001710 <HAL_PCD_Start+0x44>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 face 	bl	8003c90 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016f4:	2101      	movs	r1, #1
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f008 f8f7 	bl	80098ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f004 faa7 	bl	8005c54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f004 faa9 	bl	8005c7c <USB_ReadInterrupts>
 800172a:	4603      	mov	r3, r0
 800172c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001734:	d102      	bne.n	800173c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fb61 	bl	8001dfe <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f004 fa9b 	bl	8005c7c <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001750:	d112      	bne.n	8001778 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001764:	b292      	uxth	r2, r2
 8001766:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f007 fec5 	bl	80094fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001770:	2100      	movs	r1, #0
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f925 	bl	80019c2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fa7d 	bl	8005c7c <USB_ReadInterrupts>
 8001782:	4603      	mov	r3, r0
 8001784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800178c:	d10b      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017a0:	b292      	uxth	r2, r2
 80017a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fa66 	bl	8005c7c <USB_ReadInterrupts>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ba:	d10b      	bne.n	80017d4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017ce:	b292      	uxth	r2, r2
 80017d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f004 fa4f 	bl	8005c7c <USB_ReadInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017e8:	d126      	bne.n	8001838 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0204 	bic.w	r2, r2, #4
 80017fc:	b292      	uxth	r2, r2
 80017fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0208 	bic.w	r2, r2, #8
 8001814:	b292      	uxth	r2, r2
 8001816:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f007 fea6 	bl	800956c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001828:	b29a      	uxth	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001832:	b292      	uxth	r2, r2
 8001834:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f004 fa1d 	bl	8005c7c <USB_ReadInterrupts>
 8001842:	4603      	mov	r3, r0
 8001844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800184c:	f040 8084 	bne.w	8001958 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001850:	2300      	movs	r3, #0
 8001852:	77fb      	strb	r3, [r7, #31]
 8001854:	e011      	b.n	800187a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	7ffb      	ldrb	r3, [r7, #31]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	441a      	add	r2, r3
 8001862:	7ffb      	ldrb	r3, [r7, #31]
 8001864:	8812      	ldrh	r2, [r2, #0]
 8001866:	b292      	uxth	r2, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	f107 0120 	add.w	r1, r7, #32
 800186e:	440b      	add	r3, r1
 8001870:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001874:	7ffb      	ldrb	r3, [r7, #31]
 8001876:	3301      	adds	r3, #1
 8001878:	77fb      	strb	r3, [r7, #31]
 800187a:	7ffb      	ldrb	r3, [r7, #31]
 800187c:	2b07      	cmp	r3, #7
 800187e:	d9ea      	bls.n	8001856 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	b292      	uxth	r2, r2
 8001894:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	b292      	uxth	r2, r2
 80018ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80018b0:	bf00      	nop
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f6      	beq.n	80018b2 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d6:	b292      	uxth	r2, r2
 80018d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	77fb      	strb	r3, [r7, #31]
 80018e0:	e010      	b.n	8001904 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80018e2:	7ffb      	ldrb	r3, [r7, #31]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	4611      	mov	r1, r2
 80018ea:	7ffa      	ldrb	r2, [r7, #31]
 80018ec:	0092      	lsls	r2, r2, #2
 80018ee:	440a      	add	r2, r1
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	f107 0120 	add.w	r1, r7, #32
 80018f6:	440b      	add	r3, r1
 80018f8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80018fc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80018fe:	7ffb      	ldrb	r3, [r7, #31]
 8001900:	3301      	adds	r3, #1
 8001902:	77fb      	strb	r3, [r7, #31]
 8001904:	7ffb      	ldrb	r3, [r7, #31]
 8001906:	2b07      	cmp	r3, #7
 8001908:	d9eb      	bls.n	80018e2 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001912:	b29a      	uxth	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0208 	orr.w	r2, r2, #8
 800191c:	b292      	uxth	r2, r2
 800191e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001934:	b292      	uxth	r2, r2
 8001936:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0204 	orr.w	r2, r2, #4
 800194c:	b292      	uxth	r2, r2
 800194e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f007 fdf0 	bl	8009538 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f004 f98d 	bl	8005c7c <USB_ReadInterrupts>
 8001962:	4603      	mov	r3, r0
 8001964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800196c:	d10e      	bne.n	800198c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001980:	b292      	uxth	r2, r2
 8001982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f007 fda9 	bl	80094de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f004 f973 	bl	8005c7c <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a0:	d10b      	bne.n	80019ba <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019b4:	b292      	uxth	r2, r2
 80019b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80019ba:	bf00      	nop
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_PCD_SetAddress+0x1a>
 80019d8:	2302      	movs	r3, #2
 80019da:	e013      	b.n	8001a04 <HAL_PCD_SetAddress+0x42>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 f91a 	bl	8005c2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	70fb      	strb	r3, [r7, #3]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	803b      	strh	r3, [r7, #0]
 8001a22:	4613      	mov	r3, r2
 8001a24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	da0e      	bge.n	8001a50 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	705a      	strb	r2, [r3, #1]
 8001a4e:	e00e      	b.n	8001a6e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	f003 0207 	and.w	r2, r3, #7
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a7a:	883a      	ldrh	r2, [r7, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	78ba      	ldrb	r2, [r7, #2]
 8001a84:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	785b      	ldrb	r3, [r3, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d004      	beq.n	8001a98 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a98:	78bb      	ldrb	r3, [r7, #2]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d102      	bne.n	8001aa4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_PCD_EP_Open+0xa6>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e00e      	b.n	8001ad0 <HAL_PCD_EP_Open+0xc4>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68f9      	ldr	r1, [r7, #12]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 f941 	bl	8003d48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ace:	7afb      	ldrb	r3, [r7, #11]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da0e      	bge.n	8001b0a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	705a      	strb	r2, [r3, #1]
 8001b08:	e00e      	b.n	8001b28 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f003 0207 	and.w	r2, r3, #7
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_PCD_EP_Close+0x6a>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e00e      	b.n	8001b60 <HAL_PCD_EP_Close+0x88>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68f9      	ldr	r1, [r7, #12]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fc63 	bl	800441c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	460b      	mov	r3, r1
 8001b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b78:	7afb      	ldrb	r3, [r7, #11]
 8001b7a:	f003 0207 	and.w	r2, r3, #7
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba8:	7afb      	ldrb	r3, [r7, #11]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bb4:	7afb      	ldrb	r3, [r7, #11]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6979      	ldr	r1, [r7, #20]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fe15 	bl	80047f4 <USB_EPStartXfer>
 8001bca:	e005      	b.n	8001bd8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6979      	ldr	r1, [r7, #20]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fe0e 	bl	80047f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 0207 	and.w	r2, r3, #7
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c04:	681b      	ldr	r3, [r3, #0]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c20:	7afb      	ldrb	r3, [r7, #11]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5c:	7afb      	ldrb	r3, [r7, #11]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c68:	7afb      	ldrb	r3, [r7, #11]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6979      	ldr	r1, [r7, #20]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 fdbb 	bl	80047f4 <USB_EPStartXfer>
 8001c7e:	e005      	b.n	8001c8c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6979      	ldr	r1, [r7, #20]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 fdb4 	bl	80047f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	f003 0207 	and.w	r2, r3, #7
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d901      	bls.n	8001cb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e04c      	b.n	8001d4e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da0e      	bge.n	8001cda <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	705a      	strb	r2, [r3, #1]
 8001cd8:	e00c      	b.n	8001cf4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_PCD_EP_SetStall+0x7e>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e01c      	b.n	8001d4e <HAL_PCD_EP_SetStall+0xb8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 fe86 	bl	8005a34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d108      	bne.n	8001d44 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f003 ffab 	bl	8005c9a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	f003 020f 	and.w	r2, r3, #15
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d901      	bls.n	8001d74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e040      	b.n	8001df6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da0e      	bge.n	8001d9a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	705a      	strb	r2, [r3, #1]
 8001d98:	e00e      	b.n	8001db8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 0207 	and.w	r2, r3, #7
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_PCD_EP_ClrStall+0x82>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e00e      	b.n	8001df6 <HAL_PCD_EP_ClrStall+0xa0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fe74 	bl	8005ad4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b08e      	sub	sp, #56	; 0x38
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e06:	e2df      	b.n	80023c8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e10:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001e1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8158 	bne.w	80020d8 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d152      	bne.n	8001ed8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e42:	81fb      	strh	r3, [r7, #14]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	89fb      	ldrh	r3, [r7, #14]
 8001e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3328      	adds	r3, #40	; 0x28
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3302      	adds	r3, #2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	441a      	add	r2, r3
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e96:	2100      	movs	r1, #0
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f007 fb06 	bl	80094aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 828e 	beq.w	80023c8 <PCD_EP_ISR_Handler+0x5ca>
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 8289 	bne.w	80023c8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ed6:	e277      	b.n	80023c8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ee8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d034      	beq.n	8001f5c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	3306      	adds	r3, #6
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	f003 ff02 	bl	8005d3a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f42:	4013      	ands	r3, r2
 8001f44:	823b      	strh	r3, [r7, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	8a3a      	ldrh	r2, [r7, #16]
 8001f4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f50:	b292      	uxth	r2, r2
 8001f52:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f007 fa7b 	bl	8009450 <HAL_PCD_SetupStageCallback>
 8001f5a:	e235      	b.n	80023c8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f5c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f280 8231 	bge.w	80023c8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f72:	4013      	ands	r3, r2
 8001f74:	83bb      	strh	r3, [r7, #28]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	8bba      	ldrh	r2, [r7, #28]
 8001f7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f80:	b292      	uxth	r2, r2
 8001f82:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	3306      	adds	r3, #6
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d019      	beq.n	8001fec <PCD_EP_ISR_Handler+0x1ee>
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d015      	beq.n	8001fec <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	6959      	ldr	r1, [r3, #20]
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f003 feb2 	bl	8005d3a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	441a      	add	r2, r3
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f007 fa44 	bl	8009474 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4413      	add	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d112      	bne.n	800203a <PCD_EP_ISR_Handler+0x23c>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b29b      	uxth	r3, r3
 800201a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800201e:	b29a      	uxth	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	801a      	strh	r2, [r3, #0]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800202e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002032:	b29a      	uxth	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	801a      	strh	r2, [r3, #0]
 8002038:	e02f      	b.n	800209a <PCD_EP_ISR_Handler+0x29c>
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b3e      	cmp	r3, #62	; 0x3e
 8002040:	d813      	bhi.n	800206a <PCD_EP_ISR_Handler+0x26c>
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <PCD_EP_ISR_Handler+0x25e>
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	3301      	adds	r3, #1
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	b29b      	uxth	r3, r3
 8002060:	029b      	lsls	r3, r3, #10
 8002062:	b29a      	uxth	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	801a      	strh	r2, [r3, #0]
 8002068:	e017      	b.n	800209a <PCD_EP_ISR_Handler+0x29c>
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <PCD_EP_ISR_Handler+0x286>
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	3b01      	subs	r3, #1
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
 8002084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002086:	b29b      	uxth	r3, r3
 8002088:	029b      	lsls	r3, r3, #10
 800208a:	b29b      	uxth	r3, r3
 800208c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002094:	b29a      	uxth	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020aa:	827b      	strh	r3, [r7, #18]
 80020ac:	8a7b      	ldrh	r3, [r7, #18]
 80020ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020b2:	827b      	strh	r3, [r7, #18]
 80020b4:	8a7b      	ldrh	r3, [r7, #18]
 80020b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020ba:	827b      	strh	r3, [r7, #18]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	8a7b      	ldrh	r3, [r7, #18]
 80020c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	8013      	strh	r3, [r2, #0]
 80020d6:	e177      	b.n	80023c8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f280 80ea 	bge.w	80022c8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	b29a      	uxth	r2, r3
 8002106:	f640 738f 	movw	r3, #3983	; 0xf8f
 800210a:	4013      	ands	r3, r2
 800210c:	853b      	strh	r3, [r7, #40]	; 0x28
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800211e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002122:	b292      	uxth	r2, r2
 8002124:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002126:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	7b1b      	ldrb	r3, [r3, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d122      	bne.n	800218a <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214c:	b29b      	uxth	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	3306      	adds	r3, #6
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	4413      	add	r3, r2
 8002162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800216c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800216e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8087 	beq.w	8002284 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	6959      	ldr	r1, [r3, #20]
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	88da      	ldrh	r2, [r3, #6]
 8002182:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002184:	f003 fdd9 	bl	8005d3a <USB_ReadPMA>
 8002188:	e07c      	b.n	8002284 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	78db      	ldrb	r3, [r3, #3]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d108      	bne.n	80021a4 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002192:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002194:	461a      	mov	r2, r3
 8002196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f923 	bl	80023e4 <HAL_PCD_EP_DB_Receive>
 800219e:	4603      	mov	r3, r0
 80021a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80021a2:	e06f      	b.n	8002284 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	847b      	strh	r3, [r7, #34]	; 0x22
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	441a      	add	r2, r3
 80021ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d021      	beq.n	8002242 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002206:	b29b      	uxth	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	3302      	adds	r3, #2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002226:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002228:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800222a:	2b00      	cmp	r3, #0
 800222c:	d02a      	beq.n	8002284 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	6959      	ldr	r1, [r3, #20]
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	891a      	ldrh	r2, [r3, #8]
 800223a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800223c:	f003 fd7d 	bl	8005d3a <USB_ReadPMA>
 8002240:	e020      	b.n	8002284 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224a:	b29b      	uxth	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	3306      	adds	r3, #6
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800226c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	6959      	ldr	r1, [r3, #20]
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	895a      	ldrh	r2, [r3, #10]
 800227e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002280:	f003 fd5b 	bl	8005d3a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800228a:	441a      	add	r2, r3
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002296:	441a      	add	r2, r3
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <PCD_EP_ISR_Handler+0x4b0>
 80022a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d206      	bcs.n	80022bc <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f007 f8dd 	bl	8009474 <HAL_PCD_DataOutStageCallback>
 80022ba:	e005      	b.n	80022c8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 fa96 	bl	80047f4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80022c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d07a      	beq.n	80023c8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80022d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002300:	843b      	strh	r3, [r7, #32]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	441a      	add	r2, r3
 8002310:	8c3b      	ldrh	r3, [r7, #32]
 8002312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800231a:	b29b      	uxth	r3, r3
 800231c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	78db      	ldrb	r3, [r3, #3]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d108      	bne.n	8002338 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800232a:	2b02      	cmp	r3, #2
 800232c:	d146      	bne.n	80023bc <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800232e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d141      	bne.n	80023bc <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002340:	b29b      	uxth	r3, r3
 8002342:	461a      	mov	r2, r3
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	3302      	adds	r3, #2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002360:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	8bfb      	ldrh	r3, [r7, #30]
 8002368:	429a      	cmp	r2, r3
 800236a:	d906      	bls.n	800237a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	8bfb      	ldrh	r3, [r7, #30]
 8002372:	1ad2      	subs	r2, r2, r3
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	619a      	str	r2, [r3, #24]
 8002378:	e002      	b.n	8002380 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f007 f88b 	bl	80094aa <HAL_PCD_DataInStageCallback>
 8002394:	e018      	b.n	80023c8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	8bfb      	ldrh	r3, [r7, #30]
 800239c:	441a      	add	r2, r3
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	8bfb      	ldrh	r3, [r7, #30]
 80023a8:	441a      	add	r2, r3
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 fa1d 	bl	80047f4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80023ba:	e005      	b.n	80023c8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80023bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023be:	461a      	mov	r2, r3
 80023c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f91b 	bl	80025fe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f6ff ad17 	blt.w	8001e08 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3738      	adds	r7, #56	; 0x38
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d07e      	beq.n	80024fa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002404:	b29b      	uxth	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	3302      	adds	r3, #2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	4413      	add	r3, r2
 800241a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002424:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	8b7b      	ldrh	r3, [r7, #26]
 800242c:	429a      	cmp	r2, r3
 800242e:	d306      	bcc.n	800243e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	8b7b      	ldrh	r3, [r7, #26]
 8002436:	1ad2      	subs	r2, r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	619a      	str	r2, [r3, #24]
 800243c:	e002      	b.n	8002444 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d123      	bne.n	8002494 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002466:	833b      	strh	r3, [r7, #24]
 8002468:	8b3b      	ldrh	r3, [r7, #24]
 800246a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800246e:	833b      	strh	r3, [r7, #24]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	441a      	add	r2, r3
 800247e:	8b3b      	ldrh	r3, [r7, #24]
 8002480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002490:	b29b      	uxth	r3, r3
 8002492:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d01f      	beq.n	80024de <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b8:	82fb      	strh	r3, [r7, #22]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	441a      	add	r2, r3
 80024c8:	8afb      	ldrh	r3, [r7, #22]
 80024ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024de:	8b7b      	ldrh	r3, [r7, #26]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8087 	beq.w	80025f4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	6959      	ldr	r1, [r3, #20]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	891a      	ldrh	r2, [r3, #8]
 80024f2:	8b7b      	ldrh	r3, [r7, #26]
 80024f4:	f003 fc21 	bl	8005d3a <USB_ReadPMA>
 80024f8:	e07c      	b.n	80025f4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	3306      	adds	r3, #6
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002522:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	8b7b      	ldrh	r3, [r7, #26]
 800252a:	429a      	cmp	r2, r3
 800252c:	d306      	bcc.n	800253c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	8b7b      	ldrh	r3, [r7, #26]
 8002534:	1ad2      	subs	r2, r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	619a      	str	r2, [r3, #24]
 800253a:	e002      	b.n	8002542 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d123      	bne.n	8002592 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002564:	83fb      	strh	r3, [r7, #30]
 8002566:	8bfb      	ldrh	r3, [r7, #30]
 8002568:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800256c:	83fb      	strh	r3, [r7, #30]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	441a      	add	r2, r3
 800257c:	8bfb      	ldrh	r3, [r7, #30]
 800257e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800258a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258e:	b29b      	uxth	r3, r3
 8002590:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11f      	bne.n	80025dc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b6:	83bb      	strh	r3, [r7, #28]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	441a      	add	r2, r3
 80025c6:	8bbb      	ldrh	r3, [r7, #28]
 80025c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025d8:	b29b      	uxth	r3, r3
 80025da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025dc:	8b7b      	ldrh	r3, [r7, #26]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	6959      	ldr	r1, [r3, #20]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	895a      	ldrh	r2, [r3, #10]
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	f003 fba3 	bl	8005d3a <USB_ReadPMA>
    }
  }

  return count;
 80025f4:	8b7b      	ldrh	r3, [r7, #26]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b094      	sub	sp, #80	; 0x50
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	4613      	mov	r3, r2
 800260a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8138 	beq.w	8002888 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002620:	b29b      	uxth	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	3302      	adds	r3, #2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002640:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800264c:	429a      	cmp	r2, r3
 800264e:	d907      	bls.n	8002660 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002658:	1ad2      	subs	r2, r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	619a      	str	r2, [r3, #24]
 800265e:	e002      	b.n	8002666 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d12c      	bne.n	80026c8 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f006 ff18 	bl	80094aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 823a 	beq.w	8002afa <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800269c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a0:	82fb      	strh	r3, [r7, #22]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	441a      	add	r2, r3
 80026b0:	8afb      	ldrh	r3, [r7, #22]
 80026b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	8013      	strh	r3, [r2, #0]
 80026c6:	e218      	b.n	8002afa <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01f      	beq.n	8002712 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	441a      	add	r2, r3
 80026fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800270a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270e:	b29b      	uxth	r3, r3
 8002710:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002718:	2b01      	cmp	r3, #1
 800271a:	f040 81ee 	bne.w	8002afa <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002726:	441a      	add	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002734:	441a      	add	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6a1a      	ldr	r2, [r3, #32]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	429a      	cmp	r2, r3
 8002744:	d309      	bcc.n	800275a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002752:	1ad2      	subs	r2, r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	621a      	str	r2, [r3, #32]
 8002758:	e015      	b.n	8002786 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d107      	bne.n	8002772 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002762:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002766:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002770:	e009      	b.n	8002786 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d155      	bne.n	800283a <HAL_PCD_EP_DB_Transmit+0x23c>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279c:	b29b      	uxth	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	4413      	add	r3, r2
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	011a      	lsls	r2, r3, #4
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	4413      	add	r3, r2
 80027b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d112      	bne.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027da:	b29a      	uxth	r2, r3
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	e047      	b.n	8002872 <HAL_PCD_EP_DB_Transmit+0x274>
 80027e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e4:	2b3e      	cmp	r3, #62	; 0x3e
 80027e6:	d811      	bhi.n	800280c <HAL_PCD_EP_DB_Transmit+0x20e>
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_PCD_EP_DB_Transmit+0x200>
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	3301      	adds	r3, #1
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	b29b      	uxth	r3, r3
 8002802:	029b      	lsls	r3, r3, #10
 8002804:	b29a      	uxth	r2, r3
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	e032      	b.n	8002872 <HAL_PCD_EP_DB_Transmit+0x274>
 800280c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <HAL_PCD_EP_DB_Transmit+0x224>
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	3b01      	subs	r3, #1
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	b29b      	uxth	r3, r3
 8002826:	029b      	lsls	r3, r3, #10
 8002828:	b29b      	uxth	r3, r3
 800282a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002832:	b29a      	uxth	r2, r3
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	801a      	strh	r2, [r3, #0]
 8002838:	e01b      	b.n	8002872 <HAL_PCD_EP_DB_Transmit+0x274>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d117      	bne.n	8002872 <HAL_PCD_EP_DB_Transmit+0x274>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002850:	b29b      	uxth	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	4413      	add	r3, r2
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	011a      	lsls	r2, r3, #4
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	4413      	add	r3, r2
 8002864:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286c:	b29a      	uxth	r2, r3
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6959      	ldr	r1, [r3, #20]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	891a      	ldrh	r2, [r3, #8]
 800287e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002880:	b29b      	uxth	r3, r3
 8002882:	f003 fa15 	bl	8005cb0 <USB_WritePMA>
 8002886:	e138      	b.n	8002afa <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002890:	b29b      	uxth	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	3306      	adds	r3, #6
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028bc:	429a      	cmp	r2, r3
 80028be:	d307      	bcc.n	80028d0 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028c8:	1ad2      	subs	r2, r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	619a      	str	r2, [r3, #24]
 80028ce:	e002      	b.n	80028d6 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d12e      	bne.n	800293c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	4619      	mov	r1, r3
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f006 fde0 	bl	80094aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f040 8102 	bne.w	8002afa <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002910:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	441a      	add	r2, r3
 8002922:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800292a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800292e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002936:	b29b      	uxth	r3, r3
 8002938:	8013      	strh	r3, [r2, #0]
 800293a:	e0de      	b.n	8002afa <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d11f      	bne.n	8002986 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002960:	867b      	strh	r3, [r7, #50]	; 0x32
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	441a      	add	r2, r3
 8002970:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800297a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800297e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002982:	b29b      	uxth	r3, r3
 8002984:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800298c:	2b01      	cmp	r3, #1
 800298e:	f040 80b4 	bne.w	8002afa <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800299a:	441a      	add	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80029a8:	441a      	add	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	6a1a      	ldr	r2, [r3, #32]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d309      	bcc.n	80029ce <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c6:	1ad2      	subs	r2, r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	621a      	str	r2, [r3, #32]
 80029cc:	e015      	b.n	80029fa <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d107      	bne.n	80029e6 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80029d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80029da:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029e4:	e009      	b.n	80029fa <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2200      	movs	r2, #0
 80029f0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d155      	bne.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	4413      	add	r3, r2
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	011a      	lsls	r2, r3, #4
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	4413      	add	r3, r2
 8002a2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d112      	bne.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x45e>
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a58:	801a      	strh	r2, [r3, #0]
 8002a5a:	e044      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002a60:	d811      	bhi.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x488>
 8002a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a64:	085b      	lsrs	r3, r3, #1
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a74:	3301      	adds	r3, #1
 8002a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	029b      	lsls	r3, r3, #10
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	e02f      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <HAL_PCD_EP_DB_Transmit+0x49e>
 8002a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	029b      	lsls	r3, r3, #10
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	e018      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d114      	bne.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aca:	4413      	add	r3, r2
 8002acc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	011a      	lsls	r2, r3, #4
 8002ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	6959      	ldr	r1, [r3, #20]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	895a      	ldrh	r2, [r3, #10]
 8002af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f003 f8db 	bl	8005cb0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b14:	82bb      	strh	r3, [r7, #20]
 8002b16:	8abb      	ldrh	r3, [r7, #20]
 8002b18:	f083 0310 	eor.w	r3, r3, #16
 8002b1c:	82bb      	strh	r3, [r7, #20]
 8002b1e:	8abb      	ldrh	r3, [r7, #20]
 8002b20:	f083 0320 	eor.w	r3, r3, #32
 8002b24:	82bb      	strh	r3, [r7, #20]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	441a      	add	r2, r3
 8002b34:	8abb      	ldrh	r3, [r7, #20]
 8002b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3750      	adds	r7, #80	; 0x50
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	817b      	strh	r3, [r7, #10]
 8002b62:	4613      	mov	r3, r2
 8002b64:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e009      	b.n	8002b9e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b8a:	897a      	ldrh	r2, [r7, #10]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b9e:	893b      	ldrh	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	80da      	strh	r2, [r3, #6]
 8002bb2:	e00b      	b.n	8002bcc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e26c      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8087 	beq.w	8002d06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf8:	4b92      	ldr	r3, [pc, #584]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d00c      	beq.n	8002c1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c04:	4b8f      	ldr	r3, [pc, #572]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d112      	bne.n	8002c36 <HAL_RCC_OscConfig+0x5e>
 8002c10:	4b8c      	ldr	r3, [pc, #560]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1c:	d10b      	bne.n	8002c36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1e:	4b89      	ldr	r3, [pc, #548]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d06c      	beq.n	8002d04 <HAL_RCC_OscConfig+0x12c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d168      	bne.n	8002d04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e246      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCC_OscConfig+0x76>
 8002c40:	4b80      	ldr	r3, [pc, #512]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a7f      	ldr	r2, [pc, #508]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	e02e      	b.n	8002cac <HAL_RCC_OscConfig+0xd4>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x98>
 8002c56:	4b7b      	ldr	r3, [pc, #492]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a7a      	ldr	r2, [pc, #488]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b78      	ldr	r3, [pc, #480]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a77      	ldr	r2, [pc, #476]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e01d      	b.n	8002cac <HAL_RCC_OscConfig+0xd4>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0xbc>
 8002c7a:	4b72      	ldr	r3, [pc, #456]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a71      	ldr	r2, [pc, #452]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b6f      	ldr	r3, [pc, #444]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a6e      	ldr	r2, [pc, #440]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e00b      	b.n	8002cac <HAL_RCC_OscConfig+0xd4>
 8002c94:	4b6b      	ldr	r3, [pc, #428]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a6a      	ldr	r2, [pc, #424]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a67      	ldr	r2, [pc, #412]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002caa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe f960 	bl	8000f78 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe f95c 	bl	8000f78 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1fa      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b5d      	ldr	r3, [pc, #372]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0xe4>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe f94c 	bl	8000f78 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe f948 	bl	8000f78 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e1e6      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x10c>
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d063      	beq.n	8002dda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d12:	4b4c      	ldr	r3, [pc, #304]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d1e:	4b49      	ldr	r3, [pc, #292]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d11c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x18c>
 8002d2a:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d116      	bne.n	8002d64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_RCC_OscConfig+0x176>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e1ba      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4939      	ldr	r1, [pc, #228]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d62:	e03a      	b.n	8002dda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d6c:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <HAL_RCC_OscConfig+0x270>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fe f901 	bl	8000f78 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7fe f8fd 	bl	8000f78 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e19b      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4927      	ldr	r1, [pc, #156]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]
 8002dac:	e015      	b.n	8002dda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_RCC_OscConfig+0x270>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe f8e0 	bl	8000f78 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbc:	f7fe f8dc 	bl	8000f78 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e17a      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d03a      	beq.n	8002e5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d019      	beq.n	8002e22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dee:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df4:	f7fe f8c0 	bl	8000f78 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7fe f8bc 	bl	8000f78 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e15a      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f000 fb28 	bl	8003470 <RCC_Delay>
 8002e20:	e01c      	b.n	8002e5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e28:	f7fe f8a6 	bl	8000f78 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2e:	e00f      	b.n	8002e50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e30:	f7fe f8a2 	bl	8000f78 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d908      	bls.n	8002e50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e140      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	42420000 	.word	0x42420000
 8002e4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	4b9e      	ldr	r3, [pc, #632]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e9      	bne.n	8002e30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80a6 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6e:	4b97      	ldr	r3, [pc, #604]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10d      	bne.n	8002e96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	4b94      	ldr	r3, [pc, #592]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	4a93      	ldr	r2, [pc, #588]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e84:	61d3      	str	r3, [r2, #28]
 8002e86:	4b91      	ldr	r3, [pc, #580]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b8e      	ldr	r3, [pc, #568]	; (80030d0 <HAL_RCC_OscConfig+0x4f8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d118      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea2:	4b8b      	ldr	r3, [pc, #556]	; (80030d0 <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a8a      	ldr	r2, [pc, #552]	; (80030d0 <HAL_RCC_OscConfig+0x4f8>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eae:	f7fe f863 	bl	8000f78 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb6:	f7fe f85f 	bl	8000f78 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b64      	cmp	r3, #100	; 0x64
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e0fd      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	4b81      	ldr	r3, [pc, #516]	; (80030d0 <HAL_RCC_OscConfig+0x4f8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x312>
 8002edc:	4b7b      	ldr	r3, [pc, #492]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a7a      	ldr	r2, [pc, #488]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6213      	str	r3, [r2, #32]
 8002ee8:	e02d      	b.n	8002f46 <HAL_RCC_OscConfig+0x36e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x334>
 8002ef2:	4b76      	ldr	r3, [pc, #472]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a75      	ldr	r2, [pc, #468]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6213      	str	r3, [r2, #32]
 8002efe:	4b73      	ldr	r3, [pc, #460]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a72      	ldr	r2, [pc, #456]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	e01c      	b.n	8002f46 <HAL_RCC_OscConfig+0x36e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d10c      	bne.n	8002f2e <HAL_RCC_OscConfig+0x356>
 8002f14:	4b6d      	ldr	r3, [pc, #436]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4a6c      	ldr	r2, [pc, #432]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f1a:	f043 0304 	orr.w	r3, r3, #4
 8002f1e:	6213      	str	r3, [r2, #32]
 8002f20:	4b6a      	ldr	r3, [pc, #424]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4a69      	ldr	r2, [pc, #420]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6213      	str	r3, [r2, #32]
 8002f2c:	e00b      	b.n	8002f46 <HAL_RCC_OscConfig+0x36e>
 8002f2e:	4b67      	ldr	r3, [pc, #412]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	4a66      	ldr	r2, [pc, #408]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	6213      	str	r3, [r2, #32]
 8002f3a:	4b64      	ldr	r3, [pc, #400]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a63      	ldr	r2, [pc, #396]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d015      	beq.n	8002f7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe f813 	bl	8000f78 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe f80f 	bl	8000f78 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e0ab      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6c:	4b57      	ldr	r3, [pc, #348]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ee      	beq.n	8002f56 <HAL_RCC_OscConfig+0x37e>
 8002f78:	e014      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7a:	f7fd fffd 	bl	8000f78 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fd fff9 	bl	8000f78 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e095      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f98:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ee      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d105      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002faa:	4b48      	ldr	r3, [pc, #288]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4a47      	ldr	r2, [pc, #284]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8081 	beq.w	80030c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc0:	4b42      	ldr	r3, [pc, #264]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d061      	beq.n	8003090 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d146      	bne.n	8003062 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd4:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <HAL_RCC_OscConfig+0x4fc>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7fd ffcd 	bl	8000f78 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fd ffc9 	bl	8000f78 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e067      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff4:	4b35      	ldr	r3, [pc, #212]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d108      	bne.n	800301c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800300a:	4b30      	ldr	r3, [pc, #192]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	492d      	ldr	r1, [pc, #180]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800301c:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a19      	ldr	r1, [r3, #32]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	430b      	orrs	r3, r1
 800302e:	4927      	ldr	r1, [pc, #156]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_RCC_OscConfig+0x4fc>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fd ff9d 	bl	8000f78 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003042:	f7fd ff99 	bl	8000f78 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e037      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x46a>
 8003060:	e02f      	b.n	80030c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_RCC_OscConfig+0x4fc>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fd ff86 	bl	8000f78 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fd ff82 	bl	8000f78 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e020      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x498>
 800308e:	e018      	b.n	80030c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e013      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_OscConfig+0x4f4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40007000 	.word	0x40007000
 80030d4:	42420060 	.word	0x42420060

080030d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0d0      	b.n	800328e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d910      	bls.n	800311c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b67      	ldr	r3, [pc, #412]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 0207 	bic.w	r2, r3, #7
 8003102:	4965      	ldr	r1, [pc, #404]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b63      	ldr	r3, [pc, #396]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0b8      	b.n	800328e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d020      	beq.n	800316a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003134:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800313e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003158:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	494d      	ldr	r1, [pc, #308]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d040      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	4b47      	ldr	r3, [pc, #284]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d115      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e07f      	b.n	800328e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	4b41      	ldr	r3, [pc, #260]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e073      	b.n	800328e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e06b      	b.n	800328e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b6:	4b39      	ldr	r3, [pc, #228]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f023 0203 	bic.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4936      	ldr	r1, [pc, #216]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c8:	f7fd fed6 	bl	8000f78 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fd fed2 	bl	8000f78 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e053      	b.n	800328e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	4b2d      	ldr	r3, [pc, #180]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 020c 	and.w	r2, r3, #12
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1eb      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f8:	4b27      	ldr	r3, [pc, #156]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d210      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b24      	ldr	r3, [pc, #144]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 0207 	bic.w	r2, r3, #7
 800320e:	4922      	ldr	r1, [pc, #136]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e032      	b.n	800328e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4916      	ldr	r1, [pc, #88]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	490e      	ldr	r1, [pc, #56]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003266:	f000 f82d 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 800326a:	4602      	mov	r2, r0
 800326c:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	490a      	ldr	r1, [pc, #40]	; (80032a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	5ccb      	ldrb	r3, [r1, r3]
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd fd2a 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40022000 	.word	0x40022000
 800329c:	40021000 	.word	0x40021000
 80032a0:	08009b30 	.word	0x08009b30
 80032a4:	20000000 	.word	0x20000000
 80032a8:	20000004 	.word	0x20000004

080032ac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_RCC_EnableCSS+0x14>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
}
 80032b6:	bf00      	nop
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	4242004c 	.word	0x4242004c

080032c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	b490      	push	{r4, r7}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032ca:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032cc:	1d3c      	adds	r4, r7, #4
 80032ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032d4:	f240 2301 	movw	r3, #513	; 0x201
 80032d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ee:	4b22      	ldr	r3, [pc, #136]	; (8003378 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x40>
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x46>
 8003302:	e02d      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003304:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003306:	623b      	str	r3, [r7, #32]
      break;
 8003308:	e02d      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	0c9b      	lsrs	r3, r3, #18
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003316:	4413      	add	r3, r2
 8003318:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800331c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <HAL_RCC_GetSysClockFreq+0xb4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	0c5b      	lsrs	r3, r3, #17
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003336:	4413      	add	r3, r2
 8003338:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800333c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003342:	fb02 f203 	mul.w	r2, r2, r3
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	e004      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	623b      	str	r3, [r7, #32]
      break;
 800335e:	e002      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003362:	623b      	str	r3, [r7, #32]
      break;
 8003364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003366:	6a3b      	ldr	r3, [r7, #32]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3728      	adds	r7, #40	; 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bc90      	pop	{r4, r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	08009ad0 	.word	0x08009ad0
 8003378:	40021000 	.word	0x40021000
 800337c:	007a1200 	.word	0x007a1200
 8003380:	003d0900 	.word	0x003d0900

08003384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003388:	4b02      	ldr	r3, [pc, #8]	; (8003394 <HAL_RCC_GetHCLKFreq+0x10>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	20000000 	.word	0x20000000

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800339c:	f7ff fff2 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4903      	ldr	r1, [pc, #12]	; (80033bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08009b40 	.word	0x08009b40

080033c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033c4:	f7ff ffde 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0adb      	lsrs	r3, r3, #11
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08009b40 	.word	0x08009b40

080033e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	220f      	movs	r2, #15
 80033f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_GetClockConfig+0x58>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0203 	and.w	r2, r3, #3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003404:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <HAL_RCC_GetClockConfig+0x58>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_GetClockConfig+0x58>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800341c:	4b08      	ldr	r3, [pc, #32]	; (8003440 <HAL_RCC_GetClockConfig+0x58>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	08db      	lsrs	r3, r3, #3
 8003422:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_RCC_GetClockConfig+0x5c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0207 	and.w	r2, r3, #7
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	40021000 	.word	0x40021000
 8003444:	40022000 	.word	0x40022000

08003448 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_RCC_NMI_IRQHandler+0x20>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d104      	bne.n	8003462 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003458:	f000 f828 	bl	80034ac <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_RCC_NMI_IRQHandler+0x24>)
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	701a      	strb	r2, [r3, #0]
  }
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	4002100a 	.word	0x4002100a

08003470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <RCC_Delay+0x34>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <RCC_Delay+0x38>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0a5b      	lsrs	r3, r3, #9
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800348c:	bf00      	nop
  }
  while (Delay --);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1e5a      	subs	r2, r3, #1
 8003492:	60fa      	str	r2, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f9      	bne.n	800348c <RCC_Delay+0x1c>
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	20000000 	.word	0x20000000
 80034a8:	10624dd3 	.word	0x10624dd3

080034ac <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d07d      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80034d4:	2300      	movs	r3, #0
 80034d6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d8:	4b4f      	ldr	r3, [pc, #316]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10d      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e4:	4b4c      	ldr	r3, [pc, #304]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	4a4b      	ldr	r2, [pc, #300]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ee:	61d3      	str	r3, [r2, #28]
 80034f0:	4b49      	ldr	r3, [pc, #292]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fc:	2301      	movs	r3, #1
 80034fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b46      	ldr	r3, [pc, #280]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d118      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350c:	4b43      	ldr	r3, [pc, #268]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a42      	ldr	r2, [pc, #264]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003518:	f7fd fd2e 	bl	8000f78 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	e008      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fd fd2a 	bl	8000f78 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e06d      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b3a      	ldr	r3, [pc, #232]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003546:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02e      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	429a      	cmp	r2, r3
 800355a:	d027      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800355c:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003566:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800356c:	4b2c      	ldr	r3, [pc, #176]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003572:	4a29      	ldr	r2, [pc, #164]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d014      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fd fcf9 	bl	8000f78 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fd fcf5 	bl	8000f78 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e036      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ee      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4917      	ldr	r1, [pc, #92]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4a13      	ldr	r2, [pc, #76]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035dc:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	490b      	ldr	r1, [pc, #44]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	4904      	ldr	r1, [pc, #16]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	40007000 	.word	0x40007000
 8003620:	42420440 	.word	0x42420440

08003624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e041      	b.n	80036ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f839 	bl	80036c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f000 f9b4 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d001      	beq.n	80036ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e03a      	b.n	8003762 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a18      	ldr	r2, [pc, #96]	; (800376c <HAL_TIM_Base_Start_IT+0x98>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_TIM_Base_Start_IT+0x58>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003716:	d009      	beq.n	800372c <HAL_TIM_Base_Start_IT+0x58>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a14      	ldr	r2, [pc, #80]	; (8003770 <HAL_TIM_Base_Start_IT+0x9c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_TIM_Base_Start_IT+0x58>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a13      	ldr	r2, [pc, #76]	; (8003774 <HAL_TIM_Base_Start_IT+0xa0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d111      	bne.n	8003750 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b06      	cmp	r3, #6
 800373c:	d010      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	e007      	b.n	8003760 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40000400 	.word	0x40000400
 8003774:	40000800 	.word	0x40000800

08003778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d122      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b02      	cmp	r3, #2
 800379a:	d11b      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0202 	mvn.w	r2, #2
 80037a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8ed 	bl	800399a <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f8e0 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f8ef 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d122      	bne.n	8003828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d11b      	bne.n	8003828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0204 	mvn.w	r2, #4
 80037f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2202      	movs	r2, #2
 80037fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f8c3 	bl	800399a <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f8b6 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f8c5 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b08      	cmp	r3, #8
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b08      	cmp	r3, #8
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0208 	mvn.w	r2, #8
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2204      	movs	r2, #4
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f899 	bl	800399a <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f88c 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f89b 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b10      	cmp	r3, #16
 8003888:	d122      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b10      	cmp	r3, #16
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0210 	mvn.w	r2, #16
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2208      	movs	r2, #8
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f86f 	bl	800399a <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f862 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f871 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d10e      	bne.n	80038fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d107      	bne.n	80038fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0201 	mvn.w	r2, #1
 80038f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd f9a2 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003906:	2b80      	cmp	r3, #128	; 0x80
 8003908:	d10e      	bne.n	8003928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d107      	bne.n	8003928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8bf 	bl	8003aa6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d10e      	bne.n	8003954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d107      	bne.n	8003954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800394c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f835 	bl	80039be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b20      	cmp	r3, #32
 8003960:	d10e      	bne.n	8003980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b20      	cmp	r3, #32
 800396e:	d107      	bne.n	8003980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0220 	mvn.w	r2, #32
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f88a 	bl	8003a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <TIM_Base_SetConfig+0xb8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00b      	beq.n	8003a00 <TIM_Base_SetConfig+0x30>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ee:	d007      	beq.n	8003a00 <TIM_Base_SetConfig+0x30>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <TIM_Base_SetConfig+0xbc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d003      	beq.n	8003a00 <TIM_Base_SetConfig+0x30>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a25      	ldr	r2, [pc, #148]	; (8003a90 <TIM_Base_SetConfig+0xc0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d108      	bne.n	8003a12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <TIM_Base_SetConfig+0xb8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00b      	beq.n	8003a32 <TIM_Base_SetConfig+0x62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a20:	d007      	beq.n	8003a32 <TIM_Base_SetConfig+0x62>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <TIM_Base_SetConfig+0xbc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d003      	beq.n	8003a32 <TIM_Base_SetConfig+0x62>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <TIM_Base_SetConfig+0xc0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d108      	bne.n	8003a44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a07      	ldr	r2, [pc, #28]	; (8003a88 <TIM_Base_SetConfig+0xb8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d103      	bne.n	8003a78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	615a      	str	r2, [r3, #20]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800

08003a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e03f      	b.n	8003b4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd f9b0 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2224      	movs	r2, #36	; 0x24
 8003ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f829 	bl	8003b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b8e:	f023 030c 	bic.w	r3, r3, #12
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <UART_SetConfig+0x114>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d103      	bne.n	8003bc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bbc:	f7ff fc00 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	e002      	b.n	8003bca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bc4:	f7ff fbe8 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8003bc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009a      	lsls	r2, r3, #2
 8003bd4:	441a      	add	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	4a22      	ldr	r2, [pc, #136]	; (8003c6c <UART_SetConfig+0x118>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	0119      	lsls	r1, r3, #4
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009a      	lsls	r2, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <UART_SetConfig+0x118>)
 8003c02:	fba3 0302 	umull	r0, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2064      	movs	r0, #100	; 0x64
 8003c0a:	fb00 f303 	mul.w	r3, r0, r3
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	3332      	adds	r3, #50	; 0x32
 8003c14:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <UART_SetConfig+0x118>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c20:	4419      	add	r1, r3
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009a      	lsls	r2, r3, #2
 8003c2c:	441a      	add	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <UART_SetConfig+0x118>)
 8003c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2064      	movs	r0, #100	; 0x64
 8003c42:	fb00 f303 	mul.w	r3, r0, r3
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	3332      	adds	r3, #50	; 0x32
 8003c4c:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <UART_SetConfig+0x118>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	f003 020f 	and.w	r2, r3, #15
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	440a      	add	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c60:	bf00      	nop
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40013800 	.word	0x40013800
 8003c6c:	51eb851f 	.word	0x51eb851f

08003c70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c70:	b084      	sub	sp, #16
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	f107 0014 	add.w	r0, r7, #20
 8003c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	b004      	add	sp, #16
 8003c8e:	4770      	bx	lr

08003c90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ca0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ca4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cc4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cc8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	4013      	ands	r3, r2
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d08:	b084      	sub	sp, #16
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	f107 0014 	add.w	r0, r7, #20
 8003d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	b004      	add	sp, #16
 8003d46:	4770      	bx	lr

08003d48 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b09b      	sub	sp, #108	; 0x6c
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	78db      	ldrb	r3, [r3, #3]
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d81f      	bhi.n	8003dba <USB_ActivateEndpoint+0x72>
 8003d7a:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <USB_ActivateEndpoint+0x38>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003d91 	.word	0x08003d91
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003dc3 	.word	0x08003dc3
 8003d8c:	08003d9f 	.word	0x08003d9f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d98:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003d9c:	e012      	b.n	8003dc4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003d9e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003da2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003da6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003daa:	e00b      	b.n	8003dc4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003dac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003db0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003db4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003db8:	e004      	b.n	8003dc4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003dc0:	e000      	b.n	8003dc4 <USB_ActivateEndpoint+0x7c>
      break;
 8003dc2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	441a      	add	r2, r3
 8003dce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	441a      	add	r2, r3
 8003e14:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	7b1b      	ldrb	r3, [r3, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f040 8149 	bne.w	80040c8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 8084 	beq.w	8003f48 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	4413      	add	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	011a      	lsls	r2, r3, #4
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	88db      	ldrh	r3, [r3, #6]
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	81fb      	strh	r3, [r7, #14]
 8003e82:	89fb      	ldrh	r3, [r7, #14]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01b      	beq.n	8003ec4 <USB_ActivateEndpoint+0x17c>
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	81bb      	strh	r3, [r7, #12]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	441a      	add	r2, r3
 8003eae:	89bb      	ldrh	r3, [r7, #12]
 8003eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ebc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	78db      	ldrb	r3, [r3, #3]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d020      	beq.n	8003f0e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ee2:	813b      	strh	r3, [r7, #8]
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	f083 0320 	eor.w	r3, r3, #32
 8003eea:	813b      	strh	r3, [r7, #8]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	441a      	add	r2, r3
 8003ef6:	893b      	ldrh	r3, [r7, #8]
 8003ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	8013      	strh	r3, [r2, #0]
 8003f0c:	e27f      	b.n	800440e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f24:	817b      	strh	r3, [r7, #10]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	441a      	add	r2, r3
 8003f30:	897b      	ldrh	r3, [r7, #10]
 8003f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	8013      	strh	r3, [r2, #0]
 8003f46:	e262      	b.n	800440e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	4413      	add	r3, r2
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	011a      	lsls	r2, r3, #4
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	88db      	ldrh	r3, [r3, #6]
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	4413      	add	r3, r2
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	011a      	lsls	r2, r3, #4
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	4413      	add	r3, r2
 8003f9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f9e:	623b      	str	r3, [r7, #32]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d112      	bne.n	8003fce <USB_ActivateEndpoint+0x286>
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	e02f      	b.n	800402e <USB_ActivateEndpoint+0x2e6>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b3e      	cmp	r3, #62	; 0x3e
 8003fd4:	d813      	bhi.n	8003ffe <USB_ActivateEndpoint+0x2b6>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <USB_ActivateEndpoint+0x2a8>
 8003fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fec:	3301      	adds	r3, #1
 8003fee:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	029b      	lsls	r3, r3, #10
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	801a      	strh	r2, [r3, #0]
 8003ffc:	e017      	b.n	800402e <USB_ActivateEndpoint+0x2e6>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	663b      	str	r3, [r7, #96]	; 0x60
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <USB_ActivateEndpoint+0x2d0>
 8004012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004014:	3b01      	subs	r3, #1
 8004016:	663b      	str	r3, [r7, #96]	; 0x60
 8004018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800401a:	b29b      	uxth	r3, r3
 800401c:	029b      	lsls	r3, r3, #10
 800401e:	b29b      	uxth	r3, r3
 8004020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004028:	b29a      	uxth	r2, r3
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	83fb      	strh	r3, [r7, #30]
 800403c:	8bfb      	ldrh	r3, [r7, #30]
 800403e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01b      	beq.n	800407e <USB_ActivateEndpoint+0x336>
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405c:	83bb      	strh	r3, [r7, #28]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	441a      	add	r2, r3
 8004068:	8bbb      	ldrh	r3, [r7, #28]
 800406a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800406e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407a:	b29b      	uxth	r3, r3
 800407c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	b29b      	uxth	r3, r3
 800408c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004094:	837b      	strh	r3, [r7, #26]
 8004096:	8b7b      	ldrh	r3, [r7, #26]
 8004098:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800409c:	837b      	strh	r3, [r7, #26]
 800409e:	8b7b      	ldrh	r3, [r7, #26]
 80040a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040a4:	837b      	strh	r3, [r7, #26]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	8b7b      	ldrh	r3, [r7, #26]
 80040b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]
 80040c6:	e1a2      	b.n	800440e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	441a      	add	r2, r3
 80040ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80040f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004100:	b29b      	uxth	r3, r3
 8004102:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	65bb      	str	r3, [r7, #88]	; 0x58
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410e:	b29b      	uxth	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004114:	4413      	add	r3, r2
 8004116:	65bb      	str	r3, [r7, #88]	; 0x58
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004120:	4413      	add	r3, r2
 8004122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004126:	657b      	str	r3, [r7, #84]	; 0x54
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	891b      	ldrh	r3, [r3, #8]
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	b29b      	uxth	r3, r3
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	653b      	str	r3, [r7, #80]	; 0x50
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004148:	4413      	add	r3, r2
 800414a:	653b      	str	r3, [r7, #80]	; 0x50
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	011a      	lsls	r2, r3, #4
 8004152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004154:	4413      	add	r3, r2
 8004156:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800415a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	895b      	ldrh	r3, [r3, #10]
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	b29b      	uxth	r3, r3
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f040 8091 	bne.w	8004298 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004184:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01b      	beq.n	80041c6 <USB_ActivateEndpoint+0x47e>
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	441a      	add	r2, r3
 80041b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80041b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	873b      	strh	r3, [r7, #56]	; 0x38
 80041d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01b      	beq.n	8004216 <USB_ActivateEndpoint+0x4ce>
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	441a      	add	r2, r3
 8004200:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004212:	b29b      	uxth	r3, r3
 8004214:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800422e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004230:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004234:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004236:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004238:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800423c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800424a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425a:	b29b      	uxth	r3, r3
 800425c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004274:	867b      	strh	r3, [r7, #50]	; 0x32
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004292:	b29b      	uxth	r3, r3
 8004294:	8013      	strh	r3, [r2, #0]
 8004296:	e0ba      	b.n	800440e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80042a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01d      	beq.n	80042f0 <USB_ActivateEndpoint+0x5a8>
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	441a      	add	r2, r3
 80042d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004300:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01d      	beq.n	8004348 <USB_ActivateEndpoint+0x600>
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	441a      	add	r2, r3
 8004330:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800433c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004340:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004344:	b29b      	uxth	r3, r3
 8004346:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	78db      	ldrb	r3, [r3, #3]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d024      	beq.n	800439a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004366:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800436a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800436e:	f083 0320 	eor.w	r3, r3, #32
 8004372:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	441a      	add	r2, r3
 8004380:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004394:	b29b      	uxth	r3, r3
 8004396:	8013      	strh	r3, [r2, #0]
 8004398:	e01d      	b.n	80043d6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	441a      	add	r2, r3
 80043f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80043fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440a:	b29b      	uxth	r3, r3
 800440c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800440e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004412:	4618      	mov	r0, r3
 8004414:	376c      	adds	r7, #108	; 0x6c
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800441c:	b480      	push	{r7}
 800441e:	b08d      	sub	sp, #52	; 0x34
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	7b1b      	ldrb	r3, [r3, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 808e 	bne.w	800454c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d044      	beq.n	80044c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	81bb      	strh	r3, [r7, #12]
 8004446:	89bb      	ldrh	r3, [r7, #12]
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01b      	beq.n	8004488 <USB_DeactivateEndpoint+0x6c>
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	817b      	strh	r3, [r7, #10]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	897b      	ldrh	r3, [r7, #10]
 8004474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004480:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004484:	b29b      	uxth	r3, r3
 8004486:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449e:	813b      	strh	r3, [r7, #8]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	441a      	add	r2, r3
 80044aa:	893b      	ldrh	r3, [r7, #8]
 80044ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044bc:	b29b      	uxth	r3, r3
 80044be:	8013      	strh	r3, [r2, #0]
 80044c0:	e192      	b.n	80047e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	827b      	strh	r3, [r7, #18]
 80044d0:	8a7b      	ldrh	r3, [r7, #18]
 80044d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01b      	beq.n	8004512 <USB_DeactivateEndpoint+0xf6>
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f0:	823b      	strh	r3, [r7, #16]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	441a      	add	r2, r3
 80044fc:	8a3b      	ldrh	r3, [r7, #16]
 80044fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004506:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800450a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450e:	b29b      	uxth	r3, r3
 8004510:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004528:	81fb      	strh	r3, [r7, #14]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	441a      	add	r2, r3
 8004534:	89fb      	ldrh	r3, [r7, #14]
 8004536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800453a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800453e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004546:	b29b      	uxth	r3, r3
 8004548:	8013      	strh	r3, [r2, #0]
 800454a:	e14d      	b.n	80047e8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f040 80a5 	bne.w	80046a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	843b      	strh	r3, [r7, #32]
 8004564:	8c3b      	ldrh	r3, [r7, #32]
 8004566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d01b      	beq.n	80045a6 <USB_DeactivateEndpoint+0x18a>
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004584:	83fb      	strh	r3, [r7, #30]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	441a      	add	r2, r3
 8004590:	8bfb      	ldrh	r3, [r7, #30]
 8004592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800459e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	83bb      	strh	r3, [r7, #28]
 80045b4:	8bbb      	ldrh	r3, [r7, #28]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01b      	beq.n	80045f6 <USB_DeactivateEndpoint+0x1da>
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	837b      	strh	r3, [r7, #26]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	441a      	add	r2, r3
 80045e0:	8b7b      	ldrh	r3, [r7, #26]
 80045e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460c:	833b      	strh	r3, [r7, #24]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	441a      	add	r2, r3
 8004618:	8b3b      	ldrh	r3, [r7, #24]
 800461a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004626:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004644:	82fb      	strh	r3, [r7, #22]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	441a      	add	r2, r3
 8004650:	8afb      	ldrh	r3, [r7, #22]
 8004652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004662:	b29b      	uxth	r3, r3
 8004664:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467c:	82bb      	strh	r3, [r7, #20]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	8abb      	ldrh	r3, [r7, #20]
 800468a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]
 800469e:	e0a3      	b.n	80047e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01b      	beq.n	80046f0 <USB_DeactivateEndpoint+0x2d4>
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	441a      	add	r2, r3
 80046da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80046dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80046fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01b      	beq.n	8004740 <USB_DeactivateEndpoint+0x324>
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004756:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	441a      	add	r2, r3
 8004762:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004774:	b29b      	uxth	r3, r3
 8004776:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800478e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	441a      	add	r2, r3
 800479a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800479c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3734      	adds	r7, #52	; 0x34
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b0c4      	sub	sp, #272	; 0x110
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	6018      	str	r0, [r3, #0]
 80047fe:	463b      	mov	r3, r7
 8004800:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004802:	463b      	mov	r3, r7
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b01      	cmp	r3, #1
 800480a:	f040 8557 	bne.w	80052bc <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800480e:	463b      	mov	r3, r7
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699a      	ldr	r2, [r3, #24]
 8004814:	463b      	mov	r3, r7
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	429a      	cmp	r2, r3
 800481c:	d905      	bls.n	800482a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800481e:	463b      	mov	r3, r7
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004828:	e004      	b.n	8004834 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800482a:	463b      	mov	r3, r7
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004834:	463b      	mov	r3, r7
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	7b1b      	ldrb	r3, [r3, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d12c      	bne.n	8004898 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800483e:	463b      	mov	r3, r7
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6959      	ldr	r1, [r3, #20]
 8004844:	463b      	mov	r3, r7
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	88da      	ldrh	r2, [r3, #6]
 800484a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484e:	b29b      	uxth	r3, r3
 8004850:	1d38      	adds	r0, r7, #4
 8004852:	6800      	ldr	r0, [r0, #0]
 8004854:	f001 fa2c 	bl	8005cb0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004858:	1d3b      	adds	r3, r7, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	1d3b      	adds	r3, r7, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004866:	b29b      	uxth	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	4413      	add	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	463b      	mov	r3, r7
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	011a      	lsls	r2, r3, #4
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	4413      	add	r3, r2
 800487c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488a:	b29a      	uxth	r2, r3
 800488c:	f107 0310 	add.w	r3, r7, #16
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	f000 bcdd 	b.w	8005252 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004898:	463b      	mov	r3, r7
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	78db      	ldrb	r3, [r3, #3]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	f040 8347 	bne.w	8004f32 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80048a4:	463b      	mov	r3, r7
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6a1a      	ldr	r2, [r3, #32]
 80048aa:	463b      	mov	r3, r7
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	f240 82eb 	bls.w	8004e8c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	463b      	mov	r3, r7
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80048d4:	1d3b      	adds	r3, r7, #4
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	463b      	mov	r3, r7
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	441a      	add	r2, r3
 80048e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80048e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80048fa:	463b      	mov	r3, r7
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004904:	1ad2      	subs	r2, r2, r3
 8004906:	463b      	mov	r3, r7
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800490c:	1d3b      	adds	r3, r7, #4
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	463b      	mov	r3, r7
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8159 	beq.w	8004bda <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004928:	1d3b      	adds	r3, r7, #4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	637b      	str	r3, [r7, #52]	; 0x34
 800492e:	463b      	mov	r3, r7
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	785b      	ldrb	r3, [r3, #1]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d164      	bne.n	8004a02 <USB_EPStartXfer+0x20e>
 8004938:	1d3b      	adds	r3, r7, #4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004946:	b29b      	uxth	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	4413      	add	r3, r2
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004950:	463b      	mov	r3, r7
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	011a      	lsls	r2, r3, #4
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	4413      	add	r3, r2
 800495c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004960:	62bb      	str	r3, [r7, #40]	; 0x28
 8004962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d112      	bne.n	8004990 <USB_EPStartXfer+0x19c>
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004974:	b29a      	uxth	r2, r3
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004988:	b29a      	uxth	r2, r3
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	e054      	b.n	8004a3a <USB_EPStartXfer+0x246>
 8004990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004994:	2b3e      	cmp	r3, #62	; 0x3e
 8004996:	d817      	bhi.n	80049c8 <USB_EPStartXfer+0x1d4>
 8004998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d004      	beq.n	80049b8 <USB_EPStartXfer+0x1c4>
 80049ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b2:	3301      	adds	r3, #1
 80049b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049bc:	b29b      	uxth	r3, r3
 80049be:	029b      	lsls	r3, r3, #10
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	801a      	strh	r2, [r3, #0]
 80049c6:	e038      	b.n	8004a3a <USB_EPStartXfer+0x246>
 80049c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <USB_EPStartXfer+0x1f4>
 80049de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049e2:	3b01      	subs	r3, #1
 80049e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	029b      	lsls	r3, r3, #10
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	801a      	strh	r2, [r3, #0]
 8004a00:	e01b      	b.n	8004a3a <USB_EPStartXfer+0x246>
 8004a02:	463b      	mov	r3, r7
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d116      	bne.n	8004a3a <USB_EPStartXfer+0x246>
 8004a0c:	1d3b      	adds	r3, r7, #4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	4413      	add	r3, r2
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1e:	463b      	mov	r3, r7
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	011a      	lsls	r2, r3, #4
 8004a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a28:	4413      	add	r3, r2
 8004a2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8004a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	895b      	ldrh	r3, [r3, #10]
 8004a40:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a44:	463b      	mov	r3, r7
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6959      	ldr	r1, [r3, #20]
 8004a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a54:	1d38      	adds	r0, r7, #4
 8004a56:	6800      	ldr	r0, [r0, #0]
 8004a58:	f001 f92a 	bl	8005cb0 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a66:	441a      	add	r2, r3
 8004a68:	463b      	mov	r3, r7
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a6e:	463b      	mov	r3, r7
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6a1a      	ldr	r2, [r3, #32]
 8004a74:	463b      	mov	r3, r7
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d909      	bls.n	8004a92 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004a7e:	463b      	mov	r3, r7
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6a1a      	ldr	r2, [r3, #32]
 8004a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a88:	1ad2      	subs	r2, r2, r3
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	621a      	str	r2, [r3, #32]
 8004a90:	e008      	b.n	8004aa4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a92:	463b      	mov	r3, r7
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d164      	bne.n	8004b78 <USB_EPStartXfer+0x384>
 8004aae:	1d3b      	adds	r3, r7, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	1d3b      	adds	r3, r7, #4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	011a      	lsls	r2, r3, #4
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d112      	bne.n	8004b06 <USB_EPStartXfer+0x312>
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	e057      	b.n	8004bb6 <USB_EPStartXfer+0x3c2>
 8004b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b0c:	d817      	bhi.n	8004b3e <USB_EPStartXfer+0x34a>
 8004b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b12:	085b      	lsrs	r3, r3, #1
 8004b14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <USB_EPStartXfer+0x33a>
 8004b24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	029b      	lsls	r3, r3, #10
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	e03b      	b.n	8004bb6 <USB_EPStartXfer+0x3c2>
 8004b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <USB_EPStartXfer+0x36a>
 8004b54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	029b      	lsls	r3, r3, #10
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	801a      	strh	r2, [r3, #0]
 8004b76:	e01e      	b.n	8004bb6 <USB_EPStartXfer+0x3c2>
 8004b78:	463b      	mov	r3, r7
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d119      	bne.n	8004bb6 <USB_EPStartXfer+0x3c2>
 8004b82:	1d3b      	adds	r3, r7, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
 8004b88:	1d3b      	adds	r3, r7, #4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	4413      	add	r3, r2
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9a:	463b      	mov	r3, r7
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	011a      	lsls	r2, r3, #4
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004baa:	623b      	str	r3, [r7, #32]
 8004bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	891b      	ldrh	r3, [r3, #8]
 8004bbc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bc0:	463b      	mov	r3, r7
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6959      	ldr	r1, [r3, #20]
 8004bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004bd0:	1d38      	adds	r0, r7, #4
 8004bd2:	6800      	ldr	r0, [r0, #0]
 8004bd4:	f001 f86c 	bl	8005cb0 <USB_WritePMA>
 8004bd8:	e33b      	b.n	8005252 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004bda:	463b      	mov	r3, r7
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d164      	bne.n	8004cae <USB_EPStartXfer+0x4ba>
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bea:	1d3b      	adds	r3, r7, #4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf8:	4413      	add	r3, r2
 8004bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bfc:	463b      	mov	r3, r7
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	011a      	lsls	r2, r3, #4
 8004c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c06:	4413      	add	r3, r2
 8004c08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d112      	bne.n	8004c3c <USB_EPStartXfer+0x448>
 8004c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c24:	801a      	strh	r2, [r3, #0]
 8004c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c38:	801a      	strh	r2, [r3, #0]
 8004c3a:	e057      	b.n	8004cec <USB_EPStartXfer+0x4f8>
 8004c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c40:	2b3e      	cmp	r3, #62	; 0x3e
 8004c42:	d817      	bhi.n	8004c74 <USB_EPStartXfer+0x480>
 8004c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <USB_EPStartXfer+0x470>
 8004c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	029b      	lsls	r3, r3, #10
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c70:	801a      	strh	r2, [r3, #0]
 8004c72:	e03b      	b.n	8004cec <USB_EPStartXfer+0x4f8>
 8004c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <USB_EPStartXfer+0x4a0>
 8004c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	029b      	lsls	r3, r3, #10
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e01e      	b.n	8004cec <USB_EPStartXfer+0x4f8>
 8004cae:	463b      	mov	r3, r7
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d119      	bne.n	8004cec <USB_EPStartXfer+0x4f8>
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	657b      	str	r3, [r7, #84]	; 0x54
 8004cbe:	1d3b      	adds	r3, r7, #4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ccc:	4413      	add	r3, r2
 8004cce:	657b      	str	r3, [r7, #84]	; 0x54
 8004cd0:	463b      	mov	r3, r7
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	011a      	lsls	r2, r3, #4
 8004cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cda:	4413      	add	r3, r2
 8004cdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004cec:	463b      	mov	r3, r7
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	891b      	ldrh	r3, [r3, #8]
 8004cf2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cf6:	463b      	mov	r3, r7
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6959      	ldr	r1, [r3, #20]
 8004cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d06:	1d38      	adds	r0, r7, #4
 8004d08:	6800      	ldr	r0, [r0, #0]
 8004d0a:	f000 ffd1 	bl	8005cb0 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d0e:	463b      	mov	r3, r7
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d18:	441a      	add	r2, r3
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d20:	463b      	mov	r3, r7
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6a1a      	ldr	r2, [r3, #32]
 8004d26:	463b      	mov	r3, r7
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d909      	bls.n	8004d44 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004d30:	463b      	mov	r3, r7
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6a1a      	ldr	r2, [r3, #32]
 8004d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3a:	1ad2      	subs	r2, r2, r3
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	621a      	str	r2, [r3, #32]
 8004d42:	e008      	b.n	8004d56 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d44:	463b      	mov	r3, r7
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004d4e:	463b      	mov	r3, r7
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d56:	1d3b      	adds	r3, r7, #4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d164      	bne.n	8004e30 <USB_EPStartXfer+0x63c>
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d6c:	1d3b      	adds	r3, r7, #4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7a:	4413      	add	r3, r2
 8004d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d7e:	463b      	mov	r3, r7
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	011a      	lsls	r2, r3, #4
 8004d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d88:	4413      	add	r3, r2
 8004d8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d112      	bne.n	8004dbe <USB_EPStartXfer+0x5ca>
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	801a      	strh	r2, [r3, #0]
 8004dbc:	e054      	b.n	8004e68 <USB_EPStartXfer+0x674>
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc2:	2b3e      	cmp	r3, #62	; 0x3e
 8004dc4:	d817      	bhi.n	8004df6 <USB_EPStartXfer+0x602>
 8004dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dca:	085b      	lsrs	r3, r3, #1
 8004dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <USB_EPStartXfer+0x5f2>
 8004ddc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004de0:	3301      	adds	r3, #1
 8004de2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	029b      	lsls	r3, r3, #10
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	801a      	strh	r2, [r3, #0]
 8004df4:	e038      	b.n	8004e68 <USB_EPStartXfer+0x674>
 8004df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <USB_EPStartXfer+0x622>
 8004e0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e10:	3b01      	subs	r3, #1
 8004e12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	029b      	lsls	r3, r3, #10
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e01b      	b.n	8004e68 <USB_EPStartXfer+0x674>
 8004e30:	463b      	mov	r3, r7
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d116      	bne.n	8004e68 <USB_EPStartXfer+0x674>
 8004e3a:	1d3b      	adds	r3, r7, #4
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e48:	4413      	add	r3, r2
 8004e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4c:	463b      	mov	r3, r7
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	011a      	lsls	r2, r3, #4
 8004e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e56:	4413      	add	r3, r2
 8004e58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e68:	463b      	mov	r3, r7
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	895b      	ldrh	r3, [r3, #10]
 8004e6e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e72:	463b      	mov	r3, r7
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6959      	ldr	r1, [r3, #20]
 8004e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004e82:	1d38      	adds	r0, r7, #4
 8004e84:	6800      	ldr	r0, [r0, #0]
 8004e86:	f000 ff13 	bl	8005cb0 <USB_WritePMA>
 8004e8a:	e1e2      	b.n	8005252 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004e96:	1d3b      	adds	r3, r7, #4
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004eb4:	1d3b      	adds	r3, r7, #4
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	463b      	mov	r3, r7
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004eda:	1d3b      	adds	r3, r7, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	663b      	str	r3, [r7, #96]	; 0x60
 8004ee0:	1d3b      	adds	r3, r7, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eee:	4413      	add	r3, r2
 8004ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	011a      	lsls	r2, r3, #4
 8004efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004efc:	4413      	add	r3, r2
 8004efe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f0e:	463b      	mov	r3, r7
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	891b      	ldrh	r3, [r3, #8]
 8004f14:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f18:	463b      	mov	r3, r7
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6959      	ldr	r1, [r3, #20]
 8004f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f28:	1d38      	adds	r0, r7, #4
 8004f2a:	6800      	ldr	r0, [r0, #0]
 8004f2c:	f000 fec0 	bl	8005cb0 <USB_WritePMA>
 8004f30:	e18f      	b.n	8005252 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f32:	1d3b      	adds	r3, r7, #4
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	463b      	mov	r3, r7
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 808f 	beq.w	800506c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f4e:	1d3b      	adds	r3, r7, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f54:	463b      	mov	r3, r7
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d164      	bne.n	8005028 <USB_EPStartXfer+0x834>
 8004f5e:	1d3b      	adds	r3, r7, #4
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	673b      	str	r3, [r7, #112]	; 0x70
 8004f64:	1d3b      	adds	r3, r7, #4
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f72:	4413      	add	r3, r2
 8004f74:	673b      	str	r3, [r7, #112]	; 0x70
 8004f76:	463b      	mov	r3, r7
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f80:	4413      	add	r3, r2
 8004f82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d112      	bne.n	8004fb6 <USB_EPStartXfer+0x7c2>
 8004f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb2:	801a      	strh	r2, [r3, #0]
 8004fb4:	e054      	b.n	8005060 <USB_EPStartXfer+0x86c>
 8004fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fba:	2b3e      	cmp	r3, #62	; 0x3e
 8004fbc:	d817      	bhi.n	8004fee <USB_EPStartXfer+0x7fa>
 8004fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d004      	beq.n	8004fde <USB_EPStartXfer+0x7ea>
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd8:	3301      	adds	r3, #1
 8004fda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	e038      	b.n	8005060 <USB_EPStartXfer+0x86c>
 8004fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffc:	f003 031f 	and.w	r3, r3, #31
 8005000:	2b00      	cmp	r3, #0
 8005002:	d104      	bne.n	800500e <USB_EPStartXfer+0x81a>
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	3b01      	subs	r3, #1
 800500a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005012:	b29b      	uxth	r3, r3
 8005014:	029b      	lsls	r3, r3, #10
 8005016:	b29b      	uxth	r3, r3
 8005018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800501c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005020:	b29a      	uxth	r2, r3
 8005022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005024:	801a      	strh	r2, [r3, #0]
 8005026:	e01b      	b.n	8005060 <USB_EPStartXfer+0x86c>
 8005028:	463b      	mov	r3, r7
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	785b      	ldrb	r3, [r3, #1]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d116      	bne.n	8005060 <USB_EPStartXfer+0x86c>
 8005032:	1d3b      	adds	r3, r7, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800503a:	b29b      	uxth	r3, r3
 800503c:	461a      	mov	r2, r3
 800503e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005040:	4413      	add	r3, r2
 8005042:	67bb      	str	r3, [r7, #120]	; 0x78
 8005044:	463b      	mov	r3, r7
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	011a      	lsls	r2, r3, #4
 800504c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800504e:	4413      	add	r3, r2
 8005050:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005054:	677b      	str	r3, [r7, #116]	; 0x74
 8005056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505a:	b29a      	uxth	r2, r3
 800505c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800505e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005060:	463b      	mov	r3, r7
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	895b      	ldrh	r3, [r3, #10]
 8005066:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800506a:	e097      	b.n	800519c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800506c:	463b      	mov	r3, r7
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	785b      	ldrb	r3, [r3, #1]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d168      	bne.n	8005148 <USB_EPStartXfer+0x954>
 8005076:	1d3b      	adds	r3, r7, #4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800507e:	1d3b      	adds	r3, r7, #4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005086:	b29b      	uxth	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800508e:	4413      	add	r3, r2
 8005090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005094:	463b      	mov	r3, r7
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	011a      	lsls	r2, r3, #4
 800509c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050a0:	4413      	add	r3, r2
 80050a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d112      	bne.n	80050d6 <USB_EPStartXfer+0x8e2>
 80050b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	e05d      	b.n	8005192 <USB_EPStartXfer+0x99e>
 80050d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050da:	2b3e      	cmp	r3, #62	; 0x3e
 80050dc:	d817      	bhi.n	800510e <USB_EPStartXfer+0x91a>
 80050de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e2:	085b      	lsrs	r3, r3, #1
 80050e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80050e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <USB_EPStartXfer+0x90a>
 80050f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050f8:	3301      	adds	r3, #1
 80050fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80050fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005102:	b29b      	uxth	r3, r3
 8005104:	029b      	lsls	r3, r3, #10
 8005106:	b29a      	uxth	r2, r3
 8005108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	e041      	b.n	8005192 <USB_EPStartXfer+0x99e>
 800510e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800511c:	f003 031f 	and.w	r3, r3, #31
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <USB_EPStartXfer+0x93a>
 8005124:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005128:	3b01      	subs	r3, #1
 800512a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800512e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005132:	b29b      	uxth	r3, r3
 8005134:	029b      	lsls	r3, r3, #10
 8005136:	b29b      	uxth	r3, r3
 8005138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005140:	b29a      	uxth	r2, r3
 8005142:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	e024      	b.n	8005192 <USB_EPStartXfer+0x99e>
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d11f      	bne.n	8005192 <USB_EPStartXfer+0x99e>
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005162:	b29b      	uxth	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800516a:	4413      	add	r3, r2
 800516c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005170:	463b      	mov	r3, r7
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	011a      	lsls	r2, r3, #4
 8005178:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800517c:	4413      	add	r3, r2
 800517e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005182:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800518a:	b29a      	uxth	r2, r3
 800518c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005190:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005192:	463b      	mov	r3, r7
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	891b      	ldrh	r3, [r3, #8]
 8005198:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800519c:	463b      	mov	r3, r7
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6959      	ldr	r1, [r3, #20]
 80051a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051ac:	1d38      	adds	r0, r7, #4
 80051ae:	6800      	ldr	r0, [r0, #0]
 80051b0:	f000 fd7e 	bl	8005cb0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80051b4:	463b      	mov	r3, r7
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d122      	bne.n	8005204 <USB_EPStartXfer+0xa10>
 80051be:	1d3b      	adds	r3, r7, #4
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	463b      	mov	r3, r7
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80051dc:	1d3b      	adds	r3, r7, #4
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	463b      	mov	r3, r7
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80051ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051fe:	b29b      	uxth	r3, r3
 8005200:	8013      	strh	r3, [r2, #0]
 8005202:	e026      	b.n	8005252 <USB_EPStartXfer+0xa5e>
 8005204:	463b      	mov	r3, r7
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d121      	bne.n	8005252 <USB_EPStartXfer+0xa5e>
 800520e:	1d3b      	adds	r3, r7, #4
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	463b      	mov	r3, r7
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005228:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	463b      	mov	r3, r7
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	441a      	add	r2, r3
 800523a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800523e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800524a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800524e:	b29b      	uxth	r3, r3
 8005250:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005252:	1d3b      	adds	r3, r7, #4
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	463b      	mov	r3, r7
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f107 020e 	add.w	r2, r7, #14
 8005268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005270:	8013      	strh	r3, [r2, #0]
 8005272:	f107 030e 	add.w	r3, r7, #14
 8005276:	f107 020e 	add.w	r2, r7, #14
 800527a:	8812      	ldrh	r2, [r2, #0]
 800527c:	f082 0210 	eor.w	r2, r2, #16
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	f107 030e 	add.w	r3, r7, #14
 8005286:	f107 020e 	add.w	r2, r7, #14
 800528a:	8812      	ldrh	r2, [r2, #0]
 800528c:	f082 0220 	eor.w	r2, r2, #32
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	463b      	mov	r3, r7
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	441a      	add	r2, r3
 80052a0:	f107 030e 	add.w	r3, r7, #14
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]
 80052ba:	e3b5      	b.n	8005a28 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80052bc:	463b      	mov	r3, r7
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	7b1b      	ldrb	r3, [r3, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f040 8090 	bne.w	80053e8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80052c8:	463b      	mov	r3, r7
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	463b      	mov	r3, r7
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d90e      	bls.n	80052f6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80052d8:	463b      	mov	r3, r7
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80052e2:	463b      	mov	r3, r7
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ec:	1ad2      	subs	r2, r2, r3
 80052ee:	463b      	mov	r3, r7
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	619a      	str	r2, [r3, #24]
 80052f4:	e008      	b.n	8005308 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80052f6:	463b      	mov	r3, r7
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005300:	463b      	mov	r3, r7
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2200      	movs	r2, #0
 8005306:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005308:	1d3b      	adds	r3, r7, #4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005318:	b29b      	uxth	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005320:	4413      	add	r3, r2
 8005322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005326:	463b      	mov	r3, r7
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	011a      	lsls	r2, r3, #4
 800532e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005332:	4413      	add	r3, r2
 8005334:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800533c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d116      	bne.n	8005372 <USB_EPStartXfer+0xb7e>
 8005344:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005350:	b29a      	uxth	r2, r3
 8005352:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005368:	b29a      	uxth	r2, r3
 800536a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	e32c      	b.n	80059cc <USB_EPStartXfer+0x11d8>
 8005372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005376:	2b3e      	cmp	r3, #62	; 0x3e
 8005378:	d818      	bhi.n	80053ac <USB_EPStartXfer+0xbb8>
 800537a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <USB_EPStartXfer+0xba6>
 8005390:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005394:	3301      	adds	r3, #1
 8005396:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800539a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800539e:	b29b      	uxth	r3, r3
 80053a0:	029b      	lsls	r3, r3, #10
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	e30f      	b.n	80059cc <USB_EPStartXfer+0x11d8>
 80053ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <USB_EPStartXfer+0xbd8>
 80053c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053c6:	3b01      	subs	r3, #1
 80053c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	029b      	lsls	r3, r3, #10
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053de:	b29a      	uxth	r2, r3
 80053e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	e2f1      	b.n	80059cc <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80053e8:	463b      	mov	r3, r7
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	78db      	ldrb	r3, [r3, #3]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	f040 818f 	bne.w	8005712 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80053f4:	463b      	mov	r3, r7
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d175      	bne.n	80054ea <USB_EPStartXfer+0xcf6>
 80053fe:	1d3b      	adds	r3, r7, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005406:	1d3b      	adds	r3, r7, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540e:	b29b      	uxth	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005416:	4413      	add	r3, r2
 8005418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800541c:	463b      	mov	r3, r7
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	011a      	lsls	r2, r3, #4
 8005424:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005428:	4413      	add	r3, r2
 800542a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800542e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005432:	463b      	mov	r3, r7
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d116      	bne.n	800546a <USB_EPStartXfer+0xc76>
 800543c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005448:	b29a      	uxth	r2, r3
 800544a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005460:	b29a      	uxth	r2, r3
 8005462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	e065      	b.n	8005536 <USB_EPStartXfer+0xd42>
 800546a:	463b      	mov	r3, r7
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b3e      	cmp	r3, #62	; 0x3e
 8005472:	d81a      	bhi.n	80054aa <USB_EPStartXfer+0xcb6>
 8005474:	463b      	mov	r3, r7
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005480:	463b      	mov	r3, r7
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <USB_EPStartXfer+0xca4>
 800548e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005492:	3301      	adds	r3, #1
 8005494:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005498:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800549c:	b29b      	uxth	r3, r3
 800549e:	029b      	lsls	r3, r3, #10
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054a6:	801a      	strh	r2, [r3, #0]
 80054a8:	e045      	b.n	8005536 <USB_EPStartXfer+0xd42>
 80054aa:	463b      	mov	r3, r7
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054b6:	463b      	mov	r3, r7
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <USB_EPStartXfer+0xcda>
 80054c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054c8:	3b01      	subs	r3, #1
 80054ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	029b      	lsls	r3, r3, #10
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054e6:	801a      	strh	r2, [r3, #0]
 80054e8:	e025      	b.n	8005536 <USB_EPStartXfer+0xd42>
 80054ea:	463b      	mov	r3, r7
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d120      	bne.n	8005536 <USB_EPStartXfer+0xd42>
 80054f4:	1d3b      	adds	r3, r7, #4
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005504:	b29b      	uxth	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800550c:	4413      	add	r3, r2
 800550e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005512:	463b      	mov	r3, r7
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	011a      	lsls	r2, r3, #4
 800551a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800551e:	4413      	add	r3, r2
 8005520:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005528:	463b      	mov	r3, r7
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	b29a      	uxth	r2, r3
 8005530:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005534:	801a      	strh	r2, [r3, #0]
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800553e:	463b      	mov	r3, r7
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d175      	bne.n	8005634 <USB_EPStartXfer+0xe40>
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005550:	1d3b      	adds	r3, r7, #4
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005558:	b29b      	uxth	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005560:	4413      	add	r3, r2
 8005562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005566:	463b      	mov	r3, r7
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	011a      	lsls	r2, r3, #4
 800556e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005572:	4413      	add	r3, r2
 8005574:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800557c:	463b      	mov	r3, r7
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d116      	bne.n	80055b4 <USB_EPStartXfer+0xdc0>
 8005586:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005592:	b29a      	uxth	r2, r3
 8005594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	e061      	b.n	8005678 <USB_EPStartXfer+0xe84>
 80055b4:	463b      	mov	r3, r7
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b3e      	cmp	r3, #62	; 0x3e
 80055bc:	d81a      	bhi.n	80055f4 <USB_EPStartXfer+0xe00>
 80055be:	463b      	mov	r3, r7
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	085b      	lsrs	r3, r3, #1
 80055c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055ca:	463b      	mov	r3, r7
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <USB_EPStartXfer+0xdee>
 80055d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055dc:	3301      	adds	r3, #1
 80055de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	029b      	lsls	r3, r3, #10
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	e041      	b.n	8005678 <USB_EPStartXfer+0xe84>
 80055f4:	463b      	mov	r3, r7
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005600:	463b      	mov	r3, r7
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 031f 	and.w	r3, r3, #31
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <USB_EPStartXfer+0xe24>
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005612:	3b01      	subs	r3, #1
 8005614:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561c:	b29b      	uxth	r3, r3
 800561e:	029b      	lsls	r3, r3, #10
 8005620:	b29b      	uxth	r3, r3
 8005622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562a:	b29a      	uxth	r2, r3
 800562c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	e021      	b.n	8005678 <USB_EPStartXfer+0xe84>
 8005634:	463b      	mov	r3, r7
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	785b      	ldrb	r3, [r3, #1]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d11c      	bne.n	8005678 <USB_EPStartXfer+0xe84>
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005646:	b29b      	uxth	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800564e:	4413      	add	r3, r2
 8005650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005654:	463b      	mov	r3, r7
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	011a      	lsls	r2, r3, #4
 800565c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005660:	4413      	add	r3, r2
 8005662:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800566a:	463b      	mov	r3, r7
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	b29a      	uxth	r2, r3
 8005672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005676:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005678:	463b      	mov	r3, r7
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 81a4 	beq.w	80059cc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005684:	1d3b      	adds	r3, r7, #4
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	463b      	mov	r3, r7
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005698:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800569c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <USB_EPStartXfer+0xebc>
 80056a4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10d      	bne.n	80056cc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056b0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f040 8187 	bne.w	80059cc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056be:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f040 8180 	bne.w	80059cc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80056cc:	1d3b      	adds	r3, r7, #4
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	463b      	mov	r3, r7
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	463b      	mov	r3, r7
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	441a      	add	r2, r3
 80056f8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80056fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005708:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800570c:	b29b      	uxth	r3, r3
 800570e:	8013      	strh	r3, [r2, #0]
 8005710:	e15c      	b.n	80059cc <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	78db      	ldrb	r3, [r3, #3]
 8005718:	2b01      	cmp	r3, #1
 800571a:	f040 8155 	bne.w	80059c8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800571e:	463b      	mov	r3, r7
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699a      	ldr	r2, [r3, #24]
 8005724:	463b      	mov	r3, r7
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	429a      	cmp	r2, r3
 800572c:	d90e      	bls.n	800574c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800572e:	463b      	mov	r3, r7
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005738:	463b      	mov	r3, r7
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	463b      	mov	r3, r7
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	619a      	str	r2, [r3, #24]
 800574a:	e008      	b.n	800575e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800574c:	463b      	mov	r3, r7
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005756:	463b      	mov	r3, r7
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d16f      	bne.n	8005848 <USB_EPStartXfer+0x1054>
 8005768:	1d3b      	adds	r3, r7, #4
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005778:	b29b      	uxth	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005780:	4413      	add	r3, r2
 8005782:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005786:	463b      	mov	r3, r7
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	011a      	lsls	r2, r3, #4
 800578e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005792:	4413      	add	r3, r2
 8005794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005798:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800579c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d116      	bne.n	80057d2 <USB_EPStartXfer+0xfde>
 80057a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057b6:	801a      	strh	r2, [r3, #0]
 80057b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057ce:	801a      	strh	r2, [r3, #0]
 80057d0:	e05f      	b.n	8005892 <USB_EPStartXfer+0x109e>
 80057d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d6:	2b3e      	cmp	r3, #62	; 0x3e
 80057d8:	d818      	bhi.n	800580c <USB_EPStartXfer+0x1018>
 80057da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <USB_EPStartXfer+0x1006>
 80057f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f4:	3301      	adds	r3, #1
 80057f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fe:	b29b      	uxth	r3, r3
 8005800:	029b      	lsls	r3, r3, #10
 8005802:	b29a      	uxth	r2, r3
 8005804:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005808:	801a      	strh	r2, [r3, #0]
 800580a:	e042      	b.n	8005892 <USB_EPStartXfer+0x109e>
 800580c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005810:	095b      	lsrs	r3, r3, #5
 8005812:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	2b00      	cmp	r3, #0
 8005820:	d104      	bne.n	800582c <USB_EPStartXfer+0x1038>
 8005822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005826:	3b01      	subs	r3, #1
 8005828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005830:	b29b      	uxth	r3, r3
 8005832:	029b      	lsls	r3, r3, #10
 8005834:	b29b      	uxth	r3, r3
 8005836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800583a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583e:	b29a      	uxth	r2, r3
 8005840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e024      	b.n	8005892 <USB_EPStartXfer+0x109e>
 8005848:	463b      	mov	r3, r7
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d11f      	bne.n	8005892 <USB_EPStartXfer+0x109e>
 8005852:	1d3b      	adds	r3, r7, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800585a:	1d3b      	adds	r3, r7, #4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005862:	b29b      	uxth	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800586a:	4413      	add	r3, r2
 800586c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005870:	463b      	mov	r3, r7
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	011a      	lsls	r2, r3, #4
 8005878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800587c:	4413      	add	r3, r2
 800587e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588a:	b29a      	uxth	r2, r3
 800588c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	1d3b      	adds	r3, r7, #4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800589a:	463b      	mov	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d16f      	bne.n	8005984 <USB_EPStartXfer+0x1190>
 80058a4:	1d3b      	adds	r3, r7, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058bc:	4413      	add	r3, r2
 80058be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058c2:	463b      	mov	r3, r7
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	011a      	lsls	r2, r3, #4
 80058ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058ce:	4413      	add	r3, r2
 80058d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80058d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d116      	bne.n	800590e <USB_EPStartXfer+0x111a>
 80058e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005904:	b29a      	uxth	r2, r3
 8005906:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800590a:	801a      	strh	r2, [r3, #0]
 800590c:	e05e      	b.n	80059cc <USB_EPStartXfer+0x11d8>
 800590e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005912:	2b3e      	cmp	r3, #62	; 0x3e
 8005914:	d818      	bhi.n	8005948 <USB_EPStartXfer+0x1154>
 8005916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <USB_EPStartXfer+0x1142>
 800592c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005930:	3301      	adds	r3, #1
 8005932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800593a:	b29b      	uxth	r3, r3
 800593c:	029b      	lsls	r3, r3, #10
 800593e:	b29a      	uxth	r2, r3
 8005940:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e041      	b.n	80059cc <USB_EPStartXfer+0x11d8>
 8005948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	2b00      	cmp	r3, #0
 800595c:	d104      	bne.n	8005968 <USB_EPStartXfer+0x1174>
 800595e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005962:	3b01      	subs	r3, #1
 8005964:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596c:	b29b      	uxth	r3, r3
 800596e:	029b      	lsls	r3, r3, #10
 8005970:	b29b      	uxth	r3, r3
 8005972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597a:	b29a      	uxth	r2, r3
 800597c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	e023      	b.n	80059cc <USB_EPStartXfer+0x11d8>
 8005984:	463b      	mov	r3, r7
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d11e      	bne.n	80059cc <USB_EPStartXfer+0x11d8>
 800598e:	1d3b      	adds	r3, r7, #4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005996:	b29b      	uxth	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800599e:	4413      	add	r3, r2
 80059a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059a4:	463b      	mov	r3, r7
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	011a      	lsls	r2, r3, #4
 80059ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059b0:	4413      	add	r3, r2
 80059b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059be:	b29a      	uxth	r2, r3
 80059c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059c4:	801a      	strh	r2, [r3, #0]
 80059c6:	e001      	b.n	80059cc <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e02e      	b.n	8005a2a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059cc:	1d3b      	adds	r3, r7, #4
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	463b      	mov	r3, r7
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80059ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80059ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80059f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80059fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	463b      	mov	r3, r7
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	441a      	add	r2, r3
 8005a10:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	785b      	ldrb	r3, [r3, #1]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d020      	beq.n	8005a88 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5c:	81bb      	strh	r3, [r7, #12]
 8005a5e:	89bb      	ldrh	r3, [r7, #12]
 8005a60:	f083 0310 	eor.w	r3, r3, #16
 8005a64:	81bb      	strh	r3, [r7, #12]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	441a      	add	r2, r3
 8005a70:	89bb      	ldrh	r3, [r7, #12]
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
 8005a86:	e01f      	b.n	8005ac8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9e:	81fb      	strh	r3, [r7, #14]
 8005aa0:	89fb      	ldrh	r3, [r7, #14]
 8005aa2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005aa6:	81fb      	strh	r3, [r7, #14]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	89fb      	ldrh	r3, [r7, #14]
 8005ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	7b1b      	ldrb	r3, [r3, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f040 809d 	bne.w	8005c22 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d04c      	beq.n	8005b8a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	823b      	strh	r3, [r7, #16]
 8005afe:	8a3b      	ldrh	r3, [r7, #16]
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <USB_EPClearStall+0x6c>
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	81fb      	strh	r3, [r7, #14]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	89fb      	ldrh	r3, [r7, #14]
 8005b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	78db      	ldrb	r3, [r3, #3]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d06c      	beq.n	8005c22 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5e:	81bb      	strh	r3, [r7, #12]
 8005b60:	89bb      	ldrh	r3, [r7, #12]
 8005b62:	f083 0320 	eor.w	r3, r3, #32
 8005b66:	81bb      	strh	r3, [r7, #12]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	89bb      	ldrh	r3, [r7, #12]
 8005b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8013      	strh	r3, [r2, #0]
 8005b88:	e04b      	b.n	8005c22 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	82fb      	strh	r3, [r7, #22]
 8005b98:	8afb      	ldrh	r3, [r7, #22]
 8005b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01b      	beq.n	8005bda <USB_EPClearStall+0x106>
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb8:	82bb      	strh	r3, [r7, #20]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	8abb      	ldrh	r3, [r7, #20]
 8005bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf0:	827b      	strh	r3, [r7, #18]
 8005bf2:	8a7b      	ldrh	r3, [r7, #18]
 8005bf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bf8:	827b      	strh	r3, [r7, #18]
 8005bfa:	8a7b      	ldrh	r3, [r7, #18]
 8005bfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c00:	827b      	strh	r3, [r7, #18]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	441a      	add	r2, r3
 8005c0c:	8a7b      	ldrh	r3, [r7, #18]
 8005c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr

08005c2e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d103      	bne.n	8005c48 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2280      	movs	r2, #128	; 0x80
 8005c44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr

08005c54 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b08d      	sub	sp, #52	; 0x34
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	4611      	mov	r1, r2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	80fb      	strh	r3, [r7, #6]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005cc6:	88bb      	ldrh	r3, [r7, #4]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	005a      	lsls	r2, r3, #1
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce8:	e01e      	b.n	8005d28 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	3302      	adds	r3, #2
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	3302      	adds	r3, #2
 8005d1a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	3301      	adds	r3, #1
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	3b01      	subs	r3, #1
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1dd      	bne.n	8005cea <USB_WritePMA+0x3a>
  }
}
 8005d2e:	bf00      	nop
 8005d30:	bf00      	nop
 8005d32:	3734      	adds	r7, #52	; 0x34
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b08b      	sub	sp, #44	; 0x2c
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	4611      	mov	r1, r2
 8005d46:	461a      	mov	r2, r3
 8005d48:	460b      	mov	r3, r1
 8005d4a:	80fb      	strh	r3, [r7, #6]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005d50:	88bb      	ldrh	r3, [r7, #4]
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	005a      	lsls	r2, r3, #1
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
 8005d72:	e01b      	b.n	8005dac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	3302      	adds	r3, #2
 8005d80:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	3302      	adds	r3, #2
 8005da4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	3b01      	subs	r3, #1
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e0      	bne.n	8005d74 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005db2:	88bb      	ldrh	r3, [r7, #4]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	701a      	strb	r2, [r3, #0]
  }
}
 8005dce:	bf00      	nop
 8005dd0:	372c      	adds	r7, #44	; 0x2c
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr

08005dd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	7c1b      	ldrb	r3, [r3, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d115      	bne.n	8005e1c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005df4:	2202      	movs	r2, #2
 8005df6:	2181      	movs	r1, #129	; 0x81
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f003 fc3a 	bl	8009672 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e08:	2202      	movs	r2, #2
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f003 fc30 	bl	8009672 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005e1a:	e012      	b.n	8005e42 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e1c:	2340      	movs	r3, #64	; 0x40
 8005e1e:	2202      	movs	r2, #2
 8005e20:	2181      	movs	r1, #129	; 0x81
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f003 fc25 	bl	8009672 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e2e:	2340      	movs	r3, #64	; 0x40
 8005e30:	2202      	movs	r2, #2
 8005e32:	2101      	movs	r1, #1
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f003 fc1c 	bl	8009672 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e42:	2308      	movs	r3, #8
 8005e44:	2203      	movs	r2, #3
 8005e46:	2182      	movs	r1, #130	; 0x82
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f003 fc12 	bl	8009672 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e58:	f003 fd32 	bl	80098c0 <USBD_static_malloc>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	73fb      	strb	r3, [r7, #15]
 8005e72:	e026      	b.n	8005ec2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	7c1b      	ldrb	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f003 fcd2 	bl	8009854 <USBD_LL_PrepareReceive>
 8005eb0:	e007      	b.n	8005ec2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eb8:	2340      	movs	r3, #64	; 0x40
 8005eba:	2101      	movs	r1, #1
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f003 fcc9 	bl	8009854 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005edc:	2181      	movs	r1, #129	; 0x81
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f003 fbed 	bl	80096be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005eea:	2101      	movs	r1, #1
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f003 fbe6 	bl	80096be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005efa:	2182      	movs	r1, #130	; 0x82
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f003 fbde 	bl	80096be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00e      	beq.n	8005f30 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f22:	4618      	mov	r0, r3
 8005f24:	f003 fcd8 	bl	80098d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d039      	beq.n	8005fd8 <USBD_CDC_Setup+0x9e>
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d17f      	bne.n	8006068 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	88db      	ldrh	r3, [r3, #6]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d029      	beq.n	8005fc4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	b25b      	sxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	da11      	bge.n	8005f9e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005f86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	88d2      	ldrh	r2, [r2, #6]
 8005f8c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005f8e:	6939      	ldr	r1, [r7, #16]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	88db      	ldrh	r3, [r3, #6]
 8005f94:	461a      	mov	r2, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f001 fa09 	bl	80073ae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005f9c:	e06b      	b.n	8006076 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	785a      	ldrb	r2, [r3, #1]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	88db      	ldrh	r3, [r3, #6]
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005fb4:	6939      	ldr	r1, [r7, #16]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	88db      	ldrh	r3, [r3, #6]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fa24 	bl	800740a <USBD_CtlPrepareRx>
      break;
 8005fc2:	e058      	b.n	8006076 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	7850      	ldrb	r0, [r2, #1]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	4798      	blx	r3
      break;
 8005fd6:	e04e      	b.n	8006076 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	2b0b      	cmp	r3, #11
 8005fde:	d02e      	beq.n	800603e <USBD_CDC_Setup+0x104>
 8005fe0:	2b0b      	cmp	r3, #11
 8005fe2:	dc38      	bgt.n	8006056 <USBD_CDC_Setup+0x11c>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <USBD_CDC_Setup+0xb4>
 8005fe8:	2b0a      	cmp	r3, #10
 8005fea:	d014      	beq.n	8006016 <USBD_CDC_Setup+0xdc>
 8005fec:	e033      	b.n	8006056 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d107      	bne.n	8006008 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005ff8:	f107 030c 	add.w	r3, r7, #12
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 f9d4 	bl	80073ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006006:	e02e      	b.n	8006066 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f001 f965 	bl	80072da <USBD_CtlError>
            ret = USBD_FAIL;
 8006010:	2302      	movs	r3, #2
 8006012:	75fb      	strb	r3, [r7, #23]
          break;
 8006014:	e027      	b.n	8006066 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601c:	2b03      	cmp	r3, #3
 800601e:	d107      	bne.n	8006030 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006020:	f107 030f 	add.w	r3, r7, #15
 8006024:	2201      	movs	r2, #1
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 f9c0 	bl	80073ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800602e:	e01a      	b.n	8006066 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f001 f951 	bl	80072da <USBD_CtlError>
            ret = USBD_FAIL;
 8006038:	2302      	movs	r3, #2
 800603a:	75fb      	strb	r3, [r7, #23]
          break;
 800603c:	e013      	b.n	8006066 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006044:	2b03      	cmp	r3, #3
 8006046:	d00d      	beq.n	8006064 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f001 f945 	bl	80072da <USBD_CtlError>
            ret = USBD_FAIL;
 8006050:	2302      	movs	r3, #2
 8006052:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006054:	e006      	b.n	8006064 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 f93e 	bl	80072da <USBD_CtlError>
          ret = USBD_FAIL;
 800605e:	2302      	movs	r3, #2
 8006060:	75fb      	strb	r3, [r7, #23]
          break;
 8006062:	e000      	b.n	8006066 <USBD_CDC_Setup+0x12c>
          break;
 8006064:	bf00      	nop
      }
      break;
 8006066:	e006      	b.n	8006076 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f001 f935 	bl	80072da <USBD_CtlError>
      ret = USBD_FAIL;
 8006070:	2302      	movs	r3, #2
 8006072:	75fb      	strb	r3, [r7, #23]
      break;
 8006074:	bf00      	nop
  }

  return ret;
 8006076:	7dfb      	ldrb	r3, [r7, #23]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006092:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800609a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d03a      	beq.n	800611c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	331c      	adds	r3, #28
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d029      	beq.n	8006110 <USBD_CDC_DataIn+0x90>
 80060bc:	78fa      	ldrb	r2, [r7, #3]
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	331c      	adds	r3, #28
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	78f9      	ldrb	r1, [r7, #3]
 80060d0:	68b8      	ldr	r0, [r7, #8]
 80060d2:	460b      	mov	r3, r1
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	4403      	add	r3, r0
 80060dc:	3338      	adds	r3, #56	; 0x38
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80060e4:	fb03 f301 	mul.w	r3, r3, r1
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d110      	bne.n	8006110 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	331c      	adds	r3, #28
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006102:	78f9      	ldrb	r1, [r7, #3]
 8006104:	2300      	movs	r3, #0
 8006106:	2200      	movs	r2, #0
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f003 fb80 	bl	800980e <USBD_LL_Transmit>
 800610e:	e003      	b.n	8006118 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	460b      	mov	r3, r1
 8006130:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006138:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f003 fbab 	bl	800989a <USBD_LL_GetRxDataSize>
 8006144:	4602      	mov	r2, r0
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00d      	beq.n	8006172 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800616a:	4611      	mov	r1, r2
 800616c:	4798      	blx	r3

    return USBD_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	e000      	b.n	8006174 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006172:	2302      	movs	r3, #2
  }
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006192:	2b00      	cmp	r3, #0
 8006194:	d015      	beq.n	80061c2 <USBD_CDC_EP0_RxReady+0x46>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800619c:	2bff      	cmp	r3, #255	; 0xff
 800619e:	d010      	beq.n	80061c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80061ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061b6:	b292      	uxth	r2, r2
 80061b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	22ff      	movs	r2, #255	; 0xff
 80061be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2243      	movs	r2, #67	; 0x43
 80061d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80061da:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	20000094 	.word	0x20000094

080061ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2243      	movs	r2, #67	; 0x43
 80061f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80061fa:	4b03      	ldr	r3, [pc, #12]	; (8006208 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	20000050 	.word	0x20000050

0800620c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2243      	movs	r2, #67	; 0x43
 8006218:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800621a:	4b03      	ldr	r3, [pc, #12]	; (8006228 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	200000d8 	.word	0x200000d8

0800622c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	220a      	movs	r2, #10
 8006238:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800623a:	4b03      	ldr	r3, [pc, #12]	; (8006248 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	2000000c 	.word	0x2000000c

0800624c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006256:	2302      	movs	r3, #2
 8006258:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	bc80      	pop	{r7}
 8006276:	4770      	bx	lr

08006278 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	4613      	mov	r3, r2
 8006284:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01c      	beq.n	8006324 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d115      	bne.n	8006320 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006312:	b29b      	uxth	r3, r3
 8006314:	2181      	movs	r1, #129	; 0x81
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f003 fa79 	bl	800980e <USBD_LL_Transmit>

      return USBD_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	e002      	b.n	8006326 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006324:	2302      	movs	r3, #2
  }
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d017      	beq.n	8006378 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	7c1b      	ldrb	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d109      	bne.n	8006364 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800635a:	2101      	movs	r1, #1
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f003 fa79 	bl	8009854 <USBD_LL_PrepareReceive>
 8006362:	e007      	b.n	8006374 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800636a:	2340      	movs	r3, #64	; 0x40
 800636c:	2101      	movs	r1, #1
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f003 fa70 	bl	8009854 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	e000      	b.n	800637a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006378:	2302      	movs	r3, #2
  }
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	4613      	mov	r3, r2
 800638e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006396:	2302      	movs	r3, #2
 8006398:	e01a      	b.n	80063d0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	79fa      	ldrb	r2, [r7, #7]
 80063c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f003 f8dd 	bl	8009588 <USBD_LL_Init>

  return USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d006      	beq.n	80063fa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	73fb      	strb	r3, [r7, #15]
 80063f8:	e001      	b.n	80063fe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80063fa:	2302      	movs	r3, #2
 80063fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f003 f912 	bl	800963c <USBD_LL_Start>

  return USBD_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr

08006436 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	460b      	mov	r3, r1
 8006440:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006442:	2302      	movs	r3, #2
 8006444:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00c      	beq.n	800646a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	4611      	mov	r1, r2
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	4798      	blx	r3
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	78fa      	ldrb	r2, [r7, #3]
 800648a:	4611      	mov	r1, r2
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3

  return USBD_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fed8 	bl	8007262 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064c0:	461a      	mov	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d016      	beq.n	8006504 <USBD_LL_SetupStage+0x6a>
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d81c      	bhi.n	8006514 <USBD_LL_SetupStage+0x7a>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <USBD_LL_SetupStage+0x4a>
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d008      	beq.n	80064f4 <USBD_LL_SetupStage+0x5a>
 80064e2:	e017      	b.n	8006514 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f9cb 	bl	8006888 <USBD_StdDevReq>
      break;
 80064f2:	e01a      	b.n	800652a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa2d 	bl	800695c <USBD_StdItfReq>
      break;
 8006502:	e012      	b.n	800652a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fa6d 	bl	80069ec <USBD_StdEPReq>
      break;
 8006512:	e00a      	b.n	800652a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800651a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800651e:	b2db      	uxtb	r3, r3
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f003 f8ea 	bl	80096fc <USBD_LL_StallEP>
      break;
 8006528:	bf00      	nop
  }

  return USBD_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	460b      	mov	r3, r1
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d14b      	bne.n	80065e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800654e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006556:	2b03      	cmp	r3, #3
 8006558:	d134      	bne.n	80065c4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	429a      	cmp	r2, r3
 8006564:	d919      	bls.n	800659a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	1ad2      	subs	r2, r2, r3
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800657c:	429a      	cmp	r2, r3
 800657e:	d203      	bcs.n	8006588 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006584:	b29b      	uxth	r3, r3
 8006586:	e002      	b.n	800658e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800658c:	b29b      	uxth	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 ff57 	bl	8007446 <USBD_CtlContinueRx>
 8006598:	e038      	b.n	800660c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d105      	bne.n	80065bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 ff54 	bl	800746a <USBD_CtlSendStatus>
 80065c2:	e023      	b.n	800660c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d11e      	bne.n	800660c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80065d6:	2100      	movs	r1, #0
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f003 f88f 	bl	80096fc <USBD_LL_StallEP>
 80065de:	e015      	b.n	800660c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00d      	beq.n	8006608 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d108      	bne.n	8006608 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	7afa      	ldrb	r2, [r7, #11]
 8006600:	4611      	mov	r1, r2
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	4798      	blx	r3
 8006606:	e001      	b.n	800660c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006608:	2302      	movs	r3, #2
 800660a:	e000      	b.n	800660e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b086      	sub	sp, #24
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	460b      	mov	r3, r1
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006624:	7afb      	ldrb	r3, [r7, #11]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d17f      	bne.n	800672a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3314      	adds	r3, #20
 800662e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006636:	2b02      	cmp	r3, #2
 8006638:	d15c      	bne.n	80066f4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	429a      	cmp	r2, r3
 8006644:	d915      	bls.n	8006672 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	b29b      	uxth	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 fec1 	bl	80073e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006664:	2300      	movs	r3, #0
 8006666:	2200      	movs	r2, #0
 8006668:	2100      	movs	r1, #0
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f003 f8f2 	bl	8009854 <USBD_LL_PrepareReceive>
 8006670:	e04e      	b.n	8006710 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	6912      	ldr	r2, [r2, #16]
 800667a:	fbb3 f1f2 	udiv	r1, r3, r2
 800667e:	fb02 f201 	mul.w	r2, r2, r1
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11c      	bne.n	80066c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006690:	429a      	cmp	r2, r3
 8006692:	d316      	bcc.n	80066c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800669e:	429a      	cmp	r2, r3
 80066a0:	d20f      	bcs.n	80066c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066a2:	2200      	movs	r2, #0
 80066a4:	2100      	movs	r1, #0
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 fe9d 	bl	80073e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066b4:	2300      	movs	r3, #0
 80066b6:	2200      	movs	r2, #0
 80066b8:	2100      	movs	r1, #0
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f003 f8ca 	bl	8009854 <USBD_LL_PrepareReceive>
 80066c0:	e026      	b.n	8006710 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d105      	bne.n	80066e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80066e4:	2180      	movs	r1, #128	; 0x80
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f003 f808 	bl	80096fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 fecf 	bl	8007490 <USBD_CtlReceiveStatus>
 80066f2:	e00d      	b.n	8006710 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d004      	beq.n	8006708 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006708:	2180      	movs	r1, #128	; 0x80
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f002 fff6 	bl	80096fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006716:	2b01      	cmp	r3, #1
 8006718:	d11d      	bne.n	8006756 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f7ff fe81 	bl	8006422 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006728:	e015      	b.n	8006756 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00d      	beq.n	8006752 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800673c:	2b03      	cmp	r3, #3
 800673e:	d108      	bne.n	8006752 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	7afa      	ldrb	r2, [r7, #11]
 800674a:	4611      	mov	r1, r2
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	4798      	blx	r3
 8006750:	e001      	b.n	8006756 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006752:	2302      	movs	r3, #2
 8006754:	e000      	b.n	8006758 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006768:	2340      	movs	r3, #64	; 0x40
 800676a:	2200      	movs	r2, #0
 800676c:	2100      	movs	r1, #0
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f002 ff7f 	bl	8009672 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2240      	movs	r2, #64	; 0x40
 8006780:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006784:	2340      	movs	r3, #64	; 0x40
 8006786:	2200      	movs	r2, #0
 8006788:	2180      	movs	r1, #128	; 0x80
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f002 ff71 	bl	8009672 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2240      	movs	r2, #64	; 0x40
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6852      	ldr	r2, [r2, #4]
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	4611      	mov	r1, r2
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
  }

  return USBD_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	78fa      	ldrb	r2, [r7, #3]
 80067f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2204      	movs	r2, #4
 8006818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006836:	2b04      	cmp	r3, #4
 8006838:	d105      	bne.n	8006846 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr

08006852 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b082      	sub	sp, #8
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006860:	2b03      	cmp	r3, #3
 8006862:	d10b      	bne.n	800687c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d005      	beq.n	800687c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d005      	beq.n	80068ae <USBD_StdDevReq+0x26>
 80068a2:	2b40      	cmp	r3, #64	; 0x40
 80068a4:	d84f      	bhi.n	8006946 <USBD_StdDevReq+0xbe>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d009      	beq.n	80068be <USBD_StdDevReq+0x36>
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d14b      	bne.n	8006946 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
      break;
 80068bc:	e048      	b.n	8006950 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	2b09      	cmp	r3, #9
 80068c4:	d839      	bhi.n	800693a <USBD_StdDevReq+0xb2>
 80068c6:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <USBD_StdDevReq+0x44>)
 80068c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068cc:	0800691d 	.word	0x0800691d
 80068d0:	08006931 	.word	0x08006931
 80068d4:	0800693b 	.word	0x0800693b
 80068d8:	08006927 	.word	0x08006927
 80068dc:	0800693b 	.word	0x0800693b
 80068e0:	080068ff 	.word	0x080068ff
 80068e4:	080068f5 	.word	0x080068f5
 80068e8:	0800693b 	.word	0x0800693b
 80068ec:	08006913 	.word	0x08006913
 80068f0:	08006909 	.word	0x08006909
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f9dc 	bl	8006cb4 <USBD_GetDescriptor>
          break;
 80068fc:	e022      	b.n	8006944 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fb3f 	bl	8006f84 <USBD_SetAddress>
          break;
 8006906:	e01d      	b.n	8006944 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fb7e 	bl	800700c <USBD_SetConfig>
          break;
 8006910:	e018      	b.n	8006944 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fc07 	bl	8007128 <USBD_GetConfig>
          break;
 800691a:	e013      	b.n	8006944 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fc37 	bl	8007192 <USBD_GetStatus>
          break;
 8006924:	e00e      	b.n	8006944 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fc65 	bl	80071f8 <USBD_SetFeature>
          break;
 800692e:	e009      	b.n	8006944 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fc74 	bl	8007220 <USBD_ClrFeature>
          break;
 8006938:	e004      	b.n	8006944 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fccc 	bl	80072da <USBD_CtlError>
          break;
 8006942:	bf00      	nop
      }
      break;
 8006944:	e004      	b.n	8006950 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fcc6 	bl	80072da <USBD_CtlError>
      break;
 800694e:	bf00      	nop
  }

  return ret;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop

0800695c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006972:	2b40      	cmp	r3, #64	; 0x40
 8006974:	d005      	beq.n	8006982 <USBD_StdItfReq+0x26>
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d82e      	bhi.n	80069d8 <USBD_StdItfReq+0x7c>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <USBD_StdItfReq+0x26>
 800697e:	2b20      	cmp	r3, #32
 8006980:	d12a      	bne.n	80069d8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006988:	3b01      	subs	r3, #1
 800698a:	2b02      	cmp	r3, #2
 800698c:	d81d      	bhi.n	80069ca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	889b      	ldrh	r3, [r3, #4]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d813      	bhi.n	80069c0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	88db      	ldrh	r3, [r3, #6]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d110      	bne.n	80069d4 <USBD_StdItfReq+0x78>
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10d      	bne.n	80069d4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fd56 	bl	800746a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069be:	e009      	b.n	80069d4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fc89 	bl	80072da <USBD_CtlError>
          break;
 80069c8:	e004      	b.n	80069d4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fc84 	bl	80072da <USBD_CtlError>
          break;
 80069d2:	e000      	b.n	80069d6 <USBD_StdItfReq+0x7a>
          break;
 80069d4:	bf00      	nop
      }
      break;
 80069d6:	e004      	b.n	80069e2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fc7d 	bl	80072da <USBD_CtlError>
      break;
 80069e0:	bf00      	nop
  }

  return USBD_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	889b      	ldrh	r3, [r3, #4]
 80069fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d007      	beq.n	8006a1c <USBD_StdEPReq+0x30>
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	f200 8146 	bhi.w	8006c9e <USBD_StdEPReq+0x2b2>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <USBD_StdEPReq+0x40>
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	f040 8141 	bne.w	8006c9e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	4798      	blx	r3
      break;
 8006a2a:	e13d      	b.n	8006ca8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d10a      	bne.n	8006a4e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	4798      	blx	r3
 8006a46:	4603      	mov	r3, r0
 8006a48:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	e12d      	b.n	8006caa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d007      	beq.n	8006a66 <USBD_StdEPReq+0x7a>
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	f300 811b 	bgt.w	8006c92 <USBD_StdEPReq+0x2a6>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d072      	beq.n	8006b46 <USBD_StdEPReq+0x15a>
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d03a      	beq.n	8006ada <USBD_StdEPReq+0xee>
 8006a64:	e115      	b.n	8006c92 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d002      	beq.n	8006a76 <USBD_StdEPReq+0x8a>
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d015      	beq.n	8006aa0 <USBD_StdEPReq+0xb4>
 8006a74:	e02b      	b.n	8006ace <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a76:	7bbb      	ldrb	r3, [r7, #14]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00c      	beq.n	8006a96 <USBD_StdEPReq+0xaa>
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	2b80      	cmp	r3, #128	; 0x80
 8006a80:	d009      	beq.n	8006a96 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006a82:	7bbb      	ldrb	r3, [r7, #14]
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f002 fe38 	bl	80096fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006a8c:	2180      	movs	r1, #128	; 0x80
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f002 fe34 	bl	80096fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a94:	e020      	b.n	8006ad8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fc1e 	bl	80072da <USBD_CtlError>
              break;
 8006a9e:	e01b      	b.n	8006ad8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	885b      	ldrh	r3, [r3, #2]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10e      	bne.n	8006ac6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00b      	beq.n	8006ac6 <USBD_StdEPReq+0xda>
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b80      	cmp	r3, #128	; 0x80
 8006ab2:	d008      	beq.n	8006ac6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	88db      	ldrh	r3, [r3, #6]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f002 fe1b 	bl	80096fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fccf 	bl	800746a <USBD_CtlSendStatus>

              break;
 8006acc:	e004      	b.n	8006ad8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fc02 	bl	80072da <USBD_CtlError>
              break;
 8006ad6:	bf00      	nop
          }
          break;
 8006ad8:	e0e0      	b.n	8006c9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d002      	beq.n	8006aea <USBD_StdEPReq+0xfe>
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d015      	beq.n	8006b14 <USBD_StdEPReq+0x128>
 8006ae8:	e026      	b.n	8006b38 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00c      	beq.n	8006b0a <USBD_StdEPReq+0x11e>
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	2b80      	cmp	r3, #128	; 0x80
 8006af4:	d009      	beq.n	8006b0a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f002 fdfe 	bl	80096fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b00:	2180      	movs	r1, #128	; 0x80
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f002 fdfa 	bl	80096fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b08:	e01c      	b.n	8006b44 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fbe4 	bl	80072da <USBD_CtlError>
              break;
 8006b12:	e017      	b.n	8006b44 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	885b      	ldrh	r3, [r3, #2]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d112      	bne.n	8006b42 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f002 fe05 	bl	800973a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fc9a 	bl	800746a <USBD_CtlSendStatus>
              }
              break;
 8006b36:	e004      	b.n	8006b42 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fbcd 	bl	80072da <USBD_CtlError>
              break;
 8006b40:	e000      	b.n	8006b44 <USBD_StdEPReq+0x158>
              break;
 8006b42:	bf00      	nop
          }
          break;
 8006b44:	e0aa      	b.n	8006c9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d002      	beq.n	8006b56 <USBD_StdEPReq+0x16a>
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d032      	beq.n	8006bba <USBD_StdEPReq+0x1ce>
 8006b54:	e097      	b.n	8006c86 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d007      	beq.n	8006b6c <USBD_StdEPReq+0x180>
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b80      	cmp	r3, #128	; 0x80
 8006b60:	d004      	beq.n	8006b6c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fbb8 	bl	80072da <USBD_CtlError>
                break;
 8006b6a:	e091      	b.n	8006c90 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	da0b      	bge.n	8006b8c <USBD_StdEPReq+0x1a0>
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	3310      	adds	r3, #16
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	4413      	add	r3, r2
 8006b88:	3304      	adds	r3, #4
 8006b8a:	e00b      	b.n	8006ba4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fbfb 	bl	80073ae <USBD_CtlSendData>
              break;
 8006bb8:	e06a      	b.n	8006c90 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006bba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	da11      	bge.n	8006be6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	f003 020f 	and.w	r2, r3, #15
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	3318      	adds	r3, #24
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d117      	bne.n	8006c0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fb7b 	bl	80072da <USBD_CtlError>
                  break;
 8006be4:	e054      	b.n	8006c90 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	f003 020f 	and.w	r2, r3, #15
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d104      	bne.n	8006c0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fb68 	bl	80072da <USBD_CtlError>
                  break;
 8006c0a:	e041      	b.n	8006c90 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	da0b      	bge.n	8006c2c <USBD_StdEPReq+0x240>
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	3310      	adds	r3, #16
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4413      	add	r3, r2
 8006c28:	3304      	adds	r3, #4
 8006c2a:	e00b      	b.n	8006c44 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	4413      	add	r3, r2
 8006c42:	3304      	adds	r3, #4
 8006c44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <USBD_StdEPReq+0x266>
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	2b80      	cmp	r3, #128	; 0x80
 8006c50:	d103      	bne.n	8006c5a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	e00e      	b.n	8006c78 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f002 fd8a 	bl	8009778 <USBD_LL_IsStallEP>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	e002      	b.n	8006c78 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fb95 	bl	80073ae <USBD_CtlSendData>
              break;
 8006c84:	e004      	b.n	8006c90 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fb26 	bl	80072da <USBD_CtlError>
              break;
 8006c8e:	bf00      	nop
          }
          break;
 8006c90:	e004      	b.n	8006c9c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fb20 	bl	80072da <USBD_CtlError>
          break;
 8006c9a:	bf00      	nop
      }
      break;
 8006c9c:	e004      	b.n	8006ca8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fb1a 	bl	80072da <USBD_CtlError>
      break;
 8006ca6:	bf00      	nop
  }

  return ret;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	885b      	ldrh	r3, [r3, #2]
 8006cce:	0a1b      	lsrs	r3, r3, #8
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	2b06      	cmp	r3, #6
 8006cd6:	f200 8128 	bhi.w	8006f2a <USBD_GetDescriptor+0x276>
 8006cda:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <USBD_GetDescriptor+0x2c>)
 8006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce0:	08006cfd 	.word	0x08006cfd
 8006ce4:	08006d15 	.word	0x08006d15
 8006ce8:	08006d55 	.word	0x08006d55
 8006cec:	08006f2b 	.word	0x08006f2b
 8006cf0:	08006f2b 	.word	0x08006f2b
 8006cf4:	08006ecb 	.word	0x08006ecb
 8006cf8:	08006ef7 	.word	0x08006ef7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	7c12      	ldrb	r2, [r2, #16]
 8006d08:	f107 0108 	add.w	r1, r7, #8
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4798      	blx	r3
 8006d10:	60f8      	str	r0, [r7, #12]
      break;
 8006d12:	e112      	b.n	8006f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	7c1b      	ldrb	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	f107 0208 	add.w	r2, r7, #8
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
 8006d2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3301      	adds	r3, #1
 8006d32:	2202      	movs	r2, #2
 8006d34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d36:	e100      	b.n	8006f3a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	f107 0208 	add.w	r2, r7, #8
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	2202      	movs	r2, #2
 8006d50:	701a      	strb	r2, [r3, #0]
      break;
 8006d52:	e0f2      	b.n	8006f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	885b      	ldrh	r3, [r3, #2]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b05      	cmp	r3, #5
 8006d5c:	f200 80ac 	bhi.w	8006eb8 <USBD_GetDescriptor+0x204>
 8006d60:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <USBD_GetDescriptor+0xb4>)
 8006d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d66:	bf00      	nop
 8006d68:	08006d81 	.word	0x08006d81
 8006d6c:	08006db5 	.word	0x08006db5
 8006d70:	08006de9 	.word	0x08006de9
 8006d74:	08006e1d 	.word	0x08006e1d
 8006d78:	08006e51 	.word	0x08006e51
 8006d7c:	08006e85 	.word	0x08006e85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00b      	beq.n	8006da4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	7c12      	ldrb	r2, [r2, #16]
 8006d98:	f107 0108 	add.w	r1, r7, #8
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
 8006da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006da2:	e091      	b.n	8006ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa97 	bl	80072da <USBD_CtlError>
            err++;
 8006dac:	7afb      	ldrb	r3, [r7, #11]
 8006dae:	3301      	adds	r3, #1
 8006db0:	72fb      	strb	r3, [r7, #11]
          break;
 8006db2:	e089      	b.n	8006ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00b      	beq.n	8006dd8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	7c12      	ldrb	r2, [r2, #16]
 8006dcc:	f107 0108 	add.w	r1, r7, #8
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
 8006dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dd6:	e077      	b.n	8006ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa7d 	bl	80072da <USBD_CtlError>
            err++;
 8006de0:	7afb      	ldrb	r3, [r7, #11]
 8006de2:	3301      	adds	r3, #1
 8006de4:	72fb      	strb	r3, [r7, #11]
          break;
 8006de6:	e06f      	b.n	8006ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	7c12      	ldrb	r2, [r2, #16]
 8006e00:	f107 0108 	add.w	r1, r7, #8
 8006e04:	4610      	mov	r0, r2
 8006e06:	4798      	blx	r3
 8006e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e0a:	e05d      	b.n	8006ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa63 	bl	80072da <USBD_CtlError>
            err++;
 8006e14:	7afb      	ldrb	r3, [r7, #11]
 8006e16:	3301      	adds	r3, #1
 8006e18:	72fb      	strb	r3, [r7, #11]
          break;
 8006e1a:	e055      	b.n	8006ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	7c12      	ldrb	r2, [r2, #16]
 8006e34:	f107 0108 	add.w	r1, r7, #8
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4798      	blx	r3
 8006e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e3e:	e043      	b.n	8006ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa49 	bl	80072da <USBD_CtlError>
            err++;
 8006e48:	7afb      	ldrb	r3, [r7, #11]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e4e:	e03b      	b.n	8006ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00b      	beq.n	8006e74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	7c12      	ldrb	r2, [r2, #16]
 8006e68:	f107 0108 	add.w	r1, r7, #8
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e72:	e029      	b.n	8006ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa2f 	bl	80072da <USBD_CtlError>
            err++;
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	72fb      	strb	r3, [r7, #11]
          break;
 8006e82:	e021      	b.n	8006ec8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7c12      	ldrb	r2, [r2, #16]
 8006e9c:	f107 0108 	add.w	r1, r7, #8
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4798      	blx	r3
 8006ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ea6:	e00f      	b.n	8006ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa15 	bl	80072da <USBD_CtlError>
            err++;
 8006eb0:	7afb      	ldrb	r3, [r7, #11]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006eb6:	e007      	b.n	8006ec8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa0d 	bl	80072da <USBD_CtlError>
          err++;
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006ec6:	e038      	b.n	8006f3a <USBD_GetDescriptor+0x286>
 8006ec8:	e037      	b.n	8006f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	7c1b      	ldrb	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eda:	f107 0208 	add.w	r2, r7, #8
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4798      	blx	r3
 8006ee2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ee4:	e029      	b.n	8006f3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f9f6 	bl	80072da <USBD_CtlError>
        err++;
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ef4:	e021      	b.n	8006f3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7c1b      	ldrb	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10d      	bne.n	8006f1a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	f107 0208 	add.w	r2, r7, #8
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	4798      	blx	r3
 8006f0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3301      	adds	r3, #1
 8006f14:	2207      	movs	r2, #7
 8006f16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f18:	e00f      	b.n	8006f3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f9dc 	bl	80072da <USBD_CtlError>
        err++;
 8006f22:	7afb      	ldrb	r3, [r7, #11]
 8006f24:	3301      	adds	r3, #1
 8006f26:	72fb      	strb	r3, [r7, #11]
      break;
 8006f28:	e007      	b.n	8006f3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f9d4 	bl	80072da <USBD_CtlError>
      err++;
 8006f32:	7afb      	ldrb	r3, [r7, #11]
 8006f34:	3301      	adds	r3, #1
 8006f36:	72fb      	strb	r3, [r7, #11]
      break;
 8006f38:	bf00      	nop
  }

  if (err != 0U)
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11c      	bne.n	8006f7a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006f40:	893b      	ldrh	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d011      	beq.n	8006f6a <USBD_GetDescriptor+0x2b6>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	88db      	ldrh	r3, [r3, #6]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00d      	beq.n	8006f6a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	88da      	ldrh	r2, [r3, #6]
 8006f52:	893b      	ldrh	r3, [r7, #8]
 8006f54:	4293      	cmp	r3, r2
 8006f56:	bf28      	it	cs
 8006f58:	4613      	movcs	r3, r2
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f5e:	893b      	ldrh	r3, [r7, #8]
 8006f60:	461a      	mov	r2, r3
 8006f62:	68f9      	ldr	r1, [r7, #12]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fa22 	bl	80073ae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	88db      	ldrh	r3, [r3, #6]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d104      	bne.n	8006f7c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa79 	bl	800746a <USBD_CtlSendStatus>
 8006f78:	e000      	b.n	8006f7c <USBD_GetDescriptor+0x2c8>
    return;
 8006f7a:	bf00      	nop
    }
  }
}
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop

08006f84 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	889b      	ldrh	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d130      	bne.n	8006ff8 <USBD_SetAddress+0x74>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	88db      	ldrh	r3, [r3, #6]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d12c      	bne.n	8006ff8 <USBD_SetAddress+0x74>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	885b      	ldrh	r3, [r3, #2]
 8006fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8006fa4:	d828      	bhi.n	8006ff8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	885b      	ldrh	r3, [r3, #2]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d104      	bne.n	8006fc6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f98b 	bl	80072da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc4:	e01d      	b.n	8007002 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7bfa      	ldrb	r2, [r7, #15]
 8006fca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f002 fbfc 	bl	80097d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fa46 	bl	800746a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fec:	e009      	b.n	8007002 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff6:	e004      	b.n	8007002 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f96d 	bl	80072da <USBD_CtlError>
  }
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	885b      	ldrh	r3, [r3, #2]
 800701a:	b2da      	uxtb	r2, r3
 800701c:	4b41      	ldr	r3, [pc, #260]	; (8007124 <USBD_SetConfig+0x118>)
 800701e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007020:	4b40      	ldr	r3, [pc, #256]	; (8007124 <USBD_SetConfig+0x118>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d904      	bls.n	8007032 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f955 	bl	80072da <USBD_CtlError>
 8007030:	e075      	b.n	800711e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007038:	2b02      	cmp	r3, #2
 800703a:	d002      	beq.n	8007042 <USBD_SetConfig+0x36>
 800703c:	2b03      	cmp	r3, #3
 800703e:	d023      	beq.n	8007088 <USBD_SetConfig+0x7c>
 8007040:	e062      	b.n	8007108 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007042:	4b38      	ldr	r3, [pc, #224]	; (8007124 <USBD_SetConfig+0x118>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01a      	beq.n	8007080 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800704a:	4b36      	ldr	r3, [pc, #216]	; (8007124 <USBD_SetConfig+0x118>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2203      	movs	r2, #3
 8007058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800705c:	4b31      	ldr	r3, [pc, #196]	; (8007124 <USBD_SetConfig+0x118>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff f9e7 	bl	8006436 <USBD_SetClassConfig>
 8007068:	4603      	mov	r3, r0
 800706a:	2b02      	cmp	r3, #2
 800706c:	d104      	bne.n	8007078 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f932 	bl	80072da <USBD_CtlError>
            return;
 8007076:	e052      	b.n	800711e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f9f6 	bl	800746a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800707e:	e04e      	b.n	800711e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f9f2 	bl	800746a <USBD_CtlSendStatus>
        break;
 8007086:	e04a      	b.n	800711e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007088:	4b26      	ldr	r3, [pc, #152]	; (8007124 <USBD_SetConfig+0x118>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d112      	bne.n	80070b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007098:	4b22      	ldr	r3, [pc, #136]	; (8007124 <USBD_SetConfig+0x118>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80070a2:	4b20      	ldr	r3, [pc, #128]	; (8007124 <USBD_SetConfig+0x118>)
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff f9e3 	bl	8006474 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f9db 	bl	800746a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80070b4:	e033      	b.n	800711e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80070b6:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <USBD_SetConfig+0x118>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d01d      	beq.n	8007100 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff f9d1 	bl	8006474 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80070d2:	4b14      	ldr	r3, [pc, #80]	; (8007124 <USBD_SetConfig+0x118>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070dc:	4b11      	ldr	r3, [pc, #68]	; (8007124 <USBD_SetConfig+0x118>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff f9a7 	bl	8006436 <USBD_SetClassConfig>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d104      	bne.n	80070f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f8f2 	bl	80072da <USBD_CtlError>
            return;
 80070f6:	e012      	b.n	800711e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f9b6 	bl	800746a <USBD_CtlSendStatus>
        break;
 80070fe:	e00e      	b.n	800711e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f9b2 	bl	800746a <USBD_CtlSendStatus>
        break;
 8007106:	e00a      	b.n	800711e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f8e5 	bl	80072da <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007110:	4b04      	ldr	r3, [pc, #16]	; (8007124 <USBD_SetConfig+0x118>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff f9ac 	bl	8006474 <USBD_ClrClassConfig>
        break;
 800711c:	bf00      	nop
    }
  }
}
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20000404 	.word	0x20000404

08007128 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	88db      	ldrh	r3, [r3, #6]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d004      	beq.n	8007144 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f8cc 	bl	80072da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007142:	e022      	b.n	800718a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714a:	2b02      	cmp	r3, #2
 800714c:	dc02      	bgt.n	8007154 <USBD_GetConfig+0x2c>
 800714e:	2b00      	cmp	r3, #0
 8007150:	dc03      	bgt.n	800715a <USBD_GetConfig+0x32>
 8007152:	e015      	b.n	8007180 <USBD_GetConfig+0x58>
 8007154:	2b03      	cmp	r3, #3
 8007156:	d00b      	beq.n	8007170 <USBD_GetConfig+0x48>
 8007158:	e012      	b.n	8007180 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3308      	adds	r3, #8
 8007164:	2201      	movs	r2, #1
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f920 	bl	80073ae <USBD_CtlSendData>
        break;
 800716e:	e00c      	b.n	800718a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3304      	adds	r3, #4
 8007174:	2201      	movs	r2, #1
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f918 	bl	80073ae <USBD_CtlSendData>
        break;
 800717e:	e004      	b.n	800718a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f8a9 	bl	80072da <USBD_CtlError>
        break;
 8007188:	bf00      	nop
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a2:	3b01      	subs	r3, #1
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d81e      	bhi.n	80071e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	88db      	ldrh	r3, [r3, #6]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d004      	beq.n	80071ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f891 	bl	80072da <USBD_CtlError>
        break;
 80071b8:	e01a      	b.n	80071f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d005      	beq.n	80071d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f043 0202 	orr.w	r2, r3, #2
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	330c      	adds	r3, #12
 80071da:	2202      	movs	r2, #2
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f8e5 	bl	80073ae <USBD_CtlSendData>
      break;
 80071e4:	e004      	b.n	80071f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f876 	bl	80072da <USBD_CtlError>
      break;
 80071ee:	bf00      	nop
  }
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d106      	bne.n	8007218 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f929 	bl	800746a <USBD_CtlSendStatus>
  }
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007230:	3b01      	subs	r3, #1
 8007232:	2b02      	cmp	r3, #2
 8007234:	d80b      	bhi.n	800724e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	885b      	ldrh	r3, [r3, #2]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d10c      	bne.n	8007258 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f90f 	bl	800746a <USBD_CtlSendStatus>
      }
      break;
 800724c:	e004      	b.n	8007258 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f842 	bl	80072da <USBD_CtlError>
      break;
 8007256:	e000      	b.n	800725a <USBD_ClrFeature+0x3a>
      break;
 8007258:	bf00      	nop
  }
}
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	785a      	ldrb	r2, [r3, #1]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	3302      	adds	r3, #2
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	b29a      	uxth	r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	3303      	adds	r3, #3
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	b29b      	uxth	r3, r3
 8007290:	4413      	add	r3, r2
 8007292:	b29a      	uxth	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	3304      	adds	r3, #4
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b29a      	uxth	r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	3305      	adds	r3, #5
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	4413      	add	r3, r2
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	3306      	adds	r3, #6
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	3307      	adds	r3, #7
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	021b      	lsls	r3, r3, #8
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	4413      	add	r3, r2
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	80da      	strh	r2, [r3, #6]

}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr

080072da <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80072e4:	2180      	movs	r1, #128	; 0x80
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f002 fa08 	bl	80096fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80072ec:	2100      	movs	r1, #0
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f002 fa04 	bl	80096fc <USBD_LL_StallEP>
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d032      	beq.n	8007378 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 f834 	bl	8007380 <USBD_GetLen>
 8007318:	4603      	mov	r3, r0
 800731a:	3301      	adds	r3, #1
 800731c:	b29b      	uxth	r3, r3
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	75fa      	strb	r2, [r7, #23]
 800732c:	461a      	mov	r2, r3
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	4413      	add	r3, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	7812      	ldrb	r2, [r2, #0]
 8007336:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	75fa      	strb	r2, [r7, #23]
 800733e:	461a      	mov	r2, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	4413      	add	r3, r2
 8007344:	2203      	movs	r2, #3
 8007346:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007348:	e012      	b.n	8007370 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	60fa      	str	r2, [r7, #12]
 8007350:	7dfa      	ldrb	r2, [r7, #23]
 8007352:	1c51      	adds	r1, r2, #1
 8007354:	75f9      	strb	r1, [r7, #23]
 8007356:	4611      	mov	r1, r2
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	440a      	add	r2, r1
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	75fa      	strb	r2, [r7, #23]
 8007366:	461a      	mov	r2, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4413      	add	r3, r2
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e8      	bne.n	800734a <USBD_GetString+0x4e>
    }
  }
}
 8007378:	bf00      	nop
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800738c:	e005      	b.n	800739a <USBD_GetLen+0x1a>
  {
    len++;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	3301      	adds	r3, #1
 8007392:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3301      	adds	r3, #1
 8007398:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f5      	bne.n	800738e <USBD_GetLen+0xe>
  }

  return len;
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr

080073ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	4613      	mov	r3, r2
 80073ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2202      	movs	r2, #2
 80073c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073c4:	88fa      	ldrh	r2, [r7, #6]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073d0:	88fb      	ldrh	r3, [r7, #6]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	2100      	movs	r1, #0
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f002 fa19 	bl	800980e <USBD_LL_Transmit>

  return USBD_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	4613      	mov	r3, r2
 80073f2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073f4:	88fb      	ldrh	r3, [r7, #6]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	2100      	movs	r1, #0
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f002 fa07 	bl	800980e <USBD_LL_Transmit>

  return USBD_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	4613      	mov	r3, r2
 8007416:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2203      	movs	r2, #3
 800741c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007420:	88fa      	ldrh	r2, [r7, #6]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007428:	88fa      	ldrh	r2, [r7, #6]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007430:	88fb      	ldrh	r3, [r7, #6]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	2100      	movs	r1, #0
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f002 fa0c 	bl	8009854 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	4613      	mov	r3, r2
 8007452:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	2100      	movs	r1, #0
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f002 f9fa 	bl	8009854 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2204      	movs	r2, #4
 8007476:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800747a:	2300      	movs	r3, #0
 800747c:	2200      	movs	r2, #0
 800747e:	2100      	movs	r1, #0
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f002 f9c4 	bl	800980e <USBD_LL_Transmit>

  return USBD_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2205      	movs	r2, #5
 800749c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074a0:	2300      	movs	r3, #0
 80074a2:	2200      	movs	r2, #0
 80074a4:	2100      	movs	r1, #0
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f002 f9d4 	bl	8009854 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	4603      	mov	r3, r0
 80074be:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80074c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074c8:	2b84      	cmp	r3, #132	; 0x84
 80074ca:	d005      	beq.n	80074d8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80074cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	3303      	adds	r3, #3
 80074d6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80074d8:	68fb      	ldr	r3, [r7, #12]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr

080074e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80074e8:	f000 fad0 	bl	8007a8c <vTaskStartScheduler>
  
  return osOK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80074f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f4:	b089      	sub	sp, #36	; 0x24
 80074f6:	af04      	add	r7, sp, #16
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d020      	beq.n	8007546 <osThreadCreate+0x54>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01c      	beq.n	8007546 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685c      	ldr	r4, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681d      	ldr	r5, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691e      	ldr	r6, [r3, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff ffc9 	bl	80074b6 <makeFreeRtosPriority>
 8007524:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800752e:	9202      	str	r2, [sp, #8]
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	9100      	str	r1, [sp, #0]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	4632      	mov	r2, r6
 8007538:	4629      	mov	r1, r5
 800753a:	4620      	mov	r0, r4
 800753c:	f000 f8e8 	bl	8007710 <xTaskCreateStatic>
 8007540:	4603      	mov	r3, r0
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e01c      	b.n	8007580 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685c      	ldr	r4, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007552:	b29e      	uxth	r6, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff ffab 	bl	80074b6 <makeFreeRtosPriority>
 8007560:	4602      	mov	r2, r0
 8007562:	f107 030c 	add.w	r3, r7, #12
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	9200      	str	r2, [sp, #0]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	4632      	mov	r2, r6
 800756e:	4629      	mov	r1, r5
 8007570:	4620      	mov	r0, r4
 8007572:	f000 f929 	bl	80077c8 <xTaskCreate>
 8007576:	4603      	mov	r3, r0
 8007578:	2b01      	cmp	r3, #1
 800757a:	d001      	beq.n	8007580 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800757c:	2300      	movs	r3, #0
 800757e:	e000      	b.n	8007582 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007580:	68fb      	ldr	r3, [r7, #12]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800758a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <osDelay+0x16>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	e000      	b.n	80075a2 <osDelay+0x18>
 80075a0:	2301      	movs	r3, #1
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fa3e 	bl	8007a24 <vTaskDelay>
  
  return osOK;
 80075a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f103 0208 	add.w	r2, r3, #8
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f103 0208 	add.w	r2, r3, #8
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f103 0208 	add.w	r2, r3, #8
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr

080075f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075fe:	bf00      	nop
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	bc80      	pop	{r7}
 8007606:	4770      	bx	lr

08007608 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	bc80      	pop	{r7}
 800764c:	4770      	bx	lr

0800764e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800764e:	b480      	push	{r7}
 8007650:	b085      	sub	sp, #20
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007664:	d103      	bne.n	800766e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	e00c      	b.n	8007688 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3308      	adds	r3, #8
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	e002      	b.n	800767c <vListInsert+0x2e>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	429a      	cmp	r2, r3
 8007686:	d2f6      	bcs.n	8007676 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	601a      	str	r2, [r3, #0]
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr

080076be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	6892      	ldr	r2, [r2, #8]
 80076d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6852      	ldr	r2, [r2, #4]
 80076de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d103      	bne.n	80076f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	1e5a      	subs	r2, r3, #1
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr

08007710 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08e      	sub	sp, #56	; 0x38
 8007714:	af04      	add	r7, sp, #16
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800771e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10a      	bne.n	800773a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10a      	bne.n	8007756 <xTaskCreateStatic+0x46>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	61fb      	str	r3, [r7, #28]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007756:	2354      	movs	r3, #84	; 0x54
 8007758:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2b54      	cmp	r3, #84	; 0x54
 800775e:	d00a      	beq.n	8007776 <xTaskCreateStatic+0x66>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	61bb      	str	r3, [r7, #24]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01e      	beq.n	80077ba <xTaskCreateStatic+0xaa>
 800777c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777e:	2b00      	cmp	r3, #0
 8007780:	d01b      	beq.n	80077ba <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800778a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	2202      	movs	r2, #2
 8007790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007794:	2300      	movs	r3, #0
 8007796:	9303      	str	r3, [sp, #12]
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	9302      	str	r3, [sp, #8]
 800779c:	f107 0314 	add.w	r3, r7, #20
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	68b9      	ldr	r1, [r7, #8]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f850 	bl	8007852 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077b4:	f000 f8cc 	bl	8007950 <prvAddNewTaskToReadyList>
 80077b8:	e001      	b.n	80077be <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80077be:	697b      	ldr	r3, [r7, #20]
	}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3728      	adds	r7, #40	; 0x28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08c      	sub	sp, #48	; 0x30
 80077cc:	af04      	add	r7, sp, #16
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	4613      	mov	r3, r2
 80077d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d8:	88fb      	ldrh	r3, [r7, #6]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fe67 	bl	80084b0 <pvPortMalloc>
 80077e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00e      	beq.n	8007808 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80077ea:	2054      	movs	r0, #84	; 0x54
 80077ec:	f000 fe60 	bl	80084b0 <pvPortMalloc>
 80077f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
 80077fe:	e005      	b.n	800780c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007800:	6978      	ldr	r0, [r7, #20]
 8007802:	f000 ff19 	bl	8008638 <vPortFree>
 8007806:	e001      	b.n	800780c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007808:	2300      	movs	r3, #0
 800780a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d017      	beq.n	8007842 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800781a:	88fa      	ldrh	r2, [r7, #6]
 800781c:	2300      	movs	r3, #0
 800781e:	9303      	str	r3, [sp, #12]
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	9302      	str	r3, [sp, #8]
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68b9      	ldr	r1, [r7, #8]
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 f80e 	bl	8007852 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007836:	69f8      	ldr	r0, [r7, #28]
 8007838:	f000 f88a 	bl	8007950 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800783c:	2301      	movs	r3, #1
 800783e:	61bb      	str	r3, [r7, #24]
 8007840:	e002      	b.n	8007848 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007842:	f04f 33ff 	mov.w	r3, #4294967295
 8007846:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007848:	69bb      	ldr	r3, [r7, #24]
	}
 800784a:	4618      	mov	r0, r3
 800784c:	3720      	adds	r7, #32
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b088      	sub	sp, #32
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
 800785e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800786a:	3b01      	subs	r3, #1
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	f023 0307 	bic.w	r3, r3, #7
 8007878:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00a      	beq.n	800789a <prvInitialiseNewTask+0x48>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	617b      	str	r3, [r7, #20]
}
 8007896:	bf00      	nop
 8007898:	e7fe      	b.n	8007898 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
 800789e:	e012      	b.n	80078c6 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	4413      	add	r3, r2
 80078a6:	7819      	ldrb	r1, [r3, #0]
 80078a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	4413      	add	r3, r2
 80078ae:	3334      	adds	r3, #52	; 0x34
 80078b0:	460a      	mov	r2, r1
 80078b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	4413      	add	r3, r2
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d006      	beq.n	80078ce <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	3301      	adds	r3, #1
 80078c4:	61fb      	str	r3, [r7, #28]
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	2b0f      	cmp	r3, #15
 80078ca:	d9e9      	bls.n	80078a0 <prvInitialiseNewTask+0x4e>
 80078cc:	e000      	b.n	80078d0 <prvInitialiseNewTask+0x7e>
		{
			break;
 80078ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	2b06      	cmp	r3, #6
 80078dc:	d901      	bls.n	80078e2 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078de:	2306      	movs	r3, #6
 80078e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	2200      	movs	r2, #0
 80078f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	3304      	adds	r3, #4
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff fe79 	bl	80075f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007900:	3318      	adds	r3, #24
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff fe74 	bl	80075f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800790c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	f1c3 0207 	rsb	r2, r3, #7
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800791c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	2200      	movs	r2, #0
 8007922:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	68f9      	ldr	r1, [r7, #12]
 8007930:	69b8      	ldr	r0, [r7, #24]
 8007932:	f000 fc0d 	bl	8008150 <pxPortInitialiseStack>
 8007936:	4602      	mov	r2, r0
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007946:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007948:	bf00      	nop
 800794a:	3720      	adds	r7, #32
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007958:	f000 fce8 	bl	800832c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800795c:	4b2a      	ldr	r3, [pc, #168]	; (8007a08 <prvAddNewTaskToReadyList+0xb8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3301      	adds	r3, #1
 8007962:	4a29      	ldr	r2, [pc, #164]	; (8007a08 <prvAddNewTaskToReadyList+0xb8>)
 8007964:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007966:	4b29      	ldr	r3, [pc, #164]	; (8007a0c <prvAddNewTaskToReadyList+0xbc>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d109      	bne.n	8007982 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800796e:	4a27      	ldr	r2, [pc, #156]	; (8007a0c <prvAddNewTaskToReadyList+0xbc>)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007974:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <prvAddNewTaskToReadyList+0xb8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d110      	bne.n	800799e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800797c:	f000 fac0 	bl	8007f00 <prvInitialiseTaskLists>
 8007980:	e00d      	b.n	800799e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007982:	4b23      	ldr	r3, [pc, #140]	; (8007a10 <prvAddNewTaskToReadyList+0xc0>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d109      	bne.n	800799e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800798a:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <prvAddNewTaskToReadyList+0xbc>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007994:	429a      	cmp	r2, r3
 8007996:	d802      	bhi.n	800799e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007998:	4a1c      	ldr	r2, [pc, #112]	; (8007a0c <prvAddNewTaskToReadyList+0xbc>)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800799e:	4b1d      	ldr	r3, [pc, #116]	; (8007a14 <prvAddNewTaskToReadyList+0xc4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3301      	adds	r3, #1
 80079a4:	4a1b      	ldr	r2, [pc, #108]	; (8007a14 <prvAddNewTaskToReadyList+0xc4>)
 80079a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	2201      	movs	r2, #1
 80079ae:	409a      	lsls	r2, r3
 80079b0:	4b19      	ldr	r3, [pc, #100]	; (8007a18 <prvAddNewTaskToReadyList+0xc8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	4a18      	ldr	r2, [pc, #96]	; (8007a18 <prvAddNewTaskToReadyList+0xc8>)
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079be:	4613      	mov	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4a15      	ldr	r2, [pc, #84]	; (8007a1c <prvAddNewTaskToReadyList+0xcc>)
 80079c8:	441a      	add	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3304      	adds	r3, #4
 80079ce:	4619      	mov	r1, r3
 80079d0:	4610      	mov	r0, r2
 80079d2:	f7ff fe19 	bl	8007608 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079d6:	f000 fcd9 	bl	800838c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079da:	4b0d      	ldr	r3, [pc, #52]	; (8007a10 <prvAddNewTaskToReadyList+0xc0>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00e      	beq.n	8007a00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079e2:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <prvAddNewTaskToReadyList+0xbc>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d207      	bcs.n	8007a00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079f0:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <prvAddNewTaskToReadyList+0xd0>)
 80079f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	20000508 	.word	0x20000508
 8007a0c:	20000408 	.word	0x20000408
 8007a10:	20000514 	.word	0x20000514
 8007a14:	20000524 	.word	0x20000524
 8007a18:	20000510 	.word	0x20000510
 8007a1c:	2000040c 	.word	0x2000040c
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d017      	beq.n	8007a66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <vTaskDelay+0x60>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <vTaskDelay+0x30>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60bb      	str	r3, [r7, #8]
}
 8007a50:	bf00      	nop
 8007a52:	e7fe      	b.n	8007a52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a54:	f000 f87a 	bl	8007b4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a58:	2100      	movs	r1, #0
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fb12 	bl	8008084 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a60:	f000 f882 	bl	8007b68 <xTaskResumeAll>
 8007a64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d107      	bne.n	8007a7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a6c:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <vTaskDelay+0x64>)
 8007a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a7c:	bf00      	nop
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20000530 	.word	0x20000530
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08a      	sub	sp, #40	; 0x28
 8007a90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a9a:	463a      	mov	r2, r7
 8007a9c:	1d39      	adds	r1, r7, #4
 8007a9e:	f107 0308 	add.w	r3, r7, #8
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7f8 ff44 	bl	8000930 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	9202      	str	r2, [sp, #8]
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	460a      	mov	r2, r1
 8007aba:	491e      	ldr	r1, [pc, #120]	; (8007b34 <vTaskStartScheduler+0xa8>)
 8007abc:	481e      	ldr	r0, [pc, #120]	; (8007b38 <vTaskStartScheduler+0xac>)
 8007abe:	f7ff fe27 	bl	8007710 <xTaskCreateStatic>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4a1d      	ldr	r2, [pc, #116]	; (8007b3c <vTaskStartScheduler+0xb0>)
 8007ac6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ac8:	4b1c      	ldr	r3, [pc, #112]	; (8007b3c <vTaskStartScheduler+0xb0>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	e001      	b.n	8007ada <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d116      	bne.n	8007b0e <vTaskStartScheduler+0x82>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	613b      	str	r3, [r7, #16]
}
 8007af2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007af4:	4b12      	ldr	r3, [pc, #72]	; (8007b40 <vTaskStartScheduler+0xb4>)
 8007af6:	f04f 32ff 	mov.w	r2, #4294967295
 8007afa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007afc:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <vTaskStartScheduler+0xb8>)
 8007afe:	2201      	movs	r2, #1
 8007b00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007b02:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <vTaskStartScheduler+0xbc>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b08:	f000 fb9e 	bl	8008248 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b0c:	e00e      	b.n	8007b2c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b14:	d10a      	bne.n	8007b2c <vTaskStartScheduler+0xa0>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	60fb      	str	r3, [r7, #12]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <vTaskStartScheduler+0x9e>
}
 8007b2c:	bf00      	nop
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	08009ae0 	.word	0x08009ae0
 8007b38:	08007ed1 	.word	0x08007ed1
 8007b3c:	2000052c 	.word	0x2000052c
 8007b40:	20000528 	.word	0x20000528
 8007b44:	20000514 	.word	0x20000514
 8007b48:	2000050c 	.word	0x2000050c

08007b4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <vTaskSuspendAll+0x18>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3301      	adds	r3, #1
 8007b56:	4a03      	ldr	r2, [pc, #12]	; (8007b64 <vTaskSuspendAll+0x18>)
 8007b58:	6013      	str	r3, [r2, #0]
}
 8007b5a:	bf00      	nop
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bc80      	pop	{r7}
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	20000530 	.word	0x20000530

08007b68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b76:	4b41      	ldr	r3, [pc, #260]	; (8007c7c <xTaskResumeAll+0x114>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	603b      	str	r3, [r7, #0]
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b94:	f000 fbca 	bl	800832c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b98:	4b38      	ldr	r3, [pc, #224]	; (8007c7c <xTaskResumeAll+0x114>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	4a37      	ldr	r2, [pc, #220]	; (8007c7c <xTaskResumeAll+0x114>)
 8007ba0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ba2:	4b36      	ldr	r3, [pc, #216]	; (8007c7c <xTaskResumeAll+0x114>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d161      	bne.n	8007c6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007baa:	4b35      	ldr	r3, [pc, #212]	; (8007c80 <xTaskResumeAll+0x118>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d05d      	beq.n	8007c6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bb2:	e02e      	b.n	8007c12 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007bb4:	4b33      	ldr	r3, [pc, #204]	; (8007c84 <xTaskResumeAll+0x11c>)
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3318      	adds	r3, #24
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff fd7c 	bl	80076be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3304      	adds	r3, #4
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7ff fd77 	bl	80076be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	409a      	lsls	r2, r3
 8007bd8:	4b2b      	ldr	r3, [pc, #172]	; (8007c88 <xTaskResumeAll+0x120>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	4a2a      	ldr	r2, [pc, #168]	; (8007c88 <xTaskResumeAll+0x120>)
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4a27      	ldr	r2, [pc, #156]	; (8007c8c <xTaskResumeAll+0x124>)
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f7ff fd05 	bl	8007608 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c02:	4b23      	ldr	r3, [pc, #140]	; (8007c90 <xTaskResumeAll+0x128>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d302      	bcc.n	8007c12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007c0c:	4b21      	ldr	r3, [pc, #132]	; (8007c94 <xTaskResumeAll+0x12c>)
 8007c0e:	2201      	movs	r2, #1
 8007c10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c12:	4b1c      	ldr	r3, [pc, #112]	; (8007c84 <xTaskResumeAll+0x11c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1cc      	bne.n	8007bb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c20:	f000 fa0c 	bl	800803c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007c24:	4b1c      	ldr	r3, [pc, #112]	; (8007c98 <xTaskResumeAll+0x130>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d010      	beq.n	8007c52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c30:	f000 f836 	bl	8007ca0 <xTaskIncrementTick>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007c3a:	4b16      	ldr	r3, [pc, #88]	; (8007c94 <xTaskResumeAll+0x12c>)
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f1      	bne.n	8007c30 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007c4c:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <xTaskResumeAll+0x130>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c52:	4b10      	ldr	r3, [pc, #64]	; (8007c94 <xTaskResumeAll+0x12c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d009      	beq.n	8007c6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c5e:	4b0f      	ldr	r3, [pc, #60]	; (8007c9c <xTaskResumeAll+0x134>)
 8007c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c6e:	f000 fb8d 	bl	800838c <vPortExitCritical>

	return xAlreadyYielded;
 8007c72:	68bb      	ldr	r3, [r7, #8]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20000530 	.word	0x20000530
 8007c80:	20000508 	.word	0x20000508
 8007c84:	200004c8 	.word	0x200004c8
 8007c88:	20000510 	.word	0x20000510
 8007c8c:	2000040c 	.word	0x2000040c
 8007c90:	20000408 	.word	0x20000408
 8007c94:	2000051c 	.word	0x2000051c
 8007c98:	20000518 	.word	0x20000518
 8007c9c:	e000ed04 	.word	0xe000ed04

08007ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007caa:	4b51      	ldr	r3, [pc, #324]	; (8007df0 <xTaskIncrementTick+0x150>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f040 808d 	bne.w	8007dce <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007cb4:	4b4f      	ldr	r3, [pc, #316]	; (8007df4 <xTaskIncrementTick+0x154>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cbc:	4a4d      	ldr	r2, [pc, #308]	; (8007df4 <xTaskIncrementTick+0x154>)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d120      	bne.n	8007d0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cc8:	4b4b      	ldr	r3, [pc, #300]	; (8007df8 <xTaskIncrementTick+0x158>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	603b      	str	r3, [r7, #0]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xTaskIncrementTick+0x46>
 8007ce8:	4b43      	ldr	r3, [pc, #268]	; (8007df8 <xTaskIncrementTick+0x158>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	4b43      	ldr	r3, [pc, #268]	; (8007dfc <xTaskIncrementTick+0x15c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a41      	ldr	r2, [pc, #260]	; (8007df8 <xTaskIncrementTick+0x158>)
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	4a41      	ldr	r2, [pc, #260]	; (8007dfc <xTaskIncrementTick+0x15c>)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6013      	str	r3, [r2, #0]
 8007cfc:	4b40      	ldr	r3, [pc, #256]	; (8007e00 <xTaskIncrementTick+0x160>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3301      	adds	r3, #1
 8007d02:	4a3f      	ldr	r2, [pc, #252]	; (8007e00 <xTaskIncrementTick+0x160>)
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	f000 f999 	bl	800803c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d0a:	4b3e      	ldr	r3, [pc, #248]	; (8007e04 <xTaskIncrementTick+0x164>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d34d      	bcc.n	8007db0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d14:	4b38      	ldr	r3, [pc, #224]	; (8007df8 <xTaskIncrementTick+0x158>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <xTaskIncrementTick+0x82>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e000      	b.n	8007d24 <xTaskIncrementTick+0x84>
 8007d22:	2300      	movs	r3, #0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d004      	beq.n	8007d32 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d28:	4b36      	ldr	r3, [pc, #216]	; (8007e04 <xTaskIncrementTick+0x164>)
 8007d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2e:	601a      	str	r2, [r3, #0]
					break;
 8007d30:	e03e      	b.n	8007db0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d32:	4b31      	ldr	r3, [pc, #196]	; (8007df8 <xTaskIncrementTick+0x158>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d203      	bcs.n	8007d52 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d4a:	4a2e      	ldr	r2, [pc, #184]	; (8007e04 <xTaskIncrementTick+0x164>)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6013      	str	r3, [r2, #0]
						break;
 8007d50:	e02e      	b.n	8007db0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	3304      	adds	r3, #4
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fcb1 	bl	80076be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	3318      	adds	r3, #24
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7ff fca8 	bl	80076be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	2201      	movs	r2, #1
 8007d74:	409a      	lsls	r2, r3
 8007d76:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <xTaskIncrementTick+0x168>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	4a22      	ldr	r2, [pc, #136]	; (8007e08 <xTaskIncrementTick+0x168>)
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4a1f      	ldr	r2, [pc, #124]	; (8007e0c <xTaskIncrementTick+0x16c>)
 8007d8e:	441a      	add	r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	3304      	adds	r3, #4
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f7ff fc36 	bl	8007608 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da0:	4b1b      	ldr	r3, [pc, #108]	; (8007e10 <xTaskIncrementTick+0x170>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d3b4      	bcc.n	8007d14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007daa:	2301      	movs	r3, #1
 8007dac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dae:	e7b1      	b.n	8007d14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007db0:	4b17      	ldr	r3, [pc, #92]	; (8007e10 <xTaskIncrementTick+0x170>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db6:	4915      	ldr	r1, [pc, #84]	; (8007e0c <xTaskIncrementTick+0x16c>)
 8007db8:	4613      	mov	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	440b      	add	r3, r1
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d907      	bls.n	8007dd8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	e004      	b.n	8007dd8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007dce:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <xTaskIncrementTick+0x174>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	4a0f      	ldr	r2, [pc, #60]	; (8007e14 <xTaskIncrementTick+0x174>)
 8007dd6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007dd8:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <xTaskIncrementTick+0x178>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007de0:	2301      	movs	r3, #1
 8007de2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007de4:	697b      	ldr	r3, [r7, #20]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000530 	.word	0x20000530
 8007df4:	2000050c 	.word	0x2000050c
 8007df8:	200004c0 	.word	0x200004c0
 8007dfc:	200004c4 	.word	0x200004c4
 8007e00:	20000520 	.word	0x20000520
 8007e04:	20000528 	.word	0x20000528
 8007e08:	20000510 	.word	0x20000510
 8007e0c:	2000040c 	.word	0x2000040c
 8007e10:	20000408 	.word	0x20000408
 8007e14:	20000518 	.word	0x20000518
 8007e18:	2000051c 	.word	0x2000051c

08007e1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e22:	4b26      	ldr	r3, [pc, #152]	; (8007ebc <vTaskSwitchContext+0xa0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e2a:	4b25      	ldr	r3, [pc, #148]	; (8007ec0 <vTaskSwitchContext+0xa4>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e30:	e03f      	b.n	8007eb2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007e32:	4b23      	ldr	r3, [pc, #140]	; (8007ec0 <vTaskSwitchContext+0xa4>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007e38:	4b22      	ldr	r3, [pc, #136]	; (8007ec4 <vTaskSwitchContext+0xa8>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	fab3 f383 	clz	r3, r3
 8007e44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	f1c3 031f 	rsb	r3, r3, #31
 8007e4c:	617b      	str	r3, [r7, #20]
 8007e4e:	491e      	ldr	r1, [pc, #120]	; (8007ec8 <vTaskSwitchContext+0xac>)
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	440b      	add	r3, r1
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10a      	bne.n	8007e78 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	607b      	str	r3, [r7, #4]
}
 8007e74:	bf00      	nop
 8007e76:	e7fe      	b.n	8007e76 <vTaskSwitchContext+0x5a>
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4a11      	ldr	r2, [pc, #68]	; (8007ec8 <vTaskSwitchContext+0xac>)
 8007e84:	4413      	add	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	605a      	str	r2, [r3, #4]
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	3308      	adds	r3, #8
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d104      	bne.n	8007ea8 <vTaskSwitchContext+0x8c>
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	605a      	str	r2, [r3, #4]
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	4a07      	ldr	r2, [pc, #28]	; (8007ecc <vTaskSwitchContext+0xb0>)
 8007eb0:	6013      	str	r3, [r2, #0]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bc80      	pop	{r7}
 8007eba:	4770      	bx	lr
 8007ebc:	20000530 	.word	0x20000530
 8007ec0:	2000051c 	.word	0x2000051c
 8007ec4:	20000510 	.word	0x20000510
 8007ec8:	2000040c 	.word	0x2000040c
 8007ecc:	20000408 	.word	0x20000408

08007ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ed8:	f000 f852 	bl	8007f80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <prvIdleTask+0x28>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d9f9      	bls.n	8007ed8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ee4:	4b05      	ldr	r3, [pc, #20]	; (8007efc <prvIdleTask+0x2c>)
 8007ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ef4:	e7f0      	b.n	8007ed8 <prvIdleTask+0x8>
 8007ef6:	bf00      	nop
 8007ef8:	2000040c 	.word	0x2000040c
 8007efc:	e000ed04 	.word	0xe000ed04

08007f00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f06:	2300      	movs	r3, #0
 8007f08:	607b      	str	r3, [r7, #4]
 8007f0a:	e00c      	b.n	8007f26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4a12      	ldr	r2, [pc, #72]	; (8007f60 <prvInitialiseTaskLists+0x60>)
 8007f18:	4413      	add	r3, r2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff fb49 	bl	80075b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3301      	adds	r3, #1
 8007f24:	607b      	str	r3, [r7, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b06      	cmp	r3, #6
 8007f2a:	d9ef      	bls.n	8007f0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f2c:	480d      	ldr	r0, [pc, #52]	; (8007f64 <prvInitialiseTaskLists+0x64>)
 8007f2e:	f7ff fb40 	bl	80075b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f32:	480d      	ldr	r0, [pc, #52]	; (8007f68 <prvInitialiseTaskLists+0x68>)
 8007f34:	f7ff fb3d 	bl	80075b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f38:	480c      	ldr	r0, [pc, #48]	; (8007f6c <prvInitialiseTaskLists+0x6c>)
 8007f3a:	f7ff fb3a 	bl	80075b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f3e:	480c      	ldr	r0, [pc, #48]	; (8007f70 <prvInitialiseTaskLists+0x70>)
 8007f40:	f7ff fb37 	bl	80075b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f44:	480b      	ldr	r0, [pc, #44]	; (8007f74 <prvInitialiseTaskLists+0x74>)
 8007f46:	f7ff fb34 	bl	80075b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f4a:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <prvInitialiseTaskLists+0x78>)
 8007f4c:	4a05      	ldr	r2, [pc, #20]	; (8007f64 <prvInitialiseTaskLists+0x64>)
 8007f4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f50:	4b0a      	ldr	r3, [pc, #40]	; (8007f7c <prvInitialiseTaskLists+0x7c>)
 8007f52:	4a05      	ldr	r2, [pc, #20]	; (8007f68 <prvInitialiseTaskLists+0x68>)
 8007f54:	601a      	str	r2, [r3, #0]
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	2000040c 	.word	0x2000040c
 8007f64:	20000498 	.word	0x20000498
 8007f68:	200004ac 	.word	0x200004ac
 8007f6c:	200004c8 	.word	0x200004c8
 8007f70:	200004dc 	.word	0x200004dc
 8007f74:	200004f4 	.word	0x200004f4
 8007f78:	200004c0 	.word	0x200004c0
 8007f7c:	200004c4 	.word	0x200004c4

08007f80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f86:	e019      	b.n	8007fbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f88:	f000 f9d0 	bl	800832c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007f8c:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <prvCheckTasksWaitingTermination+0x50>)
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff fb90 	bl	80076be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <prvCheckTasksWaitingTermination+0x54>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	4a0b      	ldr	r2, [pc, #44]	; (8007fd4 <prvCheckTasksWaitingTermination+0x54>)
 8007fa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	; (8007fd8 <prvCheckTasksWaitingTermination+0x58>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	4a0a      	ldr	r2, [pc, #40]	; (8007fd8 <prvCheckTasksWaitingTermination+0x58>)
 8007fb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fb2:	f000 f9eb 	bl	800838c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f810 	bl	8007fdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fbc:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <prvCheckTasksWaitingTermination+0x58>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e1      	bne.n	8007f88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	200004dc 	.word	0x200004dc
 8007fd4:	20000508 	.word	0x20000508
 8007fd8:	200004f0 	.word	0x200004f0

08007fdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d108      	bne.n	8008000 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fb20 	bl	8008638 <vPortFree>
				vPortFree( pxTCB );
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fb1d 	bl	8008638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ffe:	e018      	b.n	8008032 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008006:	2b01      	cmp	r3, #1
 8008008:	d103      	bne.n	8008012 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fb14 	bl	8008638 <vPortFree>
	}
 8008010:	e00f      	b.n	8008032 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008018:	2b02      	cmp	r3, #2
 800801a:	d00a      	beq.n	8008032 <prvDeleteTCB+0x56>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	60fb      	str	r3, [r7, #12]
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <prvDeleteTCB+0x54>
	}
 8008032:	bf00      	nop
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008042:	4b0e      	ldr	r3, [pc, #56]	; (800807c <prvResetNextTaskUnblockTime+0x40>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <prvResetNextTaskUnblockTime+0x14>
 800804c:	2301      	movs	r3, #1
 800804e:	e000      	b.n	8008052 <prvResetNextTaskUnblockTime+0x16>
 8008050:	2300      	movs	r3, #0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d004      	beq.n	8008060 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008056:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <prvResetNextTaskUnblockTime+0x44>)
 8008058:	f04f 32ff 	mov.w	r2, #4294967295
 800805c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800805e:	e008      	b.n	8008072 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008060:	4b06      	ldr	r3, [pc, #24]	; (800807c <prvResetNextTaskUnblockTime+0x40>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	4a04      	ldr	r2, [pc, #16]	; (8008080 <prvResetNextTaskUnblockTime+0x44>)
 8008070:	6013      	str	r3, [r2, #0]
}
 8008072:	bf00      	nop
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	bc80      	pop	{r7}
 800807a:	4770      	bx	lr
 800807c:	200004c0 	.word	0x200004c0
 8008080:	20000528 	.word	0x20000528

08008084 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800808e:	4b29      	ldr	r3, [pc, #164]	; (8008134 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008094:	4b28      	ldr	r3, [pc, #160]	; (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3304      	adds	r3, #4
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff fb0f 	bl	80076be <uxListRemove>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10b      	bne.n	80080be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80080a6:	4b24      	ldr	r3, [pc, #144]	; (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	2201      	movs	r2, #1
 80080ae:	fa02 f303 	lsl.w	r3, r2, r3
 80080b2:	43da      	mvns	r2, r3
 80080b4:	4b21      	ldr	r3, [pc, #132]	; (800813c <prvAddCurrentTaskToDelayedList+0xb8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4013      	ands	r3, r2
 80080ba:	4a20      	ldr	r2, [pc, #128]	; (800813c <prvAddCurrentTaskToDelayedList+0xb8>)
 80080bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c4:	d10a      	bne.n	80080dc <prvAddCurrentTaskToDelayedList+0x58>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d007      	beq.n	80080dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080cc:	4b1a      	ldr	r3, [pc, #104]	; (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4619      	mov	r1, r3
 80080d4:	481a      	ldr	r0, [pc, #104]	; (8008140 <prvAddCurrentTaskToDelayedList+0xbc>)
 80080d6:	f7ff fa97 	bl	8007608 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080da:	e026      	b.n	800812a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4413      	add	r3, r2
 80080e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080e4:	4b14      	ldr	r3, [pc, #80]	; (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d209      	bcs.n	8008108 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f4:	4b13      	ldr	r3, [pc, #76]	; (8008144 <prvAddCurrentTaskToDelayedList+0xc0>)
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	4b0f      	ldr	r3, [pc, #60]	; (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3304      	adds	r3, #4
 80080fe:	4619      	mov	r1, r3
 8008100:	4610      	mov	r0, r2
 8008102:	f7ff faa4 	bl	800764e <vListInsert>
}
 8008106:	e010      	b.n	800812a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008108:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <prvAddCurrentTaskToDelayedList+0xc4>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3304      	adds	r3, #4
 8008112:	4619      	mov	r1, r3
 8008114:	4610      	mov	r0, r2
 8008116:	f7ff fa9a 	bl	800764e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800811a:	4b0c      	ldr	r3, [pc, #48]	; (800814c <prvAddCurrentTaskToDelayedList+0xc8>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	429a      	cmp	r2, r3
 8008122:	d202      	bcs.n	800812a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008124:	4a09      	ldr	r2, [pc, #36]	; (800814c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6013      	str	r3, [r2, #0]
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	2000050c 	.word	0x2000050c
 8008138:	20000408 	.word	0x20000408
 800813c:	20000510 	.word	0x20000510
 8008140:	200004f4 	.word	0x200004f4
 8008144:	200004c4 	.word	0x200004c4
 8008148:	200004c0 	.word	0x200004c0
 800814c:	20000528 	.word	0x20000528

08008150 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3b04      	subs	r3, #4
 8008160:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3b04      	subs	r3, #4
 800816e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f023 0201 	bic.w	r2, r3, #1
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	3b04      	subs	r3, #4
 800817e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008180:	4a08      	ldr	r2, [pc, #32]	; (80081a4 <pxPortInitialiseStack+0x54>)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3b14      	subs	r3, #20
 800818a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3b20      	subs	r3, #32
 8008196:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008198:	68fb      	ldr	r3, [r7, #12]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	bc80      	pop	{r7}
 80081a2:	4770      	bx	lr
 80081a4:	080081a9 	.word	0x080081a9

080081a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081b2:	4b12      	ldr	r3, [pc, #72]	; (80081fc <prvTaskExitError+0x54>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ba:	d00a      	beq.n	80081d2 <prvTaskExitError+0x2a>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	60fb      	str	r3, [r7, #12]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <prvTaskExitError+0x28>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	60bb      	str	r3, [r7, #8]
}
 80081e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081e6:	bf00      	nop
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0fc      	beq.n	80081e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	2000011c 	.word	0x2000011c

08008200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008200:	4b07      	ldr	r3, [pc, #28]	; (8008220 <pxCurrentTCBConst2>)
 8008202:	6819      	ldr	r1, [r3, #0]
 8008204:	6808      	ldr	r0, [r1, #0]
 8008206:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800820a:	f380 8809 	msr	PSP, r0
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f04f 0000 	mov.w	r0, #0
 8008216:	f380 8811 	msr	BASEPRI, r0
 800821a:	f04e 0e0d 	orr.w	lr, lr, #13
 800821e:	4770      	bx	lr

08008220 <pxCurrentTCBConst2>:
 8008220:	20000408 	.word	0x20000408
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop

08008228 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008228:	4806      	ldr	r0, [pc, #24]	; (8008244 <prvPortStartFirstTask+0x1c>)
 800822a:	6800      	ldr	r0, [r0, #0]
 800822c:	6800      	ldr	r0, [r0, #0]
 800822e:	f380 8808 	msr	MSP, r0
 8008232:	b662      	cpsie	i
 8008234:	b661      	cpsie	f
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	df00      	svc	0
 8008240:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008242:	bf00      	nop
 8008244:	e000ed08 	.word	0xe000ed08

08008248 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800824e:	4b32      	ldr	r3, [pc, #200]	; (8008318 <xPortStartScheduler+0xd0>)
 8008250:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	b2db      	uxtb	r3, r3
 8008258:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	22ff      	movs	r2, #255	; 0xff
 800825e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008270:	b2da      	uxtb	r2, r3
 8008272:	4b2a      	ldr	r3, [pc, #168]	; (800831c <xPortStartScheduler+0xd4>)
 8008274:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008276:	4b2a      	ldr	r3, [pc, #168]	; (8008320 <xPortStartScheduler+0xd8>)
 8008278:	2207      	movs	r2, #7
 800827a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800827c:	e009      	b.n	8008292 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800827e:	4b28      	ldr	r3, [pc, #160]	; (8008320 <xPortStartScheduler+0xd8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3b01      	subs	r3, #1
 8008284:	4a26      	ldr	r2, [pc, #152]	; (8008320 <xPortStartScheduler+0xd8>)
 8008286:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	b2db      	uxtb	r3, r3
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	b2db      	uxtb	r3, r3
 8008290:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008292:	78fb      	ldrb	r3, [r7, #3]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829a:	2b80      	cmp	r3, #128	; 0x80
 800829c:	d0ef      	beq.n	800827e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800829e:	4b20      	ldr	r3, [pc, #128]	; (8008320 <xPortStartScheduler+0xd8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f1c3 0307 	rsb	r3, r3, #7
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d00a      	beq.n	80082c0 <xPortStartScheduler+0x78>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	60bb      	str	r3, [r7, #8]
}
 80082bc:	bf00      	nop
 80082be:	e7fe      	b.n	80082be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082c0:	4b17      	ldr	r3, [pc, #92]	; (8008320 <xPortStartScheduler+0xd8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	4a16      	ldr	r2, [pc, #88]	; (8008320 <xPortStartScheduler+0xd8>)
 80082c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082ca:	4b15      	ldr	r3, [pc, #84]	; (8008320 <xPortStartScheduler+0xd8>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082d2:	4a13      	ldr	r2, [pc, #76]	; (8008320 <xPortStartScheduler+0xd8>)
 80082d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082de:	4b11      	ldr	r3, [pc, #68]	; (8008324 <xPortStartScheduler+0xdc>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a10      	ldr	r2, [pc, #64]	; (8008324 <xPortStartScheduler+0xdc>)
 80082e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082ea:	4b0e      	ldr	r3, [pc, #56]	; (8008324 <xPortStartScheduler+0xdc>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a0d      	ldr	r2, [pc, #52]	; (8008324 <xPortStartScheduler+0xdc>)
 80082f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082f6:	f000 f8b9 	bl	800846c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082fa:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <xPortStartScheduler+0xe0>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008300:	f7ff ff92 	bl	8008228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008304:	f7ff fd8a 	bl	8007e1c <vTaskSwitchContext>
	prvTaskExitError();
 8008308:	f7ff ff4e 	bl	80081a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	e000e400 	.word	0xe000e400
 800831c:	20000534 	.word	0x20000534
 8008320:	20000538 	.word	0x20000538
 8008324:	e000ed20 	.word	0xe000ed20
 8008328:	2000011c 	.word	0x2000011c

0800832c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	607b      	str	r3, [r7, #4]
}
 8008344:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008346:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <vPortEnterCritical+0x58>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3301      	adds	r3, #1
 800834c:	4a0d      	ldr	r2, [pc, #52]	; (8008384 <vPortEnterCritical+0x58>)
 800834e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008350:	4b0c      	ldr	r3, [pc, #48]	; (8008384 <vPortEnterCritical+0x58>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d10f      	bne.n	8008378 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008358:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <vPortEnterCritical+0x5c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <vPortEnterCritical+0x4c>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	603b      	str	r3, [r7, #0]
}
 8008374:	bf00      	nop
 8008376:	e7fe      	b.n	8008376 <vPortEnterCritical+0x4a>
	}
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	2000011c 	.word	0x2000011c
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008392:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <vPortExitCritical+0x4c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10a      	bne.n	80083b0 <vPortExitCritical+0x24>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	607b      	str	r3, [r7, #4]
}
 80083ac:	bf00      	nop
 80083ae:	e7fe      	b.n	80083ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083b0:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <vPortExitCritical+0x4c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	4a08      	ldr	r2, [pc, #32]	; (80083d8 <vPortExitCritical+0x4c>)
 80083b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083ba:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <vPortExitCritical+0x4c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d105      	bne.n	80083ce <vPortExitCritical+0x42>
 80083c2:	2300      	movs	r3, #0
 80083c4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bc80      	pop	{r7}
 80083d6:	4770      	bx	lr
 80083d8:	2000011c 	.word	0x2000011c
 80083dc:	00000000 	.word	0x00000000

080083e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083e0:	f3ef 8009 	mrs	r0, PSP
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <pxCurrentTCBConst>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083f0:	6010      	str	r0, [r2, #0]
 80083f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80083f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083fa:	f380 8811 	msr	BASEPRI, r0
 80083fe:	f7ff fd0d 	bl	8007e1c <vTaskSwitchContext>
 8008402:	f04f 0000 	mov.w	r0, #0
 8008406:	f380 8811 	msr	BASEPRI, r0
 800840a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800840e:	6819      	ldr	r1, [r3, #0]
 8008410:	6808      	ldr	r0, [r1, #0]
 8008412:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008416:	f380 8809 	msr	PSP, r0
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	4770      	bx	lr

08008420 <pxCurrentTCBConst>:
 8008420:	20000408 	.word	0x20000408
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop

08008428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	607b      	str	r3, [r7, #4]
}
 8008440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008442:	f7ff fc2d 	bl	8007ca0 <xTaskIncrementTick>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800844c:	4b06      	ldr	r3, [pc, #24]	; (8008468 <SysTick_Handler+0x40>)
 800844e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f383 8811 	msr	BASEPRI, r3
}
 800845e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008470:	4b0a      	ldr	r3, [pc, #40]	; (800849c <vPortSetupTimerInterrupt+0x30>)
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008476:	4b0a      	ldr	r3, [pc, #40]	; (80084a0 <vPortSetupTimerInterrupt+0x34>)
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800847c:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <vPortSetupTimerInterrupt+0x38>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a09      	ldr	r2, [pc, #36]	; (80084a8 <vPortSetupTimerInterrupt+0x3c>)
 8008482:	fba2 2303 	umull	r2, r3, r2, r3
 8008486:	099b      	lsrs	r3, r3, #6
 8008488:	4a08      	ldr	r2, [pc, #32]	; (80084ac <vPortSetupTimerInterrupt+0x40>)
 800848a:	3b01      	subs	r3, #1
 800848c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800848e:	4b03      	ldr	r3, [pc, #12]	; (800849c <vPortSetupTimerInterrupt+0x30>)
 8008490:	2207      	movs	r2, #7
 8008492:	601a      	str	r2, [r3, #0]
}
 8008494:	bf00      	nop
 8008496:	46bd      	mov	sp, r7
 8008498:	bc80      	pop	{r7}
 800849a:	4770      	bx	lr
 800849c:	e000e010 	.word	0xe000e010
 80084a0:	e000e018 	.word	0xe000e018
 80084a4:	20000000 	.word	0x20000000
 80084a8:	10624dd3 	.word	0x10624dd3
 80084ac:	e000e014 	.word	0xe000e014

080084b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08a      	sub	sp, #40	; 0x28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084b8:	2300      	movs	r3, #0
 80084ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084bc:	f7ff fb46 	bl	8007b4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084c0:	4b58      	ldr	r3, [pc, #352]	; (8008624 <pvPortMalloc+0x174>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084c8:	f000 f910 	bl	80086ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084cc:	4b56      	ldr	r3, [pc, #344]	; (8008628 <pvPortMalloc+0x178>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4013      	ands	r3, r2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f040 808e 	bne.w	80085f6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01d      	beq.n	800851c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084e0:	2208      	movs	r2, #8
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4413      	add	r3, r2
 80084e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f003 0307 	and.w	r3, r3, #7
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d014      	beq.n	800851c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f023 0307 	bic.w	r3, r3, #7
 80084f8:	3308      	adds	r3, #8
 80084fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <pvPortMalloc+0x6c>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	617b      	str	r3, [r7, #20]
}
 8008518:	bf00      	nop
 800851a:	e7fe      	b.n	800851a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d069      	beq.n	80085f6 <pvPortMalloc+0x146>
 8008522:	4b42      	ldr	r3, [pc, #264]	; (800862c <pvPortMalloc+0x17c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	429a      	cmp	r2, r3
 800852a:	d864      	bhi.n	80085f6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800852c:	4b40      	ldr	r3, [pc, #256]	; (8008630 <pvPortMalloc+0x180>)
 800852e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008530:	4b3f      	ldr	r3, [pc, #252]	; (8008630 <pvPortMalloc+0x180>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008536:	e004      	b.n	8008542 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	429a      	cmp	r2, r3
 800854a:	d903      	bls.n	8008554 <pvPortMalloc+0xa4>
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1f1      	bne.n	8008538 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008554:	4b33      	ldr	r3, [pc, #204]	; (8008624 <pvPortMalloc+0x174>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800855a:	429a      	cmp	r2, r3
 800855c:	d04b      	beq.n	80085f6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2208      	movs	r2, #8
 8008564:	4413      	add	r3, r2
 8008566:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	1ad2      	subs	r2, r2, r3
 8008578:	2308      	movs	r3, #8
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	429a      	cmp	r2, r3
 800857e:	d91f      	bls.n	80085c0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4413      	add	r3, r2
 8008586:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	f003 0307 	and.w	r3, r3, #7
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00a      	beq.n	80085a8 <pvPortMalloc+0xf8>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	613b      	str	r3, [r7, #16]
}
 80085a4:	bf00      	nop
 80085a6:	e7fe      	b.n	80085a6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	1ad2      	subs	r2, r2, r3
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085ba:	69b8      	ldr	r0, [r7, #24]
 80085bc:	f000 f8f8 	bl	80087b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085c0:	4b1a      	ldr	r3, [pc, #104]	; (800862c <pvPortMalloc+0x17c>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	4a18      	ldr	r2, [pc, #96]	; (800862c <pvPortMalloc+0x17c>)
 80085cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085ce:	4b17      	ldr	r3, [pc, #92]	; (800862c <pvPortMalloc+0x17c>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	4b18      	ldr	r3, [pc, #96]	; (8008634 <pvPortMalloc+0x184>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d203      	bcs.n	80085e2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085da:	4b14      	ldr	r3, [pc, #80]	; (800862c <pvPortMalloc+0x17c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a15      	ldr	r2, [pc, #84]	; (8008634 <pvPortMalloc+0x184>)
 80085e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	4b10      	ldr	r3, [pc, #64]	; (8008628 <pvPortMalloc+0x178>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	431a      	orrs	r2, r3
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085f6:	f7ff fab7 	bl	8007b68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	f003 0307 	and.w	r3, r3, #7
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00a      	beq.n	800861a <pvPortMalloc+0x16a>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	60fb      	str	r3, [r7, #12]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <pvPortMalloc+0x168>
	return pvReturn;
 800861a:	69fb      	ldr	r3, [r7, #28]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3728      	adds	r7, #40	; 0x28
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	2000209c 	.word	0x2000209c
 8008628:	200020a8 	.word	0x200020a8
 800862c:	200020a0 	.word	0x200020a0
 8008630:	20002094 	.word	0x20002094
 8008634:	200020a4 	.word	0x200020a4

08008638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d048      	beq.n	80086dc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800864a:	2308      	movs	r3, #8
 800864c:	425b      	negs	r3, r3
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4413      	add	r3, r2
 8008652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	4b21      	ldr	r3, [pc, #132]	; (80086e4 <vPortFree+0xac>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4013      	ands	r3, r2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <vPortFree+0x44>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	60fb      	str	r3, [r7, #12]
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <vPortFree+0x62>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	60bb      	str	r3, [r7, #8]
}
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	4b11      	ldr	r3, [pc, #68]	; (80086e4 <vPortFree+0xac>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4013      	ands	r3, r2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d019      	beq.n	80086dc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d115      	bne.n	80086dc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <vPortFree+0xac>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	43db      	mvns	r3, r3
 80086ba:	401a      	ands	r2, r3
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086c0:	f7ff fa44 	bl	8007b4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	4b07      	ldr	r3, [pc, #28]	; (80086e8 <vPortFree+0xb0>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4413      	add	r3, r2
 80086ce:	4a06      	ldr	r2, [pc, #24]	; (80086e8 <vPortFree+0xb0>)
 80086d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086d2:	6938      	ldr	r0, [r7, #16]
 80086d4:	f000 f86c 	bl	80087b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80086d8:	f7ff fa46 	bl	8007b68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086dc:	bf00      	nop
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	200020a8 	.word	0x200020a8
 80086e8:	200020a0 	.word	0x200020a0

080086ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086f2:	f641 3358 	movw	r3, #7000	; 0x1b58
 80086f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086f8:	4b27      	ldr	r3, [pc, #156]	; (8008798 <prvHeapInit+0xac>)
 80086fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f003 0307 	and.w	r3, r3, #7
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00c      	beq.n	8008720 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3307      	adds	r3, #7
 800870a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0307 	bic.w	r3, r3, #7
 8008712:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	4a1f      	ldr	r2, [pc, #124]	; (8008798 <prvHeapInit+0xac>)
 800871c:	4413      	add	r3, r2
 800871e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008724:	4a1d      	ldr	r2, [pc, #116]	; (800879c <prvHeapInit+0xb0>)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800872a:	4b1c      	ldr	r3, [pc, #112]	; (800879c <prvHeapInit+0xb0>)
 800872c:	2200      	movs	r2, #0
 800872e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	4413      	add	r3, r2
 8008736:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008738:	2208      	movs	r2, #8
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	1a9b      	subs	r3, r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0307 	bic.w	r3, r3, #7
 8008746:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4a15      	ldr	r2, [pc, #84]	; (80087a0 <prvHeapInit+0xb4>)
 800874c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800874e:	4b14      	ldr	r3, [pc, #80]	; (80087a0 <prvHeapInit+0xb4>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2200      	movs	r2, #0
 8008754:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008756:	4b12      	ldr	r3, [pc, #72]	; (80087a0 <prvHeapInit+0xb4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	1ad2      	subs	r2, r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800876c:	4b0c      	ldr	r3, [pc, #48]	; (80087a0 <prvHeapInit+0xb4>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	4a0a      	ldr	r2, [pc, #40]	; (80087a4 <prvHeapInit+0xb8>)
 800877a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	4a09      	ldr	r2, [pc, #36]	; (80087a8 <prvHeapInit+0xbc>)
 8008782:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008784:	4b09      	ldr	r3, [pc, #36]	; (80087ac <prvHeapInit+0xc0>)
 8008786:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800878a:	601a      	str	r2, [r3, #0]
}
 800878c:	bf00      	nop
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	bc80      	pop	{r7}
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	2000053c 	.word	0x2000053c
 800879c:	20002094 	.word	0x20002094
 80087a0:	2000209c 	.word	0x2000209c
 80087a4:	200020a4 	.word	0x200020a4
 80087a8:	200020a0 	.word	0x200020a0
 80087ac:	200020a8 	.word	0x200020a8

080087b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087b8:	4b27      	ldr	r3, [pc, #156]	; (8008858 <prvInsertBlockIntoFreeList+0xa8>)
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	e002      	b.n	80087c4 <prvInsertBlockIntoFreeList+0x14>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d8f7      	bhi.n	80087be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	4413      	add	r3, r2
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d108      	bne.n	80087f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	441a      	add	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	441a      	add	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d118      	bne.n	8008838 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	4b14      	ldr	r3, [pc, #80]	; (800885c <prvInsertBlockIntoFreeList+0xac>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d00d      	beq.n	800882e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	441a      	add	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	e008      	b.n	8008840 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800882e:	4b0b      	ldr	r3, [pc, #44]	; (800885c <prvInsertBlockIntoFreeList+0xac>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	e003      	b.n	8008840 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d002      	beq.n	800884e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800884e:	bf00      	nop
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	bc80      	pop	{r7}
 8008856:	4770      	bx	lr
 8008858:	20002094 	.word	0x20002094
 800885c:	2000209c 	.word	0x2000209c

08008860 <printf_custom>:
  * @return 1 if the peripheral is busy, 0 if the data have been printed
  *
  */

uint8_t printf_custom(char* format,...)
{
 8008860:	b40f      	push	{r0, r1, r2, r3}
 8008862:	b580      	push	{r7, lr}
 8008864:	b0ac      	sub	sp, #176	; 0xb0
 8008866:	af00      	add	r7, sp, #0
	if(UART_PORT.gState == HAL_UART_STATE_BUSY_TX){
		return 1;
	}
#endif
#ifdef USB_PRINTF
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008868:	4bdd      	ldr	r3, [pc, #884]	; (8008be0 <printf_custom+0x380>)
 800886a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (hcdc->TxState != 0){
 8008872:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008876:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <printf_custom+0x22>
		return USBD_BUSY;
 800887e:	2301      	movs	r3, #1
 8008880:	e372      	b.n	8008f68 <printf_custom+0x708>
    char *s;
    char c;
    int i, j;
    unsigned int ui;
    double f;
    uint8_t index=0;
 8008882:	2300      	movs	r3, #0
 8008884:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    char buffer[MAX_CHARACTERS]={0}; 				//max number of characters that can be printed per printf_cdc call
 8008888:	2300      	movs	r3, #0
 800888a:	607b      	str	r3, [r7, #4]
 800888c:	f107 0308 	add.w	r3, r7, #8
 8008890:	227c      	movs	r2, #124	; 0x7c
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f001 f883 	bl	80099a0 <memset>
    va_list arg;
    va_start(arg, format);
 800889a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800889e:	603b      	str	r3, [r7, #0]

    for(traverse = format; *traverse != '\0'; traverse++)
 80088a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088a8:	e34d      	b.n	8008f46 <printf_custom+0x6e6>
    {
        while(*traverse!='%')
        {
        	if(*traverse =='\0')
 80088aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d019      	beq.n	80088e8 <printf_custom+0x88>
        		break;

            buffer[index] = *traverse;
 80088b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80088b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80088bc:	7812      	ldrb	r2, [r2, #0]
 80088be:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80088c2:	440b      	add	r3, r1
 80088c4:	f803 2cac 	strb.w	r2, [r3, #-172]
            traverse++;
 80088c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088cc:	3301      	adds	r3, #1
 80088ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            index++;
 80088d2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80088d6:	3301      	adds	r3, #1
 80088d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        while(*traverse!='%')
 80088dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	2b25      	cmp	r3, #37	; 0x25
 80088e4:	d1e1      	bne.n	80088aa <printf_custom+0x4a>
 80088e6:	e000      	b.n	80088ea <printf_custom+0x8a>
        		break;
 80088e8:	bf00      	nop
        }
        if(*traverse !='\0')
 80088ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d004      	beq.n	80088fe <printf_custom+0x9e>
        	traverse++;
 80088f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088f8:	3301      	adds	r3, #1
 80088fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        switch(*traverse)
 80088fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	3b2e      	subs	r3, #46	; 0x2e
 8008906:	2b4a      	cmp	r3, #74	; 0x4a
 8008908:	f200 8313 	bhi.w	8008f32 <printf_custom+0x6d2>
 800890c:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <printf_custom+0xb4>)
 800890e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008912:	bf00      	nop
 8008914:	08008d6b 	.word	0x08008d6b
 8008918:	08008f33 	.word	0x08008f33
 800891c:	08008f33 	.word	0x08008f33
 8008920:	08008f33 	.word	0x08008f33
 8008924:	08008f33 	.word	0x08008f33
 8008928:	08008f33 	.word	0x08008f33
 800892c:	08008f33 	.word	0x08008f33
 8008930:	08008f33 	.word	0x08008f33
 8008934:	08008f33 	.word	0x08008f33
 8008938:	08008f33 	.word	0x08008f33
 800893c:	08008f33 	.word	0x08008f33
 8008940:	08008f33 	.word	0x08008f33
 8008944:	08008f33 	.word	0x08008f33
 8008948:	08008f33 	.word	0x08008f33
 800894c:	08008f33 	.word	0x08008f33
 8008950:	08008f33 	.word	0x08008f33
 8008954:	08008f33 	.word	0x08008f33
 8008958:	08008f33 	.word	0x08008f33
 800895c:	08008f33 	.word	0x08008f33
 8008960:	08008f33 	.word	0x08008f33
 8008964:	08008f33 	.word	0x08008f33
 8008968:	08008f33 	.word	0x08008f33
 800896c:	08008f33 	.word	0x08008f33
 8008970:	08008f33 	.word	0x08008f33
 8008974:	08008f33 	.word	0x08008f33
 8008978:	08008f33 	.word	0x08008f33
 800897c:	08008f33 	.word	0x08008f33
 8008980:	08008f33 	.word	0x08008f33
 8008984:	08008f33 	.word	0x08008f33
 8008988:	08008f33 	.word	0x08008f33
 800898c:	08008f33 	.word	0x08008f33
 8008990:	08008f33 	.word	0x08008f33
 8008994:	08008f33 	.word	0x08008f33
 8008998:	08008f33 	.word	0x08008f33
 800899c:	08008f33 	.word	0x08008f33
 80089a0:	08008f33 	.word	0x08008f33
 80089a4:	08008f33 	.word	0x08008f33
 80089a8:	08008f33 	.word	0x08008f33
 80089ac:	08008f33 	.word	0x08008f33
 80089b0:	08008f33 	.word	0x08008f33
 80089b4:	08008f33 	.word	0x08008f33
 80089b8:	08008f33 	.word	0x08008f33
 80089bc:	08008f33 	.word	0x08008f33
 80089c0:	08008f33 	.word	0x08008f33
 80089c4:	08008f33 	.word	0x08008f33
 80089c8:	08008f33 	.word	0x08008f33
 80089cc:	08008f33 	.word	0x08008f33
 80089d0:	08008f33 	.word	0x08008f33
 80089d4:	08008f33 	.word	0x08008f33
 80089d8:	08008f33 	.word	0x08008f33
 80089dc:	08008f33 	.word	0x08008f33
 80089e0:	08008f33 	.word	0x08008f33
 80089e4:	08008a41 	.word	0x08008a41
 80089e8:	08008a6d 	.word	0x08008a6d
 80089ec:	08008a97 	.word	0x08008a97
 80089f0:	08008f33 	.word	0x08008f33
 80089f4:	08008c11 	.word	0x08008c11
 80089f8:	08008f33 	.word	0x08008f33
 80089fc:	08008f33 	.word	0x08008f33
 8008a00:	08008aef 	.word	0x08008aef
 8008a04:	08008f33 	.word	0x08008f33
 8008a08:	08008f33 	.word	0x08008f33
 8008a0c:	08008f33 	.word	0x08008f33
 8008a10:	08008f33 	.word	0x08008f33
 8008a14:	08008f33 	.word	0x08008f33
 8008a18:	08008b73 	.word	0x08008b73
 8008a1c:	08008f33 	.word	0x08008f33
 8008a20:	08008f33 	.word	0x08008f33
 8008a24:	08008f33 	.word	0x08008f33
 8008a28:	08008b9f 	.word	0x08008b9f
 8008a2c:	08008f33 	.word	0x08008f33
 8008a30:	08008b47 	.word	0x08008b47
 8008a34:	08008f33 	.word	0x08008f33
 8008a38:	08008f33 	.word	0x08008f33
 8008a3c:	08008be5 	.word	0x08008be5
        {
        	case 'b':
        		ui = va_arg(arg,unsigned int);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	1d1a      	adds	r2, r3, #4
 8008a44:	603a      	str	r2, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        		index += convert(buffer, index, ui, 2);
 8008a4c:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8008a50:	1d38      	adds	r0, r7, #4
 8008a52:	2302      	movs	r3, #2
 8008a54:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008a58:	f000 fa96 	bl	8008f88 <convert>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008a64:	4413      	add	r3, r2
 8008a66:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        		break;
 8008a6a:	e262      	b.n	8008f32 <printf_custom+0x6d2>

            case 'c' :
            	c = va_arg(arg,int);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	1d1a      	adds	r2, r3, #4
 8008a70:	603a      	str	r2, [r7, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
            	buffer[index] = c;
 8008a78:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008a7c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008a80:	4413      	add	r3, r2
 8008a82:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8008a86:	f803 2cac 	strb.w	r2, [r3, #-172]
            	index++;
 8008a8a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008a8e:	3301      	adds	r3, #1
 8008a90:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                break;
 8008a94:	e24d      	b.n	8008f32 <printf_custom+0x6d2>

            case 'd' :
            	i = va_arg(arg,int);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	1d1a      	adds	r2, r3, #4
 8008a9a:	603a      	str	r2, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        		if(i<0)
 8008aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	da11      	bge.n	8008ace <printf_custom+0x26e>
        		{
        			i *= -1;
 8008aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008aae:	425b      	negs	r3, r3
 8008ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        			buffer[index] = '-';
 8008ab4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008ab8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008abc:	4413      	add	r3, r2
 8008abe:	222d      	movs	r2, #45	; 0x2d
 8008ac0:	f803 2cac 	strb.w	r2, [r3, #-172]
        			index++;
 8008ac4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008ac8:	3301      	adds	r3, #1
 8008aca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        		}
        		index += convert(buffer, index, i, 10);
 8008ace:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008ad2:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8008ad6:	1d38      	adds	r0, r7, #4
 8008ad8:	230a      	movs	r3, #10
 8008ada:	f000 fa55 	bl	8008f88 <convert>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                break;
 8008aec:	e221      	b.n	8008f32 <printf_custom+0x6d2>

            case 'i' :
            	i = va_arg(arg,int);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	1d1a      	adds	r2, r3, #4
 8008af2:	603a      	str	r2, [r7, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        		if(i<0)
 8008afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	da11      	bge.n	8008b26 <printf_custom+0x2c6>
        		{
        			i *= -1;
 8008b02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b06:	425b      	negs	r3, r3
 8008b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        			buffer[index] = '-';
 8008b0c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008b10:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008b14:	4413      	add	r3, r2
 8008b16:	222d      	movs	r2, #45	; 0x2d
 8008b18:	f803 2cac 	strb.w	r2, [r3, #-172]
        			index++;
 8008b1c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008b20:	3301      	adds	r3, #1
 8008b22:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        		}
        		index += convert(buffer, index, i, 10);
 8008b26:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008b2a:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8008b2e:	1d38      	adds	r0, r7, #4
 8008b30:	230a      	movs	r3, #10
 8008b32:	f000 fa29 	bl	8008f88 <convert>
 8008b36:	4603      	mov	r3, r0
 8008b38:	461a      	mov	r2, r3
 8008b3a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008b3e:	4413      	add	r3, r2
 8008b40:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                break;
 8008b44:	e1f5      	b.n	8008f32 <printf_custom+0x6d2>

            case 'u' :
            	ui = va_arg(arg,unsigned int);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	1d1a      	adds	r2, r3, #4
 8008b4a:	603a      	str	r2, [r7, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                index += convert(buffer, index, ui, 10);
 8008b52:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8008b56:	1d38      	adds	r0, r7, #4
 8008b58:	230a      	movs	r3, #10
 8008b5a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b5e:	f000 fa13 	bl	8008f88 <convert>
 8008b62:	4603      	mov	r3, r0
 8008b64:	461a      	mov	r2, r3
 8008b66:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                break;
 8008b70:	e1df      	b.n	8008f32 <printf_custom+0x6d2>

            case 'o':
            	ui = va_arg(arg,unsigned int);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	1d1a      	adds	r2, r3, #4
 8008b76:	603a      	str	r2, [r7, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            	index += convert(buffer, index, ui, 8);
 8008b7e:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8008b82:	1d38      	adds	r0, r7, #4
 8008b84:	2308      	movs	r3, #8
 8008b86:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b8a:	f000 f9fd 	bl	8008f88 <convert>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	461a      	mov	r2, r3
 8008b92:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008b96:	4413      	add	r3, r2
 8008b98:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                break;
 8008b9c:	e1c9      	b.n	8008f32 <printf_custom+0x6d2>

            case 's':
            	s = va_arg(arg,char *);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	1d1a      	adds	r2, r3, #4
 8008ba2:	603a      	str	r2, [r7, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            	while(*s!='\0')
 8008baa:	e013      	b.n	8008bd4 <printf_custom+0x374>
            	{
            		buffer[index] = *s;
 8008bac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008bb0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bb4:	7812      	ldrb	r2, [r2, #0]
 8008bb6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8008bba:	440b      	add	r3, r1
 8008bbc:	f803 2cac 	strb.w	r2, [r3, #-172]
            		s++;
 8008bc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            		index++;
 8008bca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008bce:	3301      	adds	r3, #1
 8008bd0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            	while(*s!='\0')
 8008bd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1e6      	bne.n	8008bac <printf_custom+0x34c>
            	}
                break;
 8008bde:	e1a8      	b.n	8008f32 <printf_custom+0x6d2>
 8008be0:	200022ec 	.word	0x200022ec

            case 'x':
            	ui = va_arg(arg,unsigned int);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	1d1a      	adds	r2, r3, #4
 8008be8:	603a      	str	r2, [r7, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            	index += convert(buffer, index, ui, 16);
 8008bf0:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8008bf4:	1d38      	adds	r0, r7, #4
 8008bf6:	2310      	movs	r3, #16
 8008bf8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008bfc:	f000 f9c4 	bl	8008f88 <convert>
 8008c00:	4603      	mov	r3, r0
 8008c02:	461a      	mov	r2, r3
 8008c04:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008c08:	4413      	add	r3, r2
 8008c0a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                break;
 8008c0e:	e190      	b.n	8008f32 <printf_custom+0x6d2>

            case 'f':
            	f = va_arg(arg,double);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	3307      	adds	r3, #7
 8008c14:	f023 0307 	bic.w	r3, r3, #7
 8008c18:	f103 0208 	add.w	r2, r3, #8
 8008c1c:	603a      	str	r2, [r7, #0]
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
            	i = (int)f;
 8008c26:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008c2a:	f7f7 fdff 	bl	800082c <__aeabi_d2iz>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            	f = (double)(f - i);
 8008c34:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008c38:	f7f7 fd06 	bl	8000648 <__aeabi_i2d>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008c44:	f7f7 fbb2 	bl	80003ac <__aeabi_dsub>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
            	f*=1000000;
 8008c50:	a3c9      	add	r3, pc, #804	; (adr r3, 8008f78 <printf_custom+0x718>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008c5a:	f7f7 fa79 	bl	8000150 <__aeabi_dmul>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
            	if(f<0) f*=-1;
 8008c66:	f04f 0200 	mov.w	r2, #0
 8008c6a:	f04f 0300 	mov.w	r3, #0
 8008c6e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008c72:	f7f7 fdb3 	bl	80007dc <__aeabi_dcmplt>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d009      	beq.n	8008c90 <printf_custom+0x430>
 8008c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008c8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            	j = (int)f;
 8008c90:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008c94:	f7f7 fdca 	bl	800082c <__aeabi_d2iz>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

            	if(j<0) j*=-1;
 8008c9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	da04      	bge.n	8008cb0 <printf_custom+0x450>
 8008ca6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008caa:	425b      	negs	r3, r3
 8008cac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

            	if((f-j)>0.5) j++;
 8008cb0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008cb4:	f7f7 fcc8 	bl	8000648 <__aeabi_i2d>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008cc0:	f7f7 fb74 	bl	80003ac <__aeabi_dsub>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f04f 0200 	mov.w	r2, #0
 8008cd0:	4bab      	ldr	r3, [pc, #684]	; (8008f80 <printf_custom+0x720>)
 8008cd2:	f7f7 fda1 	bl	8000818 <__aeabi_dcmpgt>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d004      	beq.n	8008ce6 <printf_custom+0x486>
 8008cdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

            	if(i<0)
 8008ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	da11      	bge.n	8008d12 <printf_custom+0x4b2>
        		{
        			i *= -1;
 8008cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cf2:	425b      	negs	r3, r3
 8008cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        			buffer[index] = '-';
 8008cf8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008cfc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008d00:	4413      	add	r3, r2
 8008d02:	222d      	movs	r2, #45	; 0x2d
 8008d04:	f803 2cac 	strb.w	r2, [r3, #-172]
        			index++;
 8008d08:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        		}
        		index += convert(buffer, index, i, 10);
 8008d12:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008d16:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8008d1a:	1d38      	adds	r0, r7, #4
 8008d1c:	230a      	movs	r3, #10
 8008d1e:	f000 f933 	bl	8008f88 <convert>
 8008d22:	4603      	mov	r3, r0
 8008d24:	461a      	mov	r2, r3
 8008d26:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        		buffer[index] = '.';
 8008d30:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008d34:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008d38:	4413      	add	r3, r2
 8008d3a:	222e      	movs	r2, #46	; 0x2e
 8008d3c:	f803 2cac 	strb.w	r2, [r3, #-172]
        		index++;
 8008d40:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008d44:	3301      	adds	r3, #1
 8008d46:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        		index += convert(buffer, index, j, 10);
 8008d4a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008d4e:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8008d52:	1d38      	adds	r0, r7, #4
 8008d54:	230a      	movs	r3, #10
 8008d56:	f000 f917 	bl	8008f88 <convert>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008d62:	4413      	add	r3, r2
 8008d64:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            	break;
 8008d68:	e0e3      	b.n	8008f32 <printf_custom+0x6d2>

            case'.':
            	traverse++;
 8008d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d6e:	3301      	adds	r3, #1
 8008d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            	c = *traverse; //get the number of decimals
 8008d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
            	for(ui=49; ui<58; ui++){
 8008d7e:	2331      	movs	r3, #49	; 0x31
 8008d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d84:	e00a      	b.n	8008d9c <printf_custom+0x53c>
            		if(c==ui)
 8008d86:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008d8a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d009      	beq.n	8008da6 <printf_custom+0x546>
            	for(ui=49; ui<58; ui++){
 8008d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d96:	3301      	adds	r3, #1
 8008d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008da0:	2b39      	cmp	r3, #57	; 0x39
 8008da2:	d9f0      	bls.n	8008d86 <printf_custom+0x526>
 8008da4:	e000      	b.n	8008da8 <printf_custom+0x548>
            			break;
 8008da6:	bf00      	nop
            	}
            	ui-=48;
 8008da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dac:	3b30      	subs	r3, #48	; 0x30
 8008dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            	traverse++;	//get the 'f' indicator
 8008db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008db6:	3301      	adds	r3, #1
 8008db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            	if(*traverse == 'f'){
 8008dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b66      	cmp	r3, #102	; 0x66
 8008dc4:	f040 80b4 	bne.w	8008f30 <printf_custom+0x6d0>
                	f = va_arg(arg,double);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	3307      	adds	r3, #7
 8008dcc:	f023 0307 	bic.w	r3, r3, #7
 8008dd0:	f103 0208 	add.w	r2, r3, #8
 8008dd4:	603a      	str	r2, [r7, #0]
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
                	i = (int)f;
 8008dde:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008de2:	f7f7 fd23 	bl	800082c <__aeabi_d2iz>
 8008de6:	4603      	mov	r3, r0
 8008de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                	f = (double)(f - i);
 8008dec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8008df0:	f7f7 fc2a 	bl	8000648 <__aeabi_i2d>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008dfc:	f7f7 fad6 	bl	80003ac <__aeabi_dsub>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
                	while(ui--){
 8008e08:	e00a      	b.n	8008e20 <printf_custom+0x5c0>
                		f*=10;
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	4b5d      	ldr	r3, [pc, #372]	; (8008f84 <printf_custom+0x724>)
 8008e10:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008e14:	f7f7 f99c 	bl	8000150 <__aeabi_dmul>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
                	while(ui--){
 8008e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e24:	1e5a      	subs	r2, r3, #1
 8008e26:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1ed      	bne.n	8008e0a <printf_custom+0x5aa>
                	}
                	if(f<0) f*=-1;
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008e3a:	f7f7 fccf 	bl	80007dc <__aeabi_dcmplt>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d009      	beq.n	8008e58 <printf_custom+0x5f8>
 8008e44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008e54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                	j = (int)f;
 8008e58:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008e5c:	f7f7 fce6 	bl	800082c <__aeabi_d2iz>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

                	if(j<0) j*=-1;
 8008e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	da04      	bge.n	8008e78 <printf_custom+0x618>
 8008e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e72:	425b      	negs	r3, r3
 8008e74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

                	if((f-j)>0.5) j++;
 8008e78:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008e7c:	f7f7 fbe4 	bl	8000648 <__aeabi_i2d>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008e88:	f7f7 fa90 	bl	80003ac <__aeabi_dsub>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4610      	mov	r0, r2
 8008e92:	4619      	mov	r1, r3
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	4b39      	ldr	r3, [pc, #228]	; (8008f80 <printf_custom+0x720>)
 8008e9a:	f7f7 fcbd 	bl	8000818 <__aeabi_dcmpgt>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d004      	beq.n	8008eae <printf_custom+0x64e>
 8008ea4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

                	if(i<0)
 8008eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	da11      	bge.n	8008eda <printf_custom+0x67a>
            		{
            			i *= -1;
 8008eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008eba:	425b      	negs	r3, r3
 8008ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            			buffer[index] = '-';
 8008ec0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008ec4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008ec8:	4413      	add	r3, r2
 8008eca:	222d      	movs	r2, #45	; 0x2d
 8008ecc:	f803 2cac 	strb.w	r2, [r3, #-172]
            			index++;
 8008ed0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            		}
            		index += convert(buffer, index, i, 10);
 8008eda:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008ede:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8008ee2:	1d38      	adds	r0, r7, #4
 8008ee4:	230a      	movs	r3, #10
 8008ee6:	f000 f84f 	bl	8008f88 <convert>
 8008eea:	4603      	mov	r3, r0
 8008eec:	461a      	mov	r2, r3
 8008eee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            		buffer[index] = '.';
 8008ef8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008efc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008f00:	4413      	add	r3, r2
 8008f02:	222e      	movs	r2, #46	; 0x2e
 8008f04:	f803 2cac 	strb.w	r2, [r3, #-172]
            		index++;
 8008f08:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            		index += convert(buffer, index, j, 10);
 8008f12:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008f16:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8008f1a:	1d38      	adds	r0, r7, #4
 8008f1c:	230a      	movs	r3, #10
 8008f1e:	f000 f833 	bl	8008f88 <convert>
 8008f22:	4603      	mov	r3, r0
 8008f24:	461a      	mov	r2, r3
 8008f26:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            	}
            	break;
 8008f30:	bf00      	nop

        }
    	if(*traverse =='\0')
 8008f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <printf_custom+0x6f4>
    for(traverse = format; *traverse != '\0'; traverse++)
 8008f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f40:	3301      	adds	r3, #1
 8008f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f47f acc5 	bne.w	80088dc <printf_custom+0x7c>
 8008f52:	e000      	b.n	8008f56 <printf_custom+0x6f6>
    		break;
 8008f54:	bf00      	nop
#ifdef  UART_PRINTF
    return HAL_UART_Transmit(&UART_PORT, ( uint8_t * )buffer, index, 0xFFFF );
#endif

#ifdef USB_PRINTF
    return CDC_Transmit_FS((uint8_t*)buffer, index);
 8008f56:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	1d3b      	adds	r3, r7, #4
 8008f5e:	4611      	mov	r1, r2
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 f91b 	bl	800919c <CDC_Transmit_FS>
 8008f66:	4603      	mov	r3, r0
#endif
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	37b0      	adds	r7, #176	; 0xb0
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f72:	b004      	add	sp, #16
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	00000000 	.word	0x00000000
 8008f7c:	412e8480 	.word	0x412e8480
 8008f80:	3fe00000 	.word	0x3fe00000
 8008f84:	40240000 	.word	0x40240000

08008f88 <convert>:




static uint8_t convert(char* buffer, uint8_t index, unsigned int num, int base)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	607a      	str	r2, [r7, #4]
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	460b      	mov	r3, r1
 8008f96:	72fb      	strb	r3, [r7, #11]
	static char buf[32]; 			// The max number of characters when representing a number is a 32bit number in binary
    static char Representation[]= "0123456789ABCDEF";
    char *ptr;
    uint8_t i=0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	74fb      	strb	r3, [r7, #19]
    uint8_t j=0; 					//used to return the number of characters included in the buffer.
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	74bb      	strb	r3, [r7, #18]
    uint8_t k=32;   				//just for control the number of interactions.
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	747b      	strb	r3, [r7, #17]

    ptr = &buf[31];					//set the pointer address to 32th position of buf
 8008fa4:	4b1b      	ldr	r3, [pc, #108]	; (8009014 <convert+0x8c>)
 8008fa6:	617b      	str	r3, [r7, #20]

    do
    {
        *ptr = Representation[num%base];
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fb0:	fb02 f201 	mul.w	r2, r2, r1
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	4a18      	ldr	r2, [pc, #96]	; (8009018 <convert+0x90>)
 8008fb8:	5cd2      	ldrb	r2, [r2, r3]
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	701a      	strb	r2, [r3, #0]
        num /= base;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc6:	607b      	str	r3, [r7, #4]
        ptr--;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	617b      	str	r3, [r7, #20]
        k--;
 8008fce:	7c7b      	ldrb	r3, [r7, #17]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	747b      	strb	r3, [r7, #17]
    }while(num != 0);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1e6      	bne.n	8008fa8 <convert+0x20>


    for(i=k; i<32; i++)
 8008fda:	7c7b      	ldrb	r3, [r7, #17]
 8008fdc:	74fb      	strb	r3, [r7, #19]
 8008fde:	e00f      	b.n	8009000 <convert+0x78>
    {
  		buffer[j+index] = buf[i];
 8008fe0:	7cfa      	ldrb	r2, [r7, #19]
 8008fe2:	7cb9      	ldrb	r1, [r7, #18]
 8008fe4:	7afb      	ldrb	r3, [r7, #11]
 8008fe6:	440b      	add	r3, r1
 8008fe8:	4619      	mov	r1, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	440b      	add	r3, r1
 8008fee:	490b      	ldr	r1, [pc, #44]	; (800901c <convert+0x94>)
 8008ff0:	5c8a      	ldrb	r2, [r1, r2]
 8008ff2:	701a      	strb	r2, [r3, #0]
    	j++;
 8008ff4:	7cbb      	ldrb	r3, [r7, #18]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	74bb      	strb	r3, [r7, #18]
    for(i=k; i<32; i++)
 8008ffa:	7cfb      	ldrb	r3, [r7, #19]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	74fb      	strb	r3, [r7, #19]
 8009000:	7cfb      	ldrb	r3, [r7, #19]
 8009002:	2b1f      	cmp	r3, #31
 8009004:	d9ec      	bls.n	8008fe0 <convert+0x58>
    }
    return(j);
 8009006:	7cbb      	ldrb	r3, [r7, #18]
}
 8009008:	4618      	mov	r0, r3
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	200020cb 	.word	0x200020cb
 8009018:	20000120 	.word	0x20000120
 800901c:	200020ac 	.word	0x200020ac

08009020 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009024:	2200      	movs	r2, #0
 8009026:	4912      	ldr	r1, [pc, #72]	; (8009070 <MX_USB_DEVICE_Init+0x50>)
 8009028:	4812      	ldr	r0, [pc, #72]	; (8009074 <MX_USB_DEVICE_Init+0x54>)
 800902a:	f7fd f9aa 	bl	8006382 <USBD_Init>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009034:	f7f7 fe16 	bl	8000c64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009038:	490f      	ldr	r1, [pc, #60]	; (8009078 <MX_USB_DEVICE_Init+0x58>)
 800903a:	480e      	ldr	r0, [pc, #56]	; (8009074 <MX_USB_DEVICE_Init+0x54>)
 800903c:	f7fd f9cc 	bl	80063d8 <USBD_RegisterClass>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009046:	f7f7 fe0d 	bl	8000c64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800904a:	490c      	ldr	r1, [pc, #48]	; (800907c <MX_USB_DEVICE_Init+0x5c>)
 800904c:	4809      	ldr	r0, [pc, #36]	; (8009074 <MX_USB_DEVICE_Init+0x54>)
 800904e:	f7fd f8fd 	bl	800624c <USBD_CDC_RegisterInterface>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009058:	f7f7 fe04 	bl	8000c64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800905c:	4805      	ldr	r0, [pc, #20]	; (8009074 <MX_USB_DEVICE_Init+0x54>)
 800905e:	f7fd f9d4 	bl	800640a <USBD_Start>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009068:	f7f7 fdfc 	bl	8000c64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800906c:	bf00      	nop
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20000144 	.word	0x20000144
 8009074:	200022ec 	.word	0x200022ec
 8009078:	20000018 	.word	0x20000018
 800907c:	20000134 	.word	0x20000134

08009080 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009084:	2200      	movs	r2, #0
 8009086:	4905      	ldr	r1, [pc, #20]	; (800909c <CDC_Init_FS+0x1c>)
 8009088:	4805      	ldr	r0, [pc, #20]	; (80090a0 <CDC_Init_FS+0x20>)
 800908a:	f7fd f8f5 	bl	8006278 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800908e:	4905      	ldr	r1, [pc, #20]	; (80090a4 <CDC_Init_FS+0x24>)
 8009090:	4803      	ldr	r0, [pc, #12]	; (80090a0 <CDC_Init_FS+0x20>)
 8009092:	f7fd f90a 	bl	80062aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009096:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009098:	4618      	mov	r0, r3
 800909a:	bd80      	pop	{r7, pc}
 800909c:	20002a34 	.word	0x20002a34
 80090a0:	200022ec 	.word	0x200022ec
 80090a4:	2000264c 	.word	0x2000264c

080090a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bc80      	pop	{r7}
 80090b4:	4770      	bx	lr
	...

080090b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
 80090c4:	4613      	mov	r3, r2
 80090c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	2b23      	cmp	r3, #35	; 0x23
 80090cc:	d84a      	bhi.n	8009164 <CDC_Control_FS+0xac>
 80090ce:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <CDC_Control_FS+0x1c>)
 80090d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d4:	08009165 	.word	0x08009165
 80090d8:	08009165 	.word	0x08009165
 80090dc:	08009165 	.word	0x08009165
 80090e0:	08009165 	.word	0x08009165
 80090e4:	08009165 	.word	0x08009165
 80090e8:	08009165 	.word	0x08009165
 80090ec:	08009165 	.word	0x08009165
 80090f0:	08009165 	.word	0x08009165
 80090f4:	08009165 	.word	0x08009165
 80090f8:	08009165 	.word	0x08009165
 80090fc:	08009165 	.word	0x08009165
 8009100:	08009165 	.word	0x08009165
 8009104:	08009165 	.word	0x08009165
 8009108:	08009165 	.word	0x08009165
 800910c:	08009165 	.word	0x08009165
 8009110:	08009165 	.word	0x08009165
 8009114:	08009165 	.word	0x08009165
 8009118:	08009165 	.word	0x08009165
 800911c:	08009165 	.word	0x08009165
 8009120:	08009165 	.word	0x08009165
 8009124:	08009165 	.word	0x08009165
 8009128:	08009165 	.word	0x08009165
 800912c:	08009165 	.word	0x08009165
 8009130:	08009165 	.word	0x08009165
 8009134:	08009165 	.word	0x08009165
 8009138:	08009165 	.word	0x08009165
 800913c:	08009165 	.word	0x08009165
 8009140:	08009165 	.word	0x08009165
 8009144:	08009165 	.word	0x08009165
 8009148:	08009165 	.word	0x08009165
 800914c:	08009165 	.word	0x08009165
 8009150:	08009165 	.word	0x08009165
 8009154:	08009165 	.word	0x08009165
 8009158:	08009165 	.word	0x08009165
 800915c:	08009165 	.word	0x08009165
 8009160:	08009165 	.word	0x08009165
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009164:	bf00      	nop
  }

  return (USBD_OK);
 8009166:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009168:	4618      	mov	r0, r3
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	bc80      	pop	{r7}
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop

08009174 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	4805      	ldr	r0, [pc, #20]	; (8009198 <CDC_Receive_FS+0x24>)
 8009182:	f7fd f892 	bl	80062aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009186:	4804      	ldr	r0, [pc, #16]	; (8009198 <CDC_Receive_FS+0x24>)
 8009188:	f7fd f8d1 	bl	800632e <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800918c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	200022ec 	.word	0x200022ec

0800919c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80091ac:	4b0d      	ldr	r3, [pc, #52]	; (80091e4 <CDC_Transmit_FS+0x48>)
 80091ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80091be:	2301      	movs	r3, #1
 80091c0:	e00b      	b.n	80091da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80091c2:	887b      	ldrh	r3, [r7, #2]
 80091c4:	461a      	mov	r2, r3
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4806      	ldr	r0, [pc, #24]	; (80091e4 <CDC_Transmit_FS+0x48>)
 80091ca:	f7fd f855 	bl	8006278 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80091ce:	4805      	ldr	r0, [pc, #20]	; (80091e4 <CDC_Transmit_FS+0x48>)
 80091d0:	f7fd f87e 	bl	80062d0 <USBD_CDC_TransmitPacket>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	200022ec 	.word	0x200022ec

080091e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	6039      	str	r1, [r7, #0]
 80091f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2212      	movs	r2, #18
 80091f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091fa:	4b03      	ldr	r3, [pc, #12]	; (8009208 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	bc80      	pop	{r7}
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	20000160 	.word	0x20000160

0800920c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	2204      	movs	r2, #4
 800921c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800921e:	4b03      	ldr	r3, [pc, #12]	; (800922c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009220:	4618      	mov	r0, r3
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	bc80      	pop	{r7}
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	20000174 	.word	0x20000174

08009230 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d105      	bne.n	800924e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	4907      	ldr	r1, [pc, #28]	; (8009264 <USBD_FS_ProductStrDescriptor+0x34>)
 8009246:	4808      	ldr	r0, [pc, #32]	; (8009268 <USBD_FS_ProductStrDescriptor+0x38>)
 8009248:	f7fe f858 	bl	80072fc <USBD_GetString>
 800924c:	e004      	b.n	8009258 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	4904      	ldr	r1, [pc, #16]	; (8009264 <USBD_FS_ProductStrDescriptor+0x34>)
 8009252:	4805      	ldr	r0, [pc, #20]	; (8009268 <USBD_FS_ProductStrDescriptor+0x38>)
 8009254:	f7fe f852 	bl	80072fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009258:	4b02      	ldr	r3, [pc, #8]	; (8009264 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20002e1c 	.word	0x20002e1c
 8009268:	08009ae8 	.word	0x08009ae8

0800926c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	4603      	mov	r3, r0
 8009274:	6039      	str	r1, [r7, #0]
 8009276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	4904      	ldr	r1, [pc, #16]	; (800928c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800927c:	4804      	ldr	r0, [pc, #16]	; (8009290 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800927e:	f7fe f83d 	bl	80072fc <USBD_GetString>
  return USBD_StrDesc;
 8009282:	4b02      	ldr	r3, [pc, #8]	; (800928c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	20002e1c 	.word	0x20002e1c
 8009290:	08009b00 	.word	0x08009b00

08009294 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	221a      	movs	r2, #26
 80092a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092a6:	f000 f843 	bl	8009330 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092aa:	4b02      	ldr	r3, [pc, #8]	; (80092b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20000178 	.word	0x20000178

080092b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d105      	bne.n	80092d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	4907      	ldr	r1, [pc, #28]	; (80092ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80092ce:	4808      	ldr	r0, [pc, #32]	; (80092f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092d0:	f7fe f814 	bl	80072fc <USBD_GetString>
 80092d4:	e004      	b.n	80092e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	4904      	ldr	r1, [pc, #16]	; (80092ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80092da:	4805      	ldr	r0, [pc, #20]	; (80092f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092dc:	f7fe f80e 	bl	80072fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80092e0:	4b02      	ldr	r3, [pc, #8]	; (80092ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	20002e1c 	.word	0x20002e1c
 80092f0:	08009b14 	.word	0x08009b14

080092f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	6039      	str	r1, [r7, #0]
 80092fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d105      	bne.n	8009312 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	4907      	ldr	r1, [pc, #28]	; (8009328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800930a:	4808      	ldr	r0, [pc, #32]	; (800932c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800930c:	f7fd fff6 	bl	80072fc <USBD_GetString>
 8009310:	e004      	b.n	800931c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	4904      	ldr	r1, [pc, #16]	; (8009328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009316:	4805      	ldr	r0, [pc, #20]	; (800932c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009318:	f7fd fff0 	bl	80072fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800931c:	4b02      	ldr	r3, [pc, #8]	; (8009328 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20002e1c 	.word	0x20002e1c
 800932c:	08009b20 	.word	0x08009b20

08009330 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009336:	4b0f      	ldr	r3, [pc, #60]	; (8009374 <Get_SerialNum+0x44>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800933c:	4b0e      	ldr	r3, [pc, #56]	; (8009378 <Get_SerialNum+0x48>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009342:	4b0e      	ldr	r3, [pc, #56]	; (800937c <Get_SerialNum+0x4c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4413      	add	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d009      	beq.n	800936a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009356:	2208      	movs	r2, #8
 8009358:	4909      	ldr	r1, [pc, #36]	; (8009380 <Get_SerialNum+0x50>)
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f000 f814 	bl	8009388 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009360:	2204      	movs	r2, #4
 8009362:	4908      	ldr	r1, [pc, #32]	; (8009384 <Get_SerialNum+0x54>)
 8009364:	68b8      	ldr	r0, [r7, #8]
 8009366:	f000 f80f 	bl	8009388 <IntToUnicode>
  }
}
 800936a:	bf00      	nop
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	1ffff7e8 	.word	0x1ffff7e8
 8009378:	1ffff7ec 	.word	0x1ffff7ec
 800937c:	1ffff7f0 	.word	0x1ffff7f0
 8009380:	2000017a 	.word	0x2000017a
 8009384:	2000018a 	.word	0x2000018a

08009388 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	4613      	mov	r3, r2
 8009394:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800939a:	2300      	movs	r3, #0
 800939c:	75fb      	strb	r3, [r7, #23]
 800939e:	e027      	b.n	80093f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	0f1b      	lsrs	r3, r3, #28
 80093a4:	2b09      	cmp	r3, #9
 80093a6:	d80b      	bhi.n	80093c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	0f1b      	lsrs	r3, r3, #28
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	4619      	mov	r1, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	440b      	add	r3, r1
 80093b8:	3230      	adds	r2, #48	; 0x30
 80093ba:	b2d2      	uxtb	r2, r2
 80093bc:	701a      	strb	r2, [r3, #0]
 80093be:	e00a      	b.n	80093d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	0f1b      	lsrs	r3, r3, #28
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	4619      	mov	r1, r3
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	440b      	add	r3, r1
 80093d0:	3237      	adds	r2, #55	; 0x37
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	005b      	lsls	r3, r3, #1
 80093e0:	3301      	adds	r3, #1
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	4413      	add	r3, r2
 80093e6:	2200      	movs	r2, #0
 80093e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	3301      	adds	r3, #1
 80093ee:	75fb      	strb	r3, [r7, #23]
 80093f0:	7dfa      	ldrb	r2, [r7, #23]
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d3d3      	bcc.n	80093a0 <IntToUnicode+0x18>
  }
}
 80093f8:	bf00      	nop
 80093fa:	bf00      	nop
 80093fc:	371c      	adds	r7, #28
 80093fe:	46bd      	mov	sp, r7
 8009400:	bc80      	pop	{r7}
 8009402:	4770      	bx	lr

08009404 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a0d      	ldr	r2, [pc, #52]	; (8009448 <HAL_PCD_MspInit+0x44>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d113      	bne.n	800943e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009416:	4b0d      	ldr	r3, [pc, #52]	; (800944c <HAL_PCD_MspInit+0x48>)
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	4a0c      	ldr	r2, [pc, #48]	; (800944c <HAL_PCD_MspInit+0x48>)
 800941c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009420:	61d3      	str	r3, [r2, #28]
 8009422:	4b0a      	ldr	r3, [pc, #40]	; (800944c <HAL_PCD_MspInit+0x48>)
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800942e:	2200      	movs	r2, #0
 8009430:	2105      	movs	r1, #5
 8009432:	2014      	movs	r0, #20
 8009434:	f7f7 fe5f 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009438:	2014      	movs	r0, #20
 800943a:	f7f7 fe78 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800943e:	bf00      	nop
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	40005c00 	.word	0x40005c00
 800944c:	40021000 	.word	0x40021000

08009450 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f7fd f817 	bl	800649a <USBD_LL_SetupStage>
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	00db      	lsls	r3, r3, #3
 8009492:	440b      	add	r3, r1
 8009494:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	4619      	mov	r1, r3
 800949e:	f7fd f849 	bl	8006534 <USBD_LL_DataOutStage>
}
 80094a2:	bf00      	nop
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	4613      	mov	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	00db      	lsls	r3, r3, #3
 80094c8:	440b      	add	r3, r1
 80094ca:	333c      	adds	r3, #60	; 0x3c
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	4619      	mov	r1, r3
 80094d2:	f7fd f8a0 	bl	8006616 <USBD_LL_DataInStage>
}
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b082      	sub	sp, #8
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fd f9b0 	bl	8006852 <USBD_LL_SOF>
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009502:	2301      	movs	r3, #1
 8009504:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	2b02      	cmp	r3, #2
 800950c:	d001      	beq.n	8009512 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800950e:	f7f7 fba9 	bl	8000c64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009518:	7bfa      	ldrb	r2, [r7, #15]
 800951a:	4611      	mov	r1, r2
 800951c:	4618      	mov	r0, r3
 800951e:	f7fd f960 	bl	80067e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009528:	4618      	mov	r0, r3
 800952a:	f7fd f919 	bl	8006760 <USBD_LL_Reset>
}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009546:	4618      	mov	r0, r3
 8009548:	f7fd f95a 	bl	8006800 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009554:	4b04      	ldr	r3, [pc, #16]	; (8009568 <HAL_PCD_SuspendCallback+0x30>)
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	4a03      	ldr	r2, [pc, #12]	; (8009568 <HAL_PCD_SuspendCallback+0x30>)
 800955a:	f043 0306 	orr.w	r3, r3, #6
 800955e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	e000ed00 	.word	0xe000ed00

0800956c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800957a:	4618      	mov	r0, r3
 800957c:	f7fd f954 	bl	8006828 <USBD_LL_Resume>
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009590:	4a28      	ldr	r2, [pc, #160]	; (8009634 <USBD_LL_Init+0xac>)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a26      	ldr	r2, [pc, #152]	; (8009634 <USBD_LL_Init+0xac>)
 800959c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80095a0:	4b24      	ldr	r3, [pc, #144]	; (8009634 <USBD_LL_Init+0xac>)
 80095a2:	4a25      	ldr	r2, [pc, #148]	; (8009638 <USBD_LL_Init+0xb0>)
 80095a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095a6:	4b23      	ldr	r3, [pc, #140]	; (8009634 <USBD_LL_Init+0xac>)
 80095a8:	2208      	movs	r2, #8
 80095aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095ac:	4b21      	ldr	r3, [pc, #132]	; (8009634 <USBD_LL_Init+0xac>)
 80095ae:	2202      	movs	r2, #2
 80095b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095b2:	4b20      	ldr	r3, [pc, #128]	; (8009634 <USBD_LL_Init+0xac>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095b8:	4b1e      	ldr	r3, [pc, #120]	; (8009634 <USBD_LL_Init+0xac>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095be:	4b1d      	ldr	r3, [pc, #116]	; (8009634 <USBD_LL_Init+0xac>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095c4:	481b      	ldr	r0, [pc, #108]	; (8009634 <USBD_LL_Init+0xac>)
 80095c6:	f7f7 ff76 	bl	80014b6 <HAL_PCD_Init>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80095d0:	f7f7 fb48 	bl	8000c64 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095da:	2318      	movs	r3, #24
 80095dc:	2200      	movs	r2, #0
 80095de:	2100      	movs	r1, #0
 80095e0:	f7f9 fab8 	bl	8002b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095ea:	2358      	movs	r3, #88	; 0x58
 80095ec:	2200      	movs	r2, #0
 80095ee:	2180      	movs	r1, #128	; 0x80
 80095f0:	f7f9 fab0 	bl	8002b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095fa:	23c0      	movs	r3, #192	; 0xc0
 80095fc:	2200      	movs	r2, #0
 80095fe:	2181      	movs	r1, #129	; 0x81
 8009600:	f7f9 faa8 	bl	8002b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800960a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800960e:	2200      	movs	r2, #0
 8009610:	2101      	movs	r1, #1
 8009612:	f7f9 fa9f 	bl	8002b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800961c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009620:	2200      	movs	r2, #0
 8009622:	2182      	movs	r1, #130	; 0x82
 8009624:	f7f9 fa96 	bl	8002b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	2000301c 	.word	0x2000301c
 8009638:	40005c00 	.word	0x40005c00

0800963c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009652:	4618      	mov	r0, r3
 8009654:	f7f8 f83a 	bl	80016cc <HAL_PCD_Start>
 8009658:	4603      	mov	r3, r0
 800965a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f94e 	bl	8009900 <USBD_Get_USB_Status>
 8009664:	4603      	mov	r3, r0
 8009666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009668:	7bbb      	ldrb	r3, [r7, #14]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	4608      	mov	r0, r1
 800967c:	4611      	mov	r1, r2
 800967e:	461a      	mov	r2, r3
 8009680:	4603      	mov	r3, r0
 8009682:	70fb      	strb	r3, [r7, #3]
 8009684:	460b      	mov	r3, r1
 8009686:	70bb      	strb	r3, [r7, #2]
 8009688:	4613      	mov	r3, r2
 800968a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800969a:	78bb      	ldrb	r3, [r7, #2]
 800969c:	883a      	ldrh	r2, [r7, #0]
 800969e:	78f9      	ldrb	r1, [r7, #3]
 80096a0:	f7f8 f9b4 	bl	8001a0c <HAL_PCD_EP_Open>
 80096a4:	4603      	mov	r3, r0
 80096a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 f928 	bl	8009900 <USBD_Get_USB_Status>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096d8:	78fa      	ldrb	r2, [r7, #3]
 80096da:	4611      	mov	r1, r2
 80096dc:	4618      	mov	r0, r3
 80096de:	f7f8 f9fb 	bl	8001ad8 <HAL_PCD_EP_Close>
 80096e2:	4603      	mov	r3, r0
 80096e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 f909 	bl	8009900 <USBD_Get_USB_Status>
 80096ee:	4603      	mov	r3, r0
 80096f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009716:	78fa      	ldrb	r2, [r7, #3]
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f7f8 fabb 	bl	8001c96 <HAL_PCD_EP_SetStall>
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f8ea 	bl	8009900 <USBD_Get_USB_Status>
 800972c:	4603      	mov	r3, r0
 800972e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009730:	7bbb      	ldrb	r3, [r7, #14]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009754:	78fa      	ldrb	r2, [r7, #3]
 8009756:	4611      	mov	r1, r2
 8009758:	4618      	mov	r0, r3
 800975a:	f7f8 fafc 	bl	8001d56 <HAL_PCD_EP_ClrStall>
 800975e:	4603      	mov	r3, r0
 8009760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	4618      	mov	r0, r3
 8009766:	f000 f8cb 	bl	8009900 <USBD_Get_USB_Status>
 800976a:	4603      	mov	r3, r0
 800976c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800976e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800978a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800978c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009790:	2b00      	cmp	r3, #0
 8009792:	da0c      	bge.n	80097ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800979a:	68f9      	ldr	r1, [r7, #12]
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	440b      	add	r3, r1
 80097a8:	3302      	adds	r3, #2
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	e00b      	b.n	80097c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097ae:	78fb      	ldrb	r3, [r7, #3]
 80097b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097b4:	68f9      	ldr	r1, [r7, #12]
 80097b6:	4613      	mov	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	440b      	add	r3, r1
 80097c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80097c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bc80      	pop	{r7}
 80097ce:	4770      	bx	lr

080097d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097ea:	78fa      	ldrb	r2, [r7, #3]
 80097ec:	4611      	mov	r1, r2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7f8 f8e7 	bl	80019c2 <HAL_PCD_SetAddress>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 f880 	bl	8009900 <USBD_Get_USB_Status>
 8009800:	4603      	mov	r3, r0
 8009802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009804:	7bbb      	ldrb	r3, [r7, #14]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b086      	sub	sp, #24
 8009812:	af00      	add	r7, sp, #0
 8009814:	60f8      	str	r0, [r7, #12]
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	461a      	mov	r2, r3
 800981a:	460b      	mov	r3, r1
 800981c:	72fb      	strb	r3, [r7, #11]
 800981e:	4613      	mov	r3, r2
 8009820:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009830:	893b      	ldrh	r3, [r7, #8]
 8009832:	7af9      	ldrb	r1, [r7, #11]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	f7f8 f9eb 	bl	8001c10 <HAL_PCD_EP_Transmit>
 800983a:	4603      	mov	r3, r0
 800983c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	4618      	mov	r0, r3
 8009842:	f000 f85d 	bl	8009900 <USBD_Get_USB_Status>
 8009846:	4603      	mov	r3, r0
 8009848:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800984a:	7dbb      	ldrb	r3, [r7, #22]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b086      	sub	sp, #24
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	607a      	str	r2, [r7, #4]
 800985e:	461a      	mov	r2, r3
 8009860:	460b      	mov	r3, r1
 8009862:	72fb      	strb	r3, [r7, #11]
 8009864:	4613      	mov	r3, r2
 8009866:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009876:	893b      	ldrh	r3, [r7, #8]
 8009878:	7af9      	ldrb	r1, [r7, #11]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	f7f8 f974 	bl	8001b68 <HAL_PCD_EP_Receive>
 8009880:	4603      	mov	r3, r0
 8009882:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 f83a 	bl	8009900 <USBD_Get_USB_Status>
 800988c:	4603      	mov	r3, r0
 800988e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009890:	7dbb      	ldrb	r3, [r7, #22]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b082      	sub	sp, #8
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	460b      	mov	r3, r1
 80098a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098ac:	78fa      	ldrb	r2, [r7, #3]
 80098ae:	4611      	mov	r1, r2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f8 f996 	bl	8001be2 <HAL_PCD_EP_GetRxCount>
 80098b6:	4603      	mov	r3, r0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098c8:	4b02      	ldr	r3, [pc, #8]	; (80098d4 <USBD_static_malloc+0x14>)
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bc80      	pop	{r7}
 80098d2:	4770      	bx	lr
 80098d4:	200020cc 	.word	0x200020cc

080098d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]

}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bc80      	pop	{r7}
 80098e8:	4770      	bx	lr

080098ea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	460b      	mov	r3, r1
 80098f4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80098f6:	bf00      	nop
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bc80      	pop	{r7}
 80098fe:	4770      	bx	lr

08009900 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	2b03      	cmp	r3, #3
 8009912:	d817      	bhi.n	8009944 <USBD_Get_USB_Status+0x44>
 8009914:	a201      	add	r2, pc, #4	; (adr r2, 800991c <USBD_Get_USB_Status+0x1c>)
 8009916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991a:	bf00      	nop
 800991c:	0800992d 	.word	0x0800992d
 8009920:	08009933 	.word	0x08009933
 8009924:	08009939 	.word	0x08009939
 8009928:	0800993f 	.word	0x0800993f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
    break;
 8009930:	e00b      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009932:	2302      	movs	r3, #2
 8009934:	73fb      	strb	r3, [r7, #15]
    break;
 8009936:	e008      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009938:	2301      	movs	r3, #1
 800993a:	73fb      	strb	r3, [r7, #15]
    break;
 800993c:	e005      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800993e:	2302      	movs	r3, #2
 8009940:	73fb      	strb	r3, [r7, #15]
    break;
 8009942:	e002      	b.n	800994a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009944:	2302      	movs	r3, #2
 8009946:	73fb      	strb	r3, [r7, #15]
    break;
 8009948:	bf00      	nop
  }
  return usb_status;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	bc80      	pop	{r7}
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop

08009958 <__libc_init_array>:
 8009958:	b570      	push	{r4, r5, r6, lr}
 800995a:	2600      	movs	r6, #0
 800995c:	4d0c      	ldr	r5, [pc, #48]	; (8009990 <__libc_init_array+0x38>)
 800995e:	4c0d      	ldr	r4, [pc, #52]	; (8009994 <__libc_init_array+0x3c>)
 8009960:	1b64      	subs	r4, r4, r5
 8009962:	10a4      	asrs	r4, r4, #2
 8009964:	42a6      	cmp	r6, r4
 8009966:	d109      	bne.n	800997c <__libc_init_array+0x24>
 8009968:	f000 f822 	bl	80099b0 <_init>
 800996c:	2600      	movs	r6, #0
 800996e:	4d0a      	ldr	r5, [pc, #40]	; (8009998 <__libc_init_array+0x40>)
 8009970:	4c0a      	ldr	r4, [pc, #40]	; (800999c <__libc_init_array+0x44>)
 8009972:	1b64      	subs	r4, r4, r5
 8009974:	10a4      	asrs	r4, r4, #2
 8009976:	42a6      	cmp	r6, r4
 8009978:	d105      	bne.n	8009986 <__libc_init_array+0x2e>
 800997a:	bd70      	pop	{r4, r5, r6, pc}
 800997c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009980:	4798      	blx	r3
 8009982:	3601      	adds	r6, #1
 8009984:	e7ee      	b.n	8009964 <__libc_init_array+0xc>
 8009986:	f855 3b04 	ldr.w	r3, [r5], #4
 800998a:	4798      	blx	r3
 800998c:	3601      	adds	r6, #1
 800998e:	e7f2      	b.n	8009976 <__libc_init_array+0x1e>
 8009990:	08009b48 	.word	0x08009b48
 8009994:	08009b48 	.word	0x08009b48
 8009998:	08009b48 	.word	0x08009b48
 800999c:	08009b4c 	.word	0x08009b4c

080099a0 <memset>:
 80099a0:	4603      	mov	r3, r0
 80099a2:	4402      	add	r2, r0
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d100      	bne.n	80099aa <memset+0xa>
 80099a8:	4770      	bx	lr
 80099aa:	f803 1b01 	strb.w	r1, [r3], #1
 80099ae:	e7f9      	b.n	80099a4 <memset+0x4>

080099b0 <_init>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	bf00      	nop
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr

080099bc <_fini>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	bf00      	nop
 80099c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c2:	bc08      	pop	{r3}
 80099c4:	469e      	mov	lr, r3
 80099c6:	4770      	bx	lr
